//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace KnxProd.Model
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    using System.Linq;
    using System.ComponentModel;
    
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PropType_t", Namespace="http://knx.org/xml/project/11")]
    public enum PropType_T
    {
        
        /// <summary>
        /// </summary>
        PDT_CONTROL,
        
        /// <summary>
        /// </summary>
        PDT_CHAR,
        
        /// <summary>
        /// </summary>
        PDT_UNSIGNED_CHAR,
        
        /// <summary>
        /// </summary>
        PDT_INT,
        
        /// <summary>
        /// </summary>
        PDT_UNSIGNED_INT,
        
        /// <summary>
        /// </summary>
        PDT_KNX_FLOAT,
        
        /// <summary>
        /// </summary>
        PDT_DATE,
        
        /// <summary>
        /// </summary>
        PDT_TIME,
        
        /// <summary>
        /// </summary>
        PDT_LONG,
        
        /// <summary>
        /// </summary>
        PDT_UNSIGNED_LONG,
        
        /// <summary>
        /// </summary>
        PDT_FLOAT,
        
        /// <summary>
        /// </summary>
        PDT_DOUBLE,
        
        /// <summary>
        /// </summary>
        PDT_CHAR_BLOCK,
        
        /// <summary>
        /// </summary>
        PDT_POLL_GROUP_SETTINGS,
        
        /// <summary>
        /// </summary>
        PDT_SHORT_CHAR_BLOCK,
        
        /// <summary>
        /// </summary>
        PDT_DATE_TIME,
        
        /// <summary>
        /// </summary>
        PDT_VARIABLE_LENGTH,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_01,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_02,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_03,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_04,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_05,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_06,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_07,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_08,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_09,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_10,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_11,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_12,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_13,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_14,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_15,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_16,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_17,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_18,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_19,
        
        /// <summary>
        /// </summary>
        PDT_GENERIC_20,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("PDT_UTF-8")]
        PDT_UTF_8,
        
        /// <summary>
        /// </summary>
        PDT_VERSION,
        
        /// <summary>
        /// </summary>
        PDT_ALARM_INFO,
        
        /// <summary>
        /// </summary>
        PDT_BINARY_INFORMATION,
        
        /// <summary>
        /// </summary>
        PDT_BITSET8,
        
        /// <summary>
        /// </summary>
        PDT_BITSET16,
        
        /// <summary>
        /// </summary>
        PDT_ENUM8,
        
        /// <summary>
        /// </summary>
        PDT_SCALING,
        
        /// <summary>
        /// </summary>
        PDT_NE_VL,
        
        /// <summary>
        /// </summary>
        PDT_NE_FL,
        
        /// <summary>
        /// </summary>
        PDT_FUNCTION,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LdCtrlMemAddrSpace_t", Namespace="http://knx.org/xml/project/11")]
    public enum LdCtrlMemAddrSpace_T
    {
        
        /// <summary>
        /// </summary>
        Standard,
        
        /// <summary>
        /// </summary>
        User,
        
        /// <summary>
        /// </summary>
        LcSlave,
        
        /// <summary>
        /// </summary>
        LcFilter,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LdCtrlControlVariable_t", Namespace="http://knx.org/xml/project/11")]
    public enum LdCtrlControlVariable_T
    {
        
        /// <summary>
        /// </summary>
        EnableSegmentWrite,
        
        /// <summary>
        /// </summary>
        EnableVerifyOnWriteDirect,
        
        /// <summary>
        /// </summary>
        EnableOptimisticWrite,
        
        /// <summary>
        /// </summary>
        EnableMemoryAutoVerify,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LdCtrlProcType_t", Namespace="http://knx.org/xml/project/11")]
    public enum LdCtrlProcType_T
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("full")]
        Full,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("par")]
        Par,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("grp")]
        Grp,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("full,par")]
        FullCommaPar,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("full,grp")]
        FullCommaGrp,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("par,grp")]
        ParCommaGrp,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("auto")]
        Auto,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MemoryType_t", Namespace="http://knx.org/xml/project/11")]
    public enum MemoryType_T
    {
        
        /// <summary>
        /// </summary>
        RAM,
        
        /// <summary>
        /// </summary>
        EEPROM,
        
        /// <summary>
        /// </summary>
        FLASH,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Access_t", Namespace="http://knx.org/xml/project/11")]
    public enum Access_T
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        Read,
        
        /// <summary>
        /// </summary>
        ReadWrite,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectPriority_t", Namespace="http://knx.org/xml/project/11")]
    public enum ComObjectPriority_T
    {
        
        /// <summary>
        /// </summary>
        Low,
        
        /// <summary>
        /// </summary>
        High,
        
        /// <summary>
        /// </summary>
        Alert,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectSize_t", Namespace="http://knx.org/xml/project/11")]
    public enum ComObjectSize_T
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1 Bit")]
        Item1_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2 Bit")]
        Item2_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3 Bit")]
        Item3_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4 Bit")]
        Item4_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5 Bit")]
        Item5_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6 Bit")]
        Item6_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7 Bit")]
        Item7_Bit,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1 Byte")]
        Item1_Byte,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2 Bytes")]
        Item2_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3 Bytes")]
        Item3_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4 Bytes")]
        Item4_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5 Bytes")]
        Item5_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6 Bytes")]
        Item6_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7 Bytes")]
        Item7_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8 Bytes")]
        Item8_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9 Bytes")]
        Item9_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10 Bytes")]
        Item10_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11 Bytes")]
        Item11_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12 Bytes")]
        Item12_Bytes,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14 Bytes")]
        Item14_Bytes,
        
        /// <summary>
        /// </summary>
        LegacyVarData,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Enable_t", Namespace="http://knx.org/xml/project/11")]
    public enum Enable_T
    {
        
        /// <summary>
        /// </summary>
        Enabled,
        
        /// <summary>
        /// </summary>
        Disabled,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedureStyle_t", Namespace="http://knx.org/xml/project/11")]
    public enum LoadProcedureStyle_T
    {
        
        /// <summary>
        /// </summary>
        DefaultProcedure,
        
        /// <summary>
        /// </summary>
        ProductProcedure,
        
        /// <summary>
        /// </summary>
        MergedProcedure,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompletionStatus_t", Namespace="http://knx.org/xml/project/11")]
    public enum CompletionStatus_T
    {
        
        /// <summary>
        /// </summary>
        Undefined,
        
        /// <summary>
        /// </summary>
        Editing,
        
        /// <summary>
        /// </summary>
        FinishedDesign,
        
        /// <summary>
        /// </summary>
        FinishedCommissioning,
        
        /// <summary>
        /// </summary>
        Tested,
        
        /// <summary>
        /// </summary>
        Accepted,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceName_t", Namespace="http://knx.org/xml/project/11")]
    public enum ResourceName_T
    {
        
        /// <summary>
        /// </summary>
        ManagementStyle,
        
        /// <summary>
        /// </summary>
        DeviceManufacturerId,
        
        /// <summary>
        /// </summary>
        DeviceBusVoltage,
        
        /// <summary>
        /// </summary>
        DevicePeiType,
        
        /// <summary>
        /// </summary>
        GroupAddressTableLoadControl,
        
        /// <summary>
        /// </summary>
        GroupAddressTableLoadStatus,
        
        /// <summary>
        /// </summary>
        GroupAddressTablePtr,
        
        /// <summary>
        /// </summary>
        GroupAddressTable,
        
        /// <summary>
        /// </summary>
        GroupAssociationTableLoadControl,
        
        /// <summary>
        /// </summary>
        GroupAssociationTableLoadStatus,
        
        /// <summary>
        /// </summary>
        GroupAssociationTablePtr,
        
        /// <summary>
        /// </summary>
        GroupAssociationTable,
        
        /// <summary>
        /// </summary>
        GroupObjectTablePtr,
        
        /// <summary>
        /// </summary>
        GroupObjectTable,
        
        /// <summary>
        /// </summary>
        GroupFilterTablePtr,
        
        /// <summary>
        /// </summary>
        GroupFilterTable,
        
        /// <summary>
        /// </summary>
        ApplicationId,
        
        /// <summary>
        /// </summary>
        ApplicationLoadControl,
        
        /// <summary>
        /// </summary>
        ApplicationLoadStatus,
        
        /// <summary>
        /// </summary>
        ApplicationRunControl,
        
        /// <summary>
        /// </summary>
        ApplicationRunStatus,
        
        /// <summary>
        /// </summary>
        PeiprogId,
        
        /// <summary>
        /// </summary>
        PeiprogLoadControl,
        
        /// <summary>
        /// </summary>
        PeiprogLoadStatus,
        
        /// <summary>
        /// </summary>
        PeiprogRunControl,
        
        /// <summary>
        /// </summary>
        PeiprogRunStatus,
        
        /// <summary>
        /// </summary>
        ApplicationPeiType,
        
        /// <summary>
        /// </summary>
        ReConfig,
        
        /// <summary>
        /// </summary>
        IndividualAddress,
        
        /// <summary>
        /// </summary>
        DomainAddress,
        
        /// <summary>
        /// </summary>
        FrequencyChannel,
        
        /// <summary>
        /// </summary>
        Sensitivity,
        
        /// <summary>
        /// </summary>
        HardwareConfig1,
        
        /// <summary>
        /// </summary>
        HardwareConfig2,
        
        /// <summary>
        /// </summary>
        HardwareConfig3,
        
        /// <summary>
        /// </summary>
        HardwareConfig4,
        
        /// <summary>
        /// </summary>
        DeviceOrderId,
        
        /// <summary>
        /// </summary>
        DeviceSerialNumber,
        
        /// <summary>
        /// </summary>
        ProgrammingMode,
        
        /// <summary>
        /// </summary>
        PollingGroupSettings,
        
        /// <summary>
        /// </summary>
        ManagementDescriptor01,
        
        /// <summary>
        /// </summary>
        RunError,
        
        /// <summary>
        /// </summary>
        LcConfig,
        
        /// <summary>
        /// </summary>
        LcGrpConfig,
        
        /// <summary>
        /// </summary>
        LcError,
        
        /// <summary>
        /// </summary>
        LcMode,
        
        /// <summary>
        /// </summary>
        GroupObjectTableLoadControl,
        
        /// <summary>
        /// </summary>
        GroupObjectTableLoadStatus,
        
        /// <summary>
        /// </summary>
        GroupAcknowledgeTable,
        
        /// <summary>
        /// </summary>
        HardwareType,
        
        /// <summary>
        /// </summary>
        FirmwareVersion,
        
        /// <summary>
        /// </summary>
        ManufacturerData,
        
        /// <summary>
        /// </summary>
        ApplicationDataPtr,
        
        /// <summary>
        /// </summary>
        PeiprogDataPtr,
        
        /// <summary>
        /// </summary>
        GroupAddressTableStamp,
        
        /// <summary>
        /// </summary>
        GroupAssociationTableStamp,
        
        /// <summary>
        /// </summary>
        GroupObjectTableStamp,
        
        /// <summary>
        /// </summary>
        GroupFilterTableStamp,
        
        /// <summary>
        /// </summary>
        ApplicationStamp,
        
        /// <summary>
        /// </summary>
        PeiprogStamp,
        
        /// <summary>
        /// </summary>
        MaxApduLength,
        
        /// <summary>
        /// </summary>
        GroupFilterTableLoadControl,
        
        /// <summary>
        /// </summary>
        GroupFilterTableLoadStatus,
        
        /// <summary>
        /// </summary>
        MainLcConfig,
        
        /// <summary>
        /// </summary>
        SubLcConfig,
        
        /// <summary>
        /// </summary>
        MainLcGrpConfig,
        
        /// <summary>
        /// </summary>
        SubLcGrpConfig,
        
        /// <summary>
        /// </summary>
        CouplServControl,
        
        /// <summary>
        /// </summary>
        MaxRoutingApduLength,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceAccess_t", Namespace="http://knx.org/xml/project/11")]
    public enum ResourceAccess_T
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("remote")]
        Remote,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("local1")]
        Local1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("local2")]
        Local2,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceMgmtStyle_t", Namespace="http://knx.org/xml/project/11")]
    public enum ResourceMgmtStyle_T
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("simple")]
        Simple,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("lsm")]
        Lsm,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceAddrSpace_t", Namespace="http://knx.org/xml/project/11")]
    public enum ResourceAddrSpace_T
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        StandardMemory,
        
        /// <summary>
        /// </summary>
        UserMemory,
        
        /// <summary>
        /// </summary>
        SystemProperty,
        
        /// <summary>
        /// </summary>
        AppProperty,
        
        /// <summary>
        /// </summary>
        LcSlaveMemory,
        
        /// <summary>
        /// </summary>
        LcFilterMemory,
        
        /// <summary>
        /// </summary>
        ADC,
        
        /// <summary>
        /// </summary>
        Constant,
        
        /// <summary>
        /// </summary>
        Pointer,
        
        /// <summary>
        /// </summary>
        Property,
        
        /// <summary>
        /// </summary>
        RelativeMemory,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceAccessRights_t", Namespace="http://knx.org/xml/project/11")]
    public enum ResourceAccessRights_T
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        SystemManufacturer,
        
        /// <summary>
        /// </summary>
        Manufacturer,
        
        /// <summary>
        /// </summary>
        Configuration,
        
        /// <summary>
        /// </summary>
        Runtime,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcedureType_t", Namespace="http://knx.org/xml/project/11")]
    public enum ProcedureType_T
    {
        
        /// <summary>
        /// </summary>
        Load,
        
        /// <summary>
        /// </summary>
        Unload,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupAddressStyle_t", Namespace="http://knx.org/xml/project/11")]
    public enum GroupAddressStyle_T
    {
        
        /// <summary>
        /// </summary>
        TwoLevel,
        
        /// <summary>
        /// </summary>
        ThreeLevel,
        
        /// <summary>
        /// </summary>
        Free,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BuildingPartType_t", Namespace="http://knx.org/xml/project/11")]
    public enum BuildingPartType_T
    {
        
        /// <summary>
        /// </summary>
        Building,
        
        /// <summary>
        /// </summary>
        BuildingPart,
        
        /// <summary>
        /// </summary>
        Floor,
        
        /// <summary>
        /// </summary>
        Room,
        
        /// <summary>
        /// </summary>
        DistributionBoard,
        
        /// <summary>
        /// </summary>
        Stairway,
        
        /// <summary>
        /// </summary>
        Corridor,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramType_t", Namespace="http://knx.org/xml/project/11")]
    public enum ApplicationProgramType_T
    {
        
        /// <summary>
        /// </summary>
        ApplicationProgram,
        
        /// <summary>
        /// </summary>
        PeiProgram,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RegistrationStatus_t", Namespace="http://knx.org/xml/project/11")]
    public enum RegistrationStatus_T
    {
        
        /// <summary>
        /// </summary>
        Unregistered,
        
        /// <summary>
        /// </summary>
        Registered,
        
        /// <summary>
        /// </summary>
        Certified,
        
        /// <summary>
        /// </summary>
        FutureUseNotRecommended,
        
        /// <summary>
        /// </summary>
        FutureUseNotAllowed,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProjectTracingLevel_t", Namespace="http://knx.org/xml/project/11")]
    public enum ProjectTracingLevel_T
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        OperationUsed,
        
        /// <summary>
        /// </summary>
        Detailed,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ToDoStatus_t", Namespace="http://knx.org/xml/project/11")]
    public enum ToDoStatus_T
    {
        
        /// <summary>
        /// </summary>
        Open,
        
        /// <summary>
        /// </summary>
        Accomplished,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Capability_t", Namespace="http://knx.org/xml/project/11")]
    public enum Capability_T
    {
        
        /// <summary>
        /// </summary>
        AddDeleteDevice,
        
        /// <summary>
        /// </summary>
        GroupCommunicationEvents,
        
        /// <summary>
        /// </summary>
        GroupCommunicationLimits,
        
        /// <summary>
        /// </summary>
        TransferParameters,
        
        /// <summary>
        /// </summary>
        ProjectCheck,
        
        /// <summary>
        /// </summary>
        Printing,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramIPConfig_t", Namespace="http://knx.org/xml/project/11")]
    public enum ApplicationProgramIPConfig_T
    {
        
        /// <summary>
        /// </summary>
        Custom,
        
        /// <summary>
        /// </summary>
        Tool,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IPConfigAssign_t", Namespace="http://knx.org/xml/project/11")]
    public enum IPConfigAssign_T
    {
        
        /// <summary>
        /// </summary>
        Fixed,
        
        /// <summary>
        /// </summary>
        Auto,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComTableExpectation_t", Namespace="http://knx.org/xml/project/11")]
    public enum ComTableExpectation_T
    {
        
        /// <summary>
        /// </summary>
        Yes,
        
        /// <summary>
        /// </summary>
        No,
        
        /// <summary>
        /// </summary>
        Try,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HorizontalAlignment_t", Namespace="http://knx.org/xml/project/11")]
    public enum HorizontalAlignment_T
    {
        
        /// <summary>
        /// </summary>
        Left,
        
        /// <summary>
        /// </summary>
        Middle,
        
        /// <summary>
        /// </summary>
        Right,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TextEncoding_t", Namespace="http://knx.org/xml/project/11")]
    public enum TextEncoding_T
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("us-ascii")]
        Us_Ascii,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-1")]
        Iso_8859_1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-2")]
        Iso_8859_2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-3")]
        Iso_8859_3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-4")]
        Iso_8859_4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-5")]
        Iso_8859_5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-6")]
        Iso_8859_6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-7")]
        Iso_8859_7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-8")]
        Iso_8859_8,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-9")]
        Iso_8859_9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-10")]
        Iso_8859_10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-13")]
        Iso_8859_13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("iso-8859-15")]
        Iso_8859_15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("utf-8")]
        Utf_8,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointType> _datapointTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("DatapointTypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DatapointType", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointType> DatapointTypes
        {
            get
            {
                return _datapointTypes;
            }
            private set
            {
                if (_datapointTypes == value)
                    return;
                if (_datapointTypes == null || value == null || !_datapointTypes.SequenceEqual(value))
                {
                    _datapointTypes = value;
                    OnPropertyChanged(nameof(DatapointTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointTypesSpecified
        {
            get
            {
                return (this.DatapointTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MasterData_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MasterData_T" /> class.</para>
        /// </summary>
        public MasterData_T()
        {
            this._datapointTypes = new System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointType>();
            this._interfaceObjectTypes = new System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectTypesInterfaceObjectType>();
            this._interfaceObjectProperties = new System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty>();
            this._propertyDataTypes = new System.Collections.ObjectModel.ObservableCollection<MasterData_TPropertyDataTypesPropertyDataType>();
            this._mediumTypes = new System.Collections.ObjectModel.ObservableCollection<MasterData_TMediumTypesMediumType>();
            this._maskVersions = new System.Collections.ObjectModel.ObservableCollection<MaskVersion_T>();
            this._manufacturers = new System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturer>();
            this._languages = new System.Collections.ObjectModel.ObservableCollection<LanguageData_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectTypesInterfaceObjectType> _interfaceObjectTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("InterfaceObjectTypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InterfaceObjectType", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectTypesInterfaceObjectType> InterfaceObjectTypes
        {
            get
            {
                return _interfaceObjectTypes;
            }
            private set
            {
                if (_interfaceObjectTypes == value)
                    return;
                if (_interfaceObjectTypes == null || value == null || !_interfaceObjectTypes.SequenceEqual(value))
                {
                    _interfaceObjectTypes = value;
                    OnPropertyChanged(nameof(InterfaceObjectTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InterfaceObjectTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InterfaceObjectTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InterfaceObjectTypesSpecified
        {
            get
            {
                return (this.InterfaceObjectTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty> _interfaceObjectProperties;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("InterfaceObjectProperties", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InterfaceObjectProperty", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty> InterfaceObjectProperties
        {
            get
            {
                return _interfaceObjectProperties;
            }
            private set
            {
                if (_interfaceObjectProperties == value)
                    return;
                if (_interfaceObjectProperties == null || value == null || !_interfaceObjectProperties.SequenceEqual(value))
                {
                    _interfaceObjectProperties = value;
                    OnPropertyChanged(nameof(InterfaceObjectProperties));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InterfaceObjectProperties-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InterfaceObjectProperties collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InterfaceObjectPropertiesSpecified
        {
            get
            {
                return (this.InterfaceObjectProperties.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TPropertyDataTypesPropertyDataType> _propertyDataTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("PropertyDataTypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PropertyDataType", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TPropertyDataTypesPropertyDataType> PropertyDataTypes
        {
            get
            {
                return _propertyDataTypes;
            }
            private set
            {
                if (_propertyDataTypes == value)
                    return;
                if (_propertyDataTypes == null || value == null || !_propertyDataTypes.SequenceEqual(value))
                {
                    _propertyDataTypes = value;
                    OnPropertyChanged(nameof(PropertyDataTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PropertyDataTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PropertyDataTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PropertyDataTypesSpecified
        {
            get
            {
                return (this.PropertyDataTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TMediumTypesMediumType> _mediumTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("MediumTypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("MediumType", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TMediumTypesMediumType> MediumTypes
        {
            get
            {
                return _mediumTypes;
            }
            private set
            {
                if (_mediumTypes == value)
                    return;
                if (_mediumTypes == null || value == null || !_mediumTypes.SequenceEqual(value))
                {
                    _mediumTypes = value;
                    OnPropertyChanged(nameof(MediumTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MediumTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MediumTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MediumTypesSpecified
        {
            get
            {
                return (this.MediumTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MaskVersion_T> _maskVersions;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("MaskVersions", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("MaskVersion", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MaskVersion_T> MaskVersions
        {
            get
            {
                return _maskVersions;
            }
            private set
            {
                if (_maskVersions == value)
                    return;
                if (_maskVersions == null || value == null || !_maskVersions.SequenceEqual(value))
                {
                    _maskVersions = value;
                    OnPropertyChanged(nameof(MaskVersions));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaskVersions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MaskVersions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaskVersionsSpecified
        {
            get
            {
                return (this.MaskVersions.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturer> _manufacturers;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Manufacturers", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Manufacturer", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturer> Manufacturers
        {
            get
            {
                return _manufacturers;
            }
            private set
            {
                if (_manufacturers == value)
                    return;
                if (_manufacturers == null || value == null || !_manufacturers.SequenceEqual(value))
                {
                    _manufacturers = value;
                    OnPropertyChanged(nameof(Manufacturers));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Manufacturers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Manufacturers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ManufacturersSpecified
        {
            get
            {
                return (this.Manufacturers.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LanguageData_T> _languages;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Languages", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Language", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LanguageData_T> Languages
        {
            get
            {
                return _languages;
            }
            private set
            {
                if (_languages == value)
                    return;
                if (_languages == null || value == null || !_languages.SequenceEqual(value))
                {
                    _languages = value;
                    OnPropertyChanged(nameof(Languages));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Languages-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Languages collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LanguagesSpecified
        {
            get
            {
                return (this.Languages.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _version;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Version", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Version
        {
            get
            {
                return _version;
            }
            set
            {
                if (!_version.Equals(value))
                {
                    _version = value;
                    OnPropertyChanged(nameof(Version));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _signature;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Signature", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Signature
        {
            get
            {
                return _signature;
            }
            set
            {
                if (_signature == value)
                    return;
                if (_signature == null || value == null || !_signature.SequenceEqual(value))
                {
                    _signature = value;
                    OnPropertyChanged(nameof(Signature));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TDatapointTypesDatapointType", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TDatapointTypesDatapointType : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointTypeDatapointSubtypesDatapointSubtype> _datapointSubtypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("DatapointSubtypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DatapointSubtype", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointTypeDatapointSubtypesDatapointSubtype> DatapointSubtypes
        {
            get
            {
                return _datapointSubtypes;
            }
            private set
            {
                if (_datapointSubtypes == value)
                    return;
                if (_datapointSubtypes == null || value == null || !_datapointSubtypes.SequenceEqual(value))
                {
                    _datapointSubtypes = value;
                    OnPropertyChanged(nameof(DatapointSubtypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointSubtypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointSubtypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointSubtypesSpecified
        {
            get
            {
                return (this.DatapointSubtypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MasterData_TDatapointTypesDatapointType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MasterData_TDatapointTypesDatapointType" /> class.</para>
        /// </summary>
        public MasterData_TDatapointTypesDatapointType()
        {
            this._datapointSubtypes = new System.Collections.ObjectModel.ObservableCollection<MasterData_TDatapointTypesDatapointTypeDatapointSubtypesDatapointSubtype>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _default;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Default", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DefaultValue
        {
            get
            {
                return _default;
            }
            set
            {
                if (!_default.Equals(value))
                {
                    _default = value;
                    OnPropertyChanged(nameof(DefaultValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Default-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Default property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DefaultValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Default
        {
            get
            {
                if (this.DefaultValueSpecified)
                {
                    return this.DefaultValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.DefaultValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.DefaultValue = value.GetValueOrDefault();
                    this.DefaultValueSpecified = value.HasValue;
                    OnPropertyChanged("Default");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TInterfaceObjectTypesInterfaceObjectType", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TInterfaceObjectTypesInterfaceObjectType : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TDatapointTypesDatapointTypeDatapointSubtypesDatapointSubtype", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TDatapointTypesDatapointTypeDatapointSubtypesDatapointSubtype : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _default = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Default", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Default
        {
            get
            {
                return _default;
            }
            set
            {
                if (!_default.Equals(value))
                {
                    _default = value;
                    OnPropertyChanged(nameof(Default));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _objectType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ObjectType
        {
            get
            {
                return _objectType;
            }
            set
            {
                if (_objectType == value)
                    return;
                if (_objectType == null || value == null || !_objectType.Equals(value))
                {
                    _objectType = value;
                    OnPropertyChanged(nameof(ObjectType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _pDT;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("PDT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> PDT
        {
            get
            {
                return _pDT;
            }
            private set
            {
                if (_pDT == value)
                    return;
                if (_pDT == null || value == null || !_pDT.Equals(value))
                {
                    _pDT = value;
                    OnPropertyChanged(nameof(PDT));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PDT-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PDT collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PDTSpecified
        {
            get
            {
                return (this.PDT.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty" /> class.</para>
        /// </summary>
        public MasterData_TInterfaceObjectPropertiesInterfaceObjectProperty()
        {
            this._pDT = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _array = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Array", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Array
        {
            get
            {
                return _array;
            }
            set
            {
                if (!_array.Equals(value))
                {
                    _array = value;
                    OnPropertyChanged(nameof(Array));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TPropertyDataTypesPropertyDataType", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TPropertyDataTypesPropertyDataType : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeValue
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(SizeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Size-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SizeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> Size
        {
            get
            {
                if (this.SizeValueSpecified)
                {
                    return this.SizeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.SizeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.SizeValue = value.GetValueOrDefault();
                    this.SizeValueSpecified = value.HasValue;
                    OnPropertyChanged("Size");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _readSize;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadSize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ReadSizeValue
        {
            get
            {
                return _readSize;
            }
            set
            {
                if (!_readSize.Equals(value))
                {
                    _readSize = value;
                    OnPropertyChanged(nameof(ReadSizeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReadSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReadSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReadSizeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ReadSize
        {
            get
            {
                if (this.ReadSizeValueSpecified)
                {
                    return this.ReadSizeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReadSizeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReadSizeValue = value.GetValueOrDefault();
                    this.ReadSizeValueSpecified = value.HasValue;
                    OnPropertyChanged("ReadSize");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TMediumTypesMediumType", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TMediumTypesMediumType : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private short _domainAddressLength;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DomainAddressLength", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public short DomainAddressLength
        {
            get
            {
                return _domainAddressLength;
            }
            set
            {
                if (!_domainAddressLength.Equals(value))
                {
                    _domainAddressLength = value;
                    OnPropertyChanged(nameof(DomainAddressLength));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MaskVersion_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaskVersion_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MaskVersion_TDownwardCompatibleMasksDownwardCompatibleMask> _downwardCompatibleMasks;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("DownwardCompatibleMasks", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DownwardCompatibleMask", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MaskVersion_TDownwardCompatibleMasksDownwardCompatibleMask> DownwardCompatibleMasks
        {
            get
            {
                return _downwardCompatibleMasks;
            }
            private set
            {
                if (_downwardCompatibleMasks == value)
                    return;
                if (_downwardCompatibleMasks == null || value == null || !_downwardCompatibleMasks.SequenceEqual(value))
                {
                    _downwardCompatibleMasks = value;
                    OnPropertyChanged(nameof(DownwardCompatibleMasks));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DownwardCompatibleMasks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DownwardCompatibleMasks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DownwardCompatibleMasksSpecified
        {
            get
            {
                return (this.DownwardCompatibleMasks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MaskVersion_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MaskVersion_T" /> class.</para>
        /// </summary>
        public MaskVersion_T()
        {
            this._downwardCompatibleMasks = new System.Collections.ObjectModel.ObservableCollection<MaskVersion_TDownwardCompatibleMasksDownwardCompatibleMask>();
            this._maskEntries = new System.Collections.ObjectModel.ObservableCollection<MaskVersion_TMaskEntriesMaskEntry>();
            this._hawkConfigurationData = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MaskVersion_TMaskEntriesMaskEntry> _maskEntries;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("MaskEntries", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("MaskEntry", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MaskVersion_TMaskEntriesMaskEntry> MaskEntries
        {
            get
            {
                return _maskEntries;
            }
            private set
            {
                if (_maskEntries == value)
                    return;
                if (_maskEntries == null || value == null || !_maskEntries.SequenceEqual(value))
                {
                    _maskEntries = value;
                    OnPropertyChanged(nameof(MaskEntries));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaskEntries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MaskEntries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaskEntriesSpecified
        {
            get
            {
                return (this.MaskEntries.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_T> _hawkConfigurationData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("HawkConfigurationData", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_T> HawkConfigurationData
        {
            get
            {
                return _hawkConfigurationData;
            }
            private set
            {
                if (_hawkConfigurationData == value)
                    return;
                if (_hawkConfigurationData == null || value == null || !_hawkConfigurationData.SequenceEqual(value))
                {
                    _hawkConfigurationData = value;
                    OnPropertyChanged(nameof(HawkConfigurationData));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HawkConfigurationData-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the HawkConfigurationData collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HawkConfigurationDataSpecified
        {
            get
            {
                return (this.HawkConfigurationData.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _maskVersion;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MaskVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort MaskVersion
        {
            get
            {
                return _maskVersion;
            }
            set
            {
                if (!_maskVersion.Equals(value))
                {
                    _maskVersion = value;
                    OnPropertyChanged(nameof(MaskVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _mgmtDescriptor01;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MgmtDescriptor01", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] MgmtDescriptor01
        {
            get
            {
                return _mgmtDescriptor01;
            }
            set
            {
                if (_mgmtDescriptor01 == value)
                    return;
                if (_mgmtDescriptor01 == null || value == null || !_mgmtDescriptor01.SequenceEqual(value))
                {
                    _mgmtDescriptor01 = value;
                    OnPropertyChanged(nameof(MgmtDescriptor01));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MaskVersion_TManagementModel _managementModel;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ManagementModel", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MaskVersion_TManagementModel ManagementModel
        {
            get
            {
                return _managementModel;
            }
            set
            {
                if (!_managementModel.Equals(value))
                {
                    _managementModel = value;
                    OnPropertyChanged(nameof(ManagementModel));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _mediumTypeRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MediumTypeRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MediumTypeRefId
        {
            get
            {
                return _mediumTypeRefId;
            }
            set
            {
                if (_mediumTypeRefId == value)
                    return;
                if (_mediumTypeRefId == null || value == null || !_mediumTypeRefId.Equals(value))
                {
                    _mediumTypeRefId = value;
                    OnPropertyChanged(nameof(MediumTypeRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _otherMediumTypeRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("OtherMediumTypeRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OtherMediumTypeRefId
        {
            get
            {
                return _otherMediumTypeRefId;
            }
            set
            {
                if (_otherMediumTypeRefId == value)
                    return;
                if (_otherMediumTypeRefId == null || value == null || !_otherMediumTypeRefId.Equals(value))
                {
                    _otherMediumTypeRefId = value;
                    OnPropertyChanged(nameof(OtherMediumTypeRefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TFeaturesFeature> _features;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Features", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Feature", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TFeaturesFeature> Features
        {
            get
            {
                return _features;
            }
            private set
            {
                if (_features == value)
                    return;
                if (_features == null || value == null || !_features.SequenceEqual(value))
                {
                    _features = value;
                    OnPropertyChanged(nameof(Features));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Features-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Features collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FeaturesSpecified
        {
            get
            {
                return (this.Features.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HawkConfigurationData_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HawkConfigurationData_T" /> class.</para>
        /// </summary>
        public HawkConfigurationData_T()
        {
            this._features = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TFeaturesFeature>();
            this._resources = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TResourcesResource>();
            this._procedures = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TProceduresProcedure>();
            this._memorySegments = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TMemorySegmentsMemorySegment>();
            this._interfaceObjects = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObject>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TResourcesResource> _resources;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Resources", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Resource", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TResourcesResource> Resources
        {
            get
            {
                return _resources;
            }
            private set
            {
                if (_resources == value)
                    return;
                if (_resources == null || value == null || !_resources.SequenceEqual(value))
                {
                    _resources = value;
                    OnPropertyChanged(nameof(Resources));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Resources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Resources collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResourcesSpecified
        {
            get
            {
                return (this.Resources.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TProceduresProcedure> _procedures;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Procedures", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Procedure", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TProceduresProcedure> Procedures
        {
            get
            {
                return _procedures;
            }
            private set
            {
                if (_procedures == value)
                    return;
                if (_procedures == null || value == null || !_procedures.SequenceEqual(value))
                {
                    _procedures = value;
                    OnPropertyChanged(nameof(Procedures));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Procedures-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Procedures collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProceduresSpecified
        {
            get
            {
                return (this.Procedures.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TMemorySegmentsMemorySegment> _memorySegments;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("MemorySegments", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("MemorySegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TMemorySegmentsMemorySegment> MemorySegments
        {
            get
            {
                return _memorySegments;
            }
            private set
            {
                if (_memorySegments == value)
                    return;
                if (_memorySegments == null || value == null || !_memorySegments.SequenceEqual(value))
                {
                    _memorySegments = value;
                    OnPropertyChanged(nameof(MemorySegments));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemorySegments-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MemorySegments collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemorySegmentsSpecified
        {
            get
            {
                return (this.MemorySegments.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObject> _interfaceObjects;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("InterfaceObjects", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InterfaceObject", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObject> InterfaceObjects
        {
            get
            {
                return _interfaceObjects;
            }
            private set
            {
                if (_interfaceObjects == value)
                    return;
                if (_interfaceObjects == null || value == null || !_interfaceObjects.SequenceEqual(value))
                {
                    _interfaceObjects = value;
                    OnPropertyChanged(nameof(InterfaceObjects));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InterfaceObjects-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InterfaceObjects collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InterfaceObjectsSpecified
        {
            get
            {
                return (this.InterfaceObjects.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _ets3SystemPlugin;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: \{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [System.Xml.Serialization.XmlAttributeAttribute("Ets3SystemPlugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ets3SystemPlugin
        {
            get
            {
                return _ets3SystemPlugin;
            }
            set
            {
                if (_ets3SystemPlugin == value)
                    return;
                if (_ets3SystemPlugin == null || value == null || !_ets3SystemPlugin.Equals(value))
                {
                    _ets3SystemPlugin = value;
                    OnPropertyChanged(nameof(Ets3SystemPlugin));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _legacyVersion;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int LegacyVersionValue
        {
            get
            {
                return _legacyVersion;
            }
            set
            {
                if (!_legacyVersion.Equals(value))
                {
                    _legacyVersion = value;
                    OnPropertyChanged(nameof(LegacyVersionValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LegacyVersion-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LegacyVersion property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LegacyVersionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LegacyVersion
        {
            get
            {
                if (this.LegacyVersionValueSpecified)
                {
                    return this.LegacyVersionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LegacyVersionValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LegacyVersionValue = value.GetValueOrDefault();
                    this.LegacyVersionValueSpecified = value.HasValue;
                    OnPropertyChanged("LegacyVersion");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MaskVersion_TDownwardCompatibleMasksDownwardCompatibleMask", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaskVersion_TDownwardCompatibleMasksDownwardCompatibleMask : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MaskVersion_TMaskEntriesMaskEntry", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaskVersion_TMaskEntriesMaskEntry : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MaskVersion_TManagementModel", Namespace="http://knx.org/xml/project/11")]
    public enum MaskVersion_TManagementModel
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        Bcu1,
        
        /// <summary>
        /// </summary>
        BimM112,
        
        /// <summary>
        /// </summary>
        Bcu2,
        
        /// <summary>
        /// </summary>
        PropertyBased,
        
        /// <summary>
        /// </summary>
        SystemB,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TFeaturesFeature", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TFeaturesFeature : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HawkConfigurationData_TFeaturesFeatureName _name;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public HawkConfigurationData_TFeaturesFeatureName Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (!_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _value;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (!_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TFeaturesFeatureName", Namespace="http://knx.org/xml/project/11")]
    public enum HawkConfigurationData_TFeaturesFeatureName
    {
        
        /// <summary>
        /// </summary>
        ParameterByteOrder,
        
        /// <summary>
        /// </summary>
        FirstAppObjectIdx,
        
        /// <summary>
        /// </summary>
        MaxIndividualAddress,
        
        /// <summary>
        /// </summary>
        MaxGroupAddress,
        
        /// <summary>
        /// </summary>
        PollingGroupSupport,
        
        /// <summary>
        /// </summary>
        AuthorizeLevels,
        
        /// <summary>
        /// </summary>
        RestartTime,
        
        /// <summary>
        /// </summary>
        UnloadedIndividualAddress,
        
        /// <summary>
        /// </summary>
        AssociationTableFlavour,
        
        /// <summary>
        /// </summary>
        VerifyMode,
        
        /// <summary>
        /// </summary>
        MgmtConnTypes,
        
        /// <summary>
        /// </summary>
        PropertyMappedLsms,
        
        /// <summary>
        /// </summary>
        AllocExtraByte,
        
        /// <summary>
        /// </summary>
        MaskdataVersion,
        
        /// <summary>
        /// </summary>
        DownloadStamp,
        
        /// <summary>
        /// </summary>
        GroupObjectTableFlavour,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TResourcesResource", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TResourcesResource : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceLocation_T _location;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Location", Namespace="http://knx.org/xml/project/11")]
        public ResourceLocation_T Location
        {
            get
            {
                return _location;
            }
            set
            {
                if (_location == value)
                    return;
                if (_location == null || value == null || !_location.Equals(value))
                {
                    _location = value;
                    OnPropertyChanged(nameof(Location));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceLocation_T _imgLocation;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ImgLocation", Namespace="http://knx.org/xml/project/11")]
        public ResourceLocation_T ImgLocation
        {
            get
            {
                return _imgLocation;
            }
            set
            {
                if (_imgLocation == value)
                    return;
                if (_imgLocation == null || value == null || !_imgLocation.Equals(value))
                {
                    _imgLocation = value;
                    OnPropertyChanged(nameof(ImgLocation));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HawkConfigurationData_TResourcesResourceResourceType _resourceType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ResourceType", Namespace="http://knx.org/xml/project/11")]
        public HawkConfigurationData_TResourcesResourceResourceType ResourceType
        {
            get
            {
                return _resourceType;
            }
            set
            {
                if (_resourceType == value)
                    return;
                if (_resourceType == null || value == null || !_resourceType.Equals(value))
                {
                    _resourceType = value;
                    OnPropertyChanged(nameof(ResourceType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HawkConfigurationData_TResourcesResourceAccessRights _accessRights;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AccessRights", Namespace="http://knx.org/xml/project/11")]
        public HawkConfigurationData_TResourcesResourceAccessRights AccessRights
        {
            get
            {
                return _accessRights;
            }
            set
            {
                if (_accessRights == value)
                    return;
                if (_accessRights == null || value == null || !_accessRights.Equals(value))
                {
                    _accessRights = value;
                    OnPropertyChanged(nameof(AccessRights));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceName_T _name;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceName_T Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (!_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _access;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> Access
        {
            get
            {
                return _access;
            }
            private set
            {
                if (_access == value)
                    return;
                if (_access == null || value == null || !_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HawkConfigurationData_TResourcesResource" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HawkConfigurationData_TResourcesResource" /> class.</para>
        /// </summary>
        public HawkConfigurationData_TResourcesResource()
        {
            this._access = new System.Collections.ObjectModel.ObservableCollection<string>();
            this._mgmtStyle = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _mgmtStyle;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MgmtStyle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> MgmtStyle
        {
            get
            {
                return _mgmtStyle;
            }
            private set
            {
                if (_mgmtStyle == value)
                    return;
                if (_mgmtStyle == null || value == null || !_mgmtStyle.Equals(value))
                {
                    _mgmtStyle = value;
                    OnPropertyChanged(nameof(MgmtStyle));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MgmtStyle-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MgmtStyle collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MgmtStyleSpecified
        {
            get
            {
                return (this.MgmtStyle.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceLocation_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResourceLocation_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceAddrSpace_T _addressSpace;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("AddressSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceAddrSpace_T AddressSpace
        {
            get
            {
                return _addressSpace;
            }
            set
            {
                if (!_addressSpace.Equals(value))
                {
                    _addressSpace = value;
                    OnPropertyChanged(nameof(AddressSpace));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _interfaceObjectRef;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("InterfaceObjectRef", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort InterfaceObjectRefValue
        {
            get
            {
                return _interfaceObjectRef;
            }
            set
            {
                if (!_interfaceObjectRef.Equals(value))
                {
                    _interfaceObjectRef = value;
                    OnPropertyChanged(nameof(InterfaceObjectRefValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InterfaceObjectRef-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterfaceObjectRef property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InterfaceObjectRefValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> InterfaceObjectRef
        {
            get
            {
                if (this.InterfaceObjectRefValueSpecified)
                {
                    return this.InterfaceObjectRefValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.InterfaceObjectRefValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.InterfaceObjectRefValue = value.GetValueOrDefault();
                    this.InterfaceObjectRefValueSpecified = value.HasValue;
                    OnPropertyChanged("InterfaceObjectRef");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _propertyID;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort PropertyIDValue
        {
            get
            {
                return _propertyID;
            }
            set
            {
                if (!_propertyID.Equals(value))
                {
                    _propertyID = value;
                    OnPropertyChanged(nameof(PropertyIDValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PropertyID-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PropertyID property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PropertyIDValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> PropertyID
        {
            get
            {
                if (this.PropertyIDValueSpecified)
                {
                    return this.PropertyIDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.PropertyIDValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.PropertyIDValue = value.GetValueOrDefault();
                    this.PropertyIDValueSpecified = value.HasValue;
                    OnPropertyChanged("PropertyID");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _startAddress;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("StartAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint StartAddressValue
        {
            get
            {
                return _startAddress;
            }
            set
            {
                if (!_startAddress.Equals(value))
                {
                    _startAddress = value;
                    OnPropertyChanged(nameof(StartAddressValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StartAddress-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartAddress property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool StartAddressValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> StartAddress
        {
            get
            {
                if (this.StartAddressValueSpecified)
                {
                    return this.StartAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.StartAddressValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.StartAddressValue = value.GetValueOrDefault();
                    this.StartAddressValueSpecified = value.HasValue;
                    OnPropertyChanged("StartAddress");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceName_T _ptrResource;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("PtrResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceName_T PtrResourceValue
        {
            get
            {
                return _ptrResource;
            }
            set
            {
                if (!_ptrResource.Equals(value))
                {
                    _ptrResource = value;
                    OnPropertyChanged(nameof(PtrResourceValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PtrResource-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtrResource property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PtrResourceValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ResourceName_T> PtrResource
        {
            get
            {
                if (this.PtrResourceValueSpecified)
                {
                    return this.PtrResourceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.PtrResourceValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.PtrResourceValue = value.GetValueOrDefault();
                    this.PtrResourceValueSpecified = value.HasValue;
                    OnPropertyChanged("PtrResource");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TResourcesResourceResourceType", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TResourcesResourceResourceType : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _length;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Length", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Length
        {
            get
            {
                return _length;
            }
            set
            {
                if (!_length.Equals(value))
                {
                    _length = value;
                    OnPropertyChanged(nameof(Length));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HawkConfigurationData_TResourcesResourceResourceTypeFlavour _flavour;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Flavour", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public HawkConfigurationData_TResourcesResourceResourceTypeFlavour FlavourValue
        {
            get
            {
                return _flavour;
            }
            set
            {
                if (!_flavour.Equals(value))
                {
                    _flavour = value;
                    OnPropertyChanged(nameof(FlavourValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Flavour-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Flavour property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlavourValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<HawkConfigurationData_TResourcesResourceResourceTypeFlavour> Flavour
        {
            get
            {
                if (this.FlavourValueSpecified)
                {
                    return this.FlavourValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.FlavourValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.FlavourValue = value.GetValueOrDefault();
                    this.FlavourValueSpecified = value.HasValue;
                    OnPropertyChanged("Flavour");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TResourcesResourceResourceTypeFlavour", Namespace="http://knx.org/xml/project/11")]
    public enum HawkConfigurationData_TResourcesResourceResourceTypeFlavour
    {
        
        /// <summary>
        /// </summary>
        ByteOrder_BigEndian,
        
        /// <summary>
        /// </summary>
        ByteOrder_LittleEndian,
        
        /// <summary>
        /// </summary>
        ManagementStyle_Bcu2,
        
        /// <summary>
        /// </summary>
        Ptr_StandardMemory,
        
        /// <summary>
        /// </summary>
        Ptr_StandardMemory100,
        
        /// <summary>
        /// </summary>
        AddressTable_Bcu1,
        
        /// <summary>
        /// </summary>
        AddressTable_Bcu1PL,
        
        /// <summary>
        /// </summary>
        AddressTable_SystemB,
        
        /// <summary>
        /// </summary>
        AssociationTable_Bcu1,
        
        /// <summary>
        /// </summary>
        AssociationTable_Bcu2,
        
        /// <summary>
        /// </summary>
        AssociationTable_M112,
        
        /// <summary>
        /// </summary>
        AssociationTable_SystemB,
        
        /// <summary>
        /// </summary>
        AssociationTable_SystemBSmall,
        
        /// <summary>
        /// </summary>
        AssociationTable_SystemBBig,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_Bcu10,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_Bcu11,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_Bcu1PL,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_Bcu2,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_M112,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_SystemB,
        
        /// <summary>
        /// </summary>
        GroupObjectTable_System300,
        
        /// <summary>
        /// </summary>
        LoadControl_Bcu2,
        
        /// <summary>
        /// </summary>
        LoadControl_M112,
        
        /// <summary>
        /// </summary>
        RunControl_Bcu2,
        
        /// <summary>
        /// </summary>
        RunControl_M112,
        
        /// <summary>
        /// </summary>
        RunControl_Bcu1,
        
        /// <summary>
        /// </summary>
        Voltage_Adc,
        
        /// <summary>
        /// </summary>
        PeiType_Prop,
        
        /// <summary>
        /// </summary>
        PeiType_Adc,
        
        /// <summary>
        /// </summary>
        ReConfig_Bcu1PL,
        
        /// <summary>
        /// </summary>
        FrequencyChannel_Bcu1PL,
        
        /// <summary>
        /// </summary>
        Sensitivity_Bcu1PL,
        
        /// <summary>
        /// </summary>
        Runerror_Bcu1,
        
        /// <summary>
        /// </summary>
        ProgrammingMode_Bcu1,
        
        /// <summary>
        /// </summary>
        ProgrammingMode_Prop,
        
        /// <summary>
        /// </summary>
        Lc_10,
        
        /// <summary>
        /// </summary>
        Lc_11,
        
        /// <summary>
        /// </summary>
        HardwareConfig_Identical,
        
        /// <summary>
        /// </summary>
        HardwareConfig_Version,
        
        /// <summary>
        /// </summary>
        Stamp_SystemB,
        
        /// <summary>
        /// </summary>
        Lc_12,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TResourcesResourceAccessRights", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TResourcesResourceAccessRights : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceAccessRights_T _read;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Read", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceAccessRights_T Read
        {
            get
            {
                return _read;
            }
            set
            {
                if (!_read.Equals(value))
                {
                    _read = value;
                    OnPropertyChanged(nameof(Read));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceAccessRights_T _write;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Write", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceAccessRights_T Write
        {
            get
            {
                return _write;
            }
            set
            {
                if (!_write.Equals(value))
                {
                    _write = value;
                    OnPropertyChanged(nameof(Write));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TProceduresProcedure", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TProceduresProcedure : LoadProcedure_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ProcedureType_T _procedureType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ProcedureType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ProcedureType_T ProcedureType
        {
            get
            {
                return _procedureType;
            }
            set
            {
                if (!_procedureType.Equals(value))
                {
                    _procedureType = value;
                    OnPropertyChanged(nameof(ProcedureType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _procedureSubType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ProcedureSubType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcedureSubType
        {
            get
            {
                return _procedureSubType;
            }
            set
            {
                if (_procedureSubType == value)
                    return;
                if (_procedureSubType == null || value == null || !_procedureSubType.Equals(value))
                {
                    _procedureSubType = value;
                    OnPropertyChanged(nameof(ProcedureSubType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _access;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> Access
        {
            get
            {
                return _access;
            }
            private set
            {
                if (_access == value)
                    return;
                if (_access == null || value == null || !_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HawkConfigurationData_TProceduresProcedure" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HawkConfigurationData_TProceduresProcedure" /> class.</para>
        /// </summary>
        public HawkConfigurationData_TProceduresProcedure()
        {
            this._access = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HawkConfigurationData_TProceduresProcedure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoadProcedures_TLoadProcedure))]
    public partial class LoadProcedure_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlUnload> _ldCtrlUnload;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlUnload", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlUnload> LdCtrlUnload
        {
            get
            {
                return _ldCtrlUnload;
            }
            private set
            {
                if (_ldCtrlUnload == value)
                    return;
                if (_ldCtrlUnload == null || value == null || !_ldCtrlUnload.SequenceEqual(value))
                {
                    _ldCtrlUnload = value;
                    OnPropertyChanged(nameof(LdCtrlUnload));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlUnload-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlUnload collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlUnloadSpecified
        {
            get
            {
                return (this.LdCtrlUnload.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LoadProcedure_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoadProcedure_T" /> class.</para>
        /// </summary>
        public LoadProcedure_T()
        {
            this._ldCtrlUnload = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlUnload>();
            this._ldCtrlLoad = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoad>();
            this._ldCtrlMaxLength = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMaxLength>();
            this._ldCtrlClearCachedObjectTypes = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearCachedObjectTypes>();
            this._ldCtrlLoadCompleted = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadCompleted>();
            this._ldCtrlAbsSegment = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlAbsSegment>();
            this._ldCtrlRelSegment = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRelSegment>();
            this._ldCtrlTaskSegment = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskSegment>();
            this._ldCtrlTaskPtr = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskPtr>();
            this._ldCtrlTaskCtrl1 = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl1>();
            this._ldCtrlTaskCtrl2 = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl2>();
            this._ldCtrlWriteProp = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteProp>();
            this._ldCtrlCompareProp = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareProp>();
            this._ldCtrlLoadImageProp = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageProp>();
            this._ldCtrlInvokeFunctionProp = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlInvokeFunctionProp>();
            this._ldCtrlReadFunctionProp = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlReadFunctionProp>();
            this._ldCtrlWriteMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteMem>();
            this._ldCtrlCompareMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareMem>();
            this._ldCtrlLoadImageMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageMem>();
            this._ldCtrlWriteRelMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteRelMem>();
            this._ldCtrlCompareRelMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareRelMem>();
            this._ldCtrlLoadImageRelMem = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageRelMem>();
            this._ldCtrlConnect = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlConnect>();
            this._ldCtrlDisconnect = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDisconnect>();
            this._ldCtrlRestart = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRestart>();
            this._ldCtrlDelay = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDelay>();
            this._ldCtrlSetControlVariable = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlSetControlVariable>();
            this._ldCtrlMapError = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMapError>();
            this._ldCtrlProgressText = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlProgressText>();
            this._ldCtrlDeclarePropDesc = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDeclarePropDesc>();
            this._ldCtrlClearLCFilterTable = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearLCFilterTable>();
            this._ldCtrlMerge = new System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMerge>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoad> _ldCtrlLoad;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlLoad", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoad> LdCtrlLoad
        {
            get
            {
                return _ldCtrlLoad;
            }
            private set
            {
                if (_ldCtrlLoad == value)
                    return;
                if (_ldCtrlLoad == null || value == null || !_ldCtrlLoad.SequenceEqual(value))
                {
                    _ldCtrlLoad = value;
                    OnPropertyChanged(nameof(LdCtrlLoad));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlLoad-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlLoad collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlLoadSpecified
        {
            get
            {
                return (this.LdCtrlLoad.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMaxLength> _ldCtrlMaxLength;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlMaxLength", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMaxLength> LdCtrlMaxLength
        {
            get
            {
                return _ldCtrlMaxLength;
            }
            private set
            {
                if (_ldCtrlMaxLength == value)
                    return;
                if (_ldCtrlMaxLength == null || value == null || !_ldCtrlMaxLength.SequenceEqual(value))
                {
                    _ldCtrlMaxLength = value;
                    OnPropertyChanged(nameof(LdCtrlMaxLength));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlMaxLength-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlMaxLength collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlMaxLengthSpecified
        {
            get
            {
                return (this.LdCtrlMaxLength.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearCachedObjectTypes> _ldCtrlClearCachedObjectTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlClearCachedObjectTypes", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearCachedObjectTypes> LdCtrlClearCachedObjectTypes
        {
            get
            {
                return _ldCtrlClearCachedObjectTypes;
            }
            private set
            {
                if (_ldCtrlClearCachedObjectTypes == value)
                    return;
                if (_ldCtrlClearCachedObjectTypes == null || value == null || !_ldCtrlClearCachedObjectTypes.SequenceEqual(value))
                {
                    _ldCtrlClearCachedObjectTypes = value;
                    OnPropertyChanged(nameof(LdCtrlClearCachedObjectTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlClearCachedObjectTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlClearCachedObjectTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlClearCachedObjectTypesSpecified
        {
            get
            {
                return (this.LdCtrlClearCachedObjectTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadCompleted> _ldCtrlLoadCompleted;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlLoadCompleted", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadCompleted> LdCtrlLoadCompleted
        {
            get
            {
                return _ldCtrlLoadCompleted;
            }
            private set
            {
                if (_ldCtrlLoadCompleted == value)
                    return;
                if (_ldCtrlLoadCompleted == null || value == null || !_ldCtrlLoadCompleted.SequenceEqual(value))
                {
                    _ldCtrlLoadCompleted = value;
                    OnPropertyChanged(nameof(LdCtrlLoadCompleted));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlLoadCompleted-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlLoadCompleted collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlLoadCompletedSpecified
        {
            get
            {
                return (this.LdCtrlLoadCompleted.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlAbsSegment> _ldCtrlAbsSegment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlAbsSegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlAbsSegment> LdCtrlAbsSegment
        {
            get
            {
                return _ldCtrlAbsSegment;
            }
            private set
            {
                if (_ldCtrlAbsSegment == value)
                    return;
                if (_ldCtrlAbsSegment == null || value == null || !_ldCtrlAbsSegment.SequenceEqual(value))
                {
                    _ldCtrlAbsSegment = value;
                    OnPropertyChanged(nameof(LdCtrlAbsSegment));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlAbsSegment-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlAbsSegment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlAbsSegmentSpecified
        {
            get
            {
                return (this.LdCtrlAbsSegment.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRelSegment> _ldCtrlRelSegment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlRelSegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRelSegment> LdCtrlRelSegment
        {
            get
            {
                return _ldCtrlRelSegment;
            }
            private set
            {
                if (_ldCtrlRelSegment == value)
                    return;
                if (_ldCtrlRelSegment == null || value == null || !_ldCtrlRelSegment.SequenceEqual(value))
                {
                    _ldCtrlRelSegment = value;
                    OnPropertyChanged(nameof(LdCtrlRelSegment));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlRelSegment-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlRelSegment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlRelSegmentSpecified
        {
            get
            {
                return (this.LdCtrlRelSegment.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskSegment> _ldCtrlTaskSegment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlTaskSegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskSegment> LdCtrlTaskSegment
        {
            get
            {
                return _ldCtrlTaskSegment;
            }
            private set
            {
                if (_ldCtrlTaskSegment == value)
                    return;
                if (_ldCtrlTaskSegment == null || value == null || !_ldCtrlTaskSegment.SequenceEqual(value))
                {
                    _ldCtrlTaskSegment = value;
                    OnPropertyChanged(nameof(LdCtrlTaskSegment));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlTaskSegment-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlTaskSegment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlTaskSegmentSpecified
        {
            get
            {
                return (this.LdCtrlTaskSegment.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskPtr> _ldCtrlTaskPtr;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlTaskPtr", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskPtr> LdCtrlTaskPtr
        {
            get
            {
                return _ldCtrlTaskPtr;
            }
            private set
            {
                if (_ldCtrlTaskPtr == value)
                    return;
                if (_ldCtrlTaskPtr == null || value == null || !_ldCtrlTaskPtr.SequenceEqual(value))
                {
                    _ldCtrlTaskPtr = value;
                    OnPropertyChanged(nameof(LdCtrlTaskPtr));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlTaskPtr-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlTaskPtr collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlTaskPtrSpecified
        {
            get
            {
                return (this.LdCtrlTaskPtr.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl1> _ldCtrlTaskCtrl1;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlTaskCtrl1", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl1> LdCtrlTaskCtrl1
        {
            get
            {
                return _ldCtrlTaskCtrl1;
            }
            private set
            {
                if (_ldCtrlTaskCtrl1 == value)
                    return;
                if (_ldCtrlTaskCtrl1 == null || value == null || !_ldCtrlTaskCtrl1.SequenceEqual(value))
                {
                    _ldCtrlTaskCtrl1 = value;
                    OnPropertyChanged(nameof(LdCtrlTaskCtrl1));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlTaskCtrl1-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlTaskCtrl1 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlTaskCtrl1Specified
        {
            get
            {
                return (this.LdCtrlTaskCtrl1.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl2> _ldCtrlTaskCtrl2;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlTaskCtrl2", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlTaskCtrl2> LdCtrlTaskCtrl2
        {
            get
            {
                return _ldCtrlTaskCtrl2;
            }
            private set
            {
                if (_ldCtrlTaskCtrl2 == value)
                    return;
                if (_ldCtrlTaskCtrl2 == null || value == null || !_ldCtrlTaskCtrl2.SequenceEqual(value))
                {
                    _ldCtrlTaskCtrl2 = value;
                    OnPropertyChanged(nameof(LdCtrlTaskCtrl2));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlTaskCtrl2-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlTaskCtrl2 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlTaskCtrl2Specified
        {
            get
            {
                return (this.LdCtrlTaskCtrl2.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteProp> _ldCtrlWriteProp;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlWriteProp", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteProp> LdCtrlWriteProp
        {
            get
            {
                return _ldCtrlWriteProp;
            }
            private set
            {
                if (_ldCtrlWriteProp == value)
                    return;
                if (_ldCtrlWriteProp == null || value == null || !_ldCtrlWriteProp.SequenceEqual(value))
                {
                    _ldCtrlWriteProp = value;
                    OnPropertyChanged(nameof(LdCtrlWriteProp));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlWriteProp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlWriteProp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlWritePropSpecified
        {
            get
            {
                return (this.LdCtrlWriteProp.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareProp> _ldCtrlCompareProp;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlCompareProp", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareProp> LdCtrlCompareProp
        {
            get
            {
                return _ldCtrlCompareProp;
            }
            private set
            {
                if (_ldCtrlCompareProp == value)
                    return;
                if (_ldCtrlCompareProp == null || value == null || !_ldCtrlCompareProp.SequenceEqual(value))
                {
                    _ldCtrlCompareProp = value;
                    OnPropertyChanged(nameof(LdCtrlCompareProp));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlCompareProp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlCompareProp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlComparePropSpecified
        {
            get
            {
                return (this.LdCtrlCompareProp.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageProp> _ldCtrlLoadImageProp;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlLoadImageProp", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageProp> LdCtrlLoadImageProp
        {
            get
            {
                return _ldCtrlLoadImageProp;
            }
            private set
            {
                if (_ldCtrlLoadImageProp == value)
                    return;
                if (_ldCtrlLoadImageProp == null || value == null || !_ldCtrlLoadImageProp.SequenceEqual(value))
                {
                    _ldCtrlLoadImageProp = value;
                    OnPropertyChanged(nameof(LdCtrlLoadImageProp));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlLoadImageProp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlLoadImageProp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlLoadImagePropSpecified
        {
            get
            {
                return (this.LdCtrlLoadImageProp.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlInvokeFunctionProp> _ldCtrlInvokeFunctionProp;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlInvokeFunctionProp", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlInvokeFunctionProp> LdCtrlInvokeFunctionProp
        {
            get
            {
                return _ldCtrlInvokeFunctionProp;
            }
            private set
            {
                if (_ldCtrlInvokeFunctionProp == value)
                    return;
                if (_ldCtrlInvokeFunctionProp == null || value == null || !_ldCtrlInvokeFunctionProp.SequenceEqual(value))
                {
                    _ldCtrlInvokeFunctionProp = value;
                    OnPropertyChanged(nameof(LdCtrlInvokeFunctionProp));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlInvokeFunctionProp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlInvokeFunctionProp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlInvokeFunctionPropSpecified
        {
            get
            {
                return (this.LdCtrlInvokeFunctionProp.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlReadFunctionProp> _ldCtrlReadFunctionProp;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlReadFunctionProp", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlReadFunctionProp> LdCtrlReadFunctionProp
        {
            get
            {
                return _ldCtrlReadFunctionProp;
            }
            private set
            {
                if (_ldCtrlReadFunctionProp == value)
                    return;
                if (_ldCtrlReadFunctionProp == null || value == null || !_ldCtrlReadFunctionProp.SequenceEqual(value))
                {
                    _ldCtrlReadFunctionProp = value;
                    OnPropertyChanged(nameof(LdCtrlReadFunctionProp));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlReadFunctionProp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlReadFunctionProp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlReadFunctionPropSpecified
        {
            get
            {
                return (this.LdCtrlReadFunctionProp.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteMem> _ldCtrlWriteMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlWriteMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteMem> LdCtrlWriteMem
        {
            get
            {
                return _ldCtrlWriteMem;
            }
            private set
            {
                if (_ldCtrlWriteMem == value)
                    return;
                if (_ldCtrlWriteMem == null || value == null || !_ldCtrlWriteMem.SequenceEqual(value))
                {
                    _ldCtrlWriteMem = value;
                    OnPropertyChanged(nameof(LdCtrlWriteMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlWriteMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlWriteMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlWriteMemSpecified
        {
            get
            {
                return (this.LdCtrlWriteMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareMem> _ldCtrlCompareMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlCompareMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareMem> LdCtrlCompareMem
        {
            get
            {
                return _ldCtrlCompareMem;
            }
            private set
            {
                if (_ldCtrlCompareMem == value)
                    return;
                if (_ldCtrlCompareMem == null || value == null || !_ldCtrlCompareMem.SequenceEqual(value))
                {
                    _ldCtrlCompareMem = value;
                    OnPropertyChanged(nameof(LdCtrlCompareMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlCompareMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlCompareMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlCompareMemSpecified
        {
            get
            {
                return (this.LdCtrlCompareMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageMem> _ldCtrlLoadImageMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlLoadImageMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageMem> LdCtrlLoadImageMem
        {
            get
            {
                return _ldCtrlLoadImageMem;
            }
            private set
            {
                if (_ldCtrlLoadImageMem == value)
                    return;
                if (_ldCtrlLoadImageMem == null || value == null || !_ldCtrlLoadImageMem.SequenceEqual(value))
                {
                    _ldCtrlLoadImageMem = value;
                    OnPropertyChanged(nameof(LdCtrlLoadImageMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlLoadImageMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlLoadImageMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlLoadImageMemSpecified
        {
            get
            {
                return (this.LdCtrlLoadImageMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteRelMem> _ldCtrlWriteRelMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlWriteRelMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlWriteRelMem> LdCtrlWriteRelMem
        {
            get
            {
                return _ldCtrlWriteRelMem;
            }
            private set
            {
                if (_ldCtrlWriteRelMem == value)
                    return;
                if (_ldCtrlWriteRelMem == null || value == null || !_ldCtrlWriteRelMem.SequenceEqual(value))
                {
                    _ldCtrlWriteRelMem = value;
                    OnPropertyChanged(nameof(LdCtrlWriteRelMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlWriteRelMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlWriteRelMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlWriteRelMemSpecified
        {
            get
            {
                return (this.LdCtrlWriteRelMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareRelMem> _ldCtrlCompareRelMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlCompareRelMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlCompareRelMem> LdCtrlCompareRelMem
        {
            get
            {
                return _ldCtrlCompareRelMem;
            }
            private set
            {
                if (_ldCtrlCompareRelMem == value)
                    return;
                if (_ldCtrlCompareRelMem == null || value == null || !_ldCtrlCompareRelMem.SequenceEqual(value))
                {
                    _ldCtrlCompareRelMem = value;
                    OnPropertyChanged(nameof(LdCtrlCompareRelMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlCompareRelMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlCompareRelMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlCompareRelMemSpecified
        {
            get
            {
                return (this.LdCtrlCompareRelMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageRelMem> _ldCtrlLoadImageRelMem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlLoadImageRelMem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlLoadImageRelMem> LdCtrlLoadImageRelMem
        {
            get
            {
                return _ldCtrlLoadImageRelMem;
            }
            private set
            {
                if (_ldCtrlLoadImageRelMem == value)
                    return;
                if (_ldCtrlLoadImageRelMem == null || value == null || !_ldCtrlLoadImageRelMem.SequenceEqual(value))
                {
                    _ldCtrlLoadImageRelMem = value;
                    OnPropertyChanged(nameof(LdCtrlLoadImageRelMem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlLoadImageRelMem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlLoadImageRelMem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlLoadImageRelMemSpecified
        {
            get
            {
                return (this.LdCtrlLoadImageRelMem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlConnect> _ldCtrlConnect;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlConnect", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlConnect> LdCtrlConnect
        {
            get
            {
                return _ldCtrlConnect;
            }
            private set
            {
                if (_ldCtrlConnect == value)
                    return;
                if (_ldCtrlConnect == null || value == null || !_ldCtrlConnect.SequenceEqual(value))
                {
                    _ldCtrlConnect = value;
                    OnPropertyChanged(nameof(LdCtrlConnect));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlConnect-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlConnect collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlConnectSpecified
        {
            get
            {
                return (this.LdCtrlConnect.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDisconnect> _ldCtrlDisconnect;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlDisconnect", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDisconnect> LdCtrlDisconnect
        {
            get
            {
                return _ldCtrlDisconnect;
            }
            private set
            {
                if (_ldCtrlDisconnect == value)
                    return;
                if (_ldCtrlDisconnect == null || value == null || !_ldCtrlDisconnect.SequenceEqual(value))
                {
                    _ldCtrlDisconnect = value;
                    OnPropertyChanged(nameof(LdCtrlDisconnect));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlDisconnect-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlDisconnect collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlDisconnectSpecified
        {
            get
            {
                return (this.LdCtrlDisconnect.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRestart> _ldCtrlRestart;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlRestart", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlRestart> LdCtrlRestart
        {
            get
            {
                return _ldCtrlRestart;
            }
            private set
            {
                if (_ldCtrlRestart == value)
                    return;
                if (_ldCtrlRestart == null || value == null || !_ldCtrlRestart.SequenceEqual(value))
                {
                    _ldCtrlRestart = value;
                    OnPropertyChanged(nameof(LdCtrlRestart));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlRestart-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlRestart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlRestartSpecified
        {
            get
            {
                return (this.LdCtrlRestart.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDelay> _ldCtrlDelay;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlDelay", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDelay> LdCtrlDelay
        {
            get
            {
                return _ldCtrlDelay;
            }
            private set
            {
                if (_ldCtrlDelay == value)
                    return;
                if (_ldCtrlDelay == null || value == null || !_ldCtrlDelay.SequenceEqual(value))
                {
                    _ldCtrlDelay = value;
                    OnPropertyChanged(nameof(LdCtrlDelay));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlDelay-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlDelay collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlDelaySpecified
        {
            get
            {
                return (this.LdCtrlDelay.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlSetControlVariable> _ldCtrlSetControlVariable;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlSetControlVariable", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlSetControlVariable> LdCtrlSetControlVariable
        {
            get
            {
                return _ldCtrlSetControlVariable;
            }
            private set
            {
                if (_ldCtrlSetControlVariable == value)
                    return;
                if (_ldCtrlSetControlVariable == null || value == null || !_ldCtrlSetControlVariable.SequenceEqual(value))
                {
                    _ldCtrlSetControlVariable = value;
                    OnPropertyChanged(nameof(LdCtrlSetControlVariable));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlSetControlVariable-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlSetControlVariable collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlSetControlVariableSpecified
        {
            get
            {
                return (this.LdCtrlSetControlVariable.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMapError> _ldCtrlMapError;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlMapError", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMapError> LdCtrlMapError
        {
            get
            {
                return _ldCtrlMapError;
            }
            private set
            {
                if (_ldCtrlMapError == value)
                    return;
                if (_ldCtrlMapError == null || value == null || !_ldCtrlMapError.SequenceEqual(value))
                {
                    _ldCtrlMapError = value;
                    OnPropertyChanged(nameof(LdCtrlMapError));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlMapError-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlMapError collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlMapErrorSpecified
        {
            get
            {
                return (this.LdCtrlMapError.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlProgressText> _ldCtrlProgressText;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlProgressText", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlProgressText> LdCtrlProgressText
        {
            get
            {
                return _ldCtrlProgressText;
            }
            private set
            {
                if (_ldCtrlProgressText == value)
                    return;
                if (_ldCtrlProgressText == null || value == null || !_ldCtrlProgressText.SequenceEqual(value))
                {
                    _ldCtrlProgressText = value;
                    OnPropertyChanged(nameof(LdCtrlProgressText));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlProgressText-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlProgressText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlProgressTextSpecified
        {
            get
            {
                return (this.LdCtrlProgressText.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDeclarePropDesc> _ldCtrlDeclarePropDesc;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlDeclarePropDesc", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlDeclarePropDesc> LdCtrlDeclarePropDesc
        {
            get
            {
                return _ldCtrlDeclarePropDesc;
            }
            private set
            {
                if (_ldCtrlDeclarePropDesc == value)
                    return;
                if (_ldCtrlDeclarePropDesc == null || value == null || !_ldCtrlDeclarePropDesc.SequenceEqual(value))
                {
                    _ldCtrlDeclarePropDesc = value;
                    OnPropertyChanged(nameof(LdCtrlDeclarePropDesc));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlDeclarePropDesc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlDeclarePropDesc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlDeclarePropDescSpecified
        {
            get
            {
                return (this.LdCtrlDeclarePropDesc.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearLCFilterTable> _ldCtrlClearLCFilterTable;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlClearLCFilterTable", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlClearLCFilterTable> LdCtrlClearLCFilterTable
        {
            get
            {
                return _ldCtrlClearLCFilterTable;
            }
            private set
            {
                if (_ldCtrlClearLCFilterTable == value)
                    return;
                if (_ldCtrlClearLCFilterTable == null || value == null || !_ldCtrlClearLCFilterTable.SequenceEqual(value))
                {
                    _ldCtrlClearLCFilterTable = value;
                    OnPropertyChanged(nameof(LdCtrlClearLCFilterTable));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlClearLCFilterTable-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlClearLCFilterTable collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlClearLCFilterTableSpecified
        {
            get
            {
                return (this.LdCtrlClearLCFilterTable.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMerge> _ldCtrlMerge;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LdCtrlMerge", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedure_TLdCtrlMerge> LdCtrlMerge
        {
            get
            {
                return _ldCtrlMerge;
            }
            private set
            {
                if (_ldCtrlMerge == value)
                    return;
                if (_ldCtrlMerge == null || value == null || !_ldCtrlMerge.SequenceEqual(value))
                {
                    _ldCtrlMerge = value;
                    OnPropertyChanged(nameof(LdCtrlMerge));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LdCtrlMerge-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LdCtrlMerge collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LdCtrlMergeSpecified
        {
            get
            {
                return (this.LdCtrlMerge.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlUnload", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlUnload : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlLoad", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlLoad : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlMaxLength", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlMaxLength : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlClearCachedObjectTypes", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlClearCachedObjectTypes : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlLoadCompleted", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlLoadCompleted : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlAbsSegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlAbsSegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _segType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("SegType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte SegType
        {
            get
            {
                return _segType;
            }
            set
            {
                if (!_segType.Equals(value))
                {
                    _segType = value;
                    OnPropertyChanged(nameof(SegType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _access;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Access
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _memType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MemType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte MemType
        {
            get
            {
                return _memType;
            }
            set
            {
                if (!_memType.Equals(value))
                {
                    _memType = value;
                    OnPropertyChanged(nameof(MemType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _segFlags;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("SegFlags", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte SegFlags
        {
            get
            {
                return _segFlags;
            }
            set
            {
                if (!_segFlags.Equals(value))
                {
                    _segFlags = value;
                    OnPropertyChanged(nameof(SegFlags));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlRelSegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlRelSegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _mode;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Mode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Mode
        {
            get
            {
                return _mode;
            }
            set
            {
                if (!_mode.Equals(value))
                {
                    _mode = value;
                    OnPropertyChanged(nameof(Mode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _fill;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Fill", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Fill
        {
            get
            {
                return _fill;
            }
            set
            {
                if (!_fill.Equals(value))
                {
                    _fill = value;
                    OnPropertyChanged(nameof(Fill));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlTaskSegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlTaskSegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlTaskPtr", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlTaskPtr : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _initPtr;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InitPtr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort InitPtr
        {
            get
            {
                return _initPtr;
            }
            set
            {
                if (!_initPtr.Equals(value))
                {
                    _initPtr = value;
                    OnPropertyChanged(nameof(InitPtr));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _savePtr;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("SavePtr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort SavePtr
        {
            get
            {
                return _savePtr;
            }
            set
            {
                if (!_savePtr.Equals(value))
                {
                    _savePtr = value;
                    OnPropertyChanged(nameof(SavePtr));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _serialPtr;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("SerialPtr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort SerialPtr
        {
            get
            {
                return _serialPtr;
            }
            set
            {
                if (!_serialPtr.Equals(value))
                {
                    _serialPtr = value;
                    OnPropertyChanged(nameof(SerialPtr));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlTaskCtrl1", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlTaskCtrl1 : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _count;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Count", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (!_count.Equals(value))
                {
                    _count = value;
                    OnPropertyChanged(nameof(Count));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlTaskCtrl2", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlTaskCtrl2 : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _lsmIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LsmIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LsmIdxValue
        {
            get
            {
                return _lsmIdx;
            }
            set
            {
                if (!_lsmIdx.Equals(value))
                {
                    _lsmIdx = value;
                    OnPropertyChanged(nameof(LsmIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LsmIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LsmIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LsmIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> LsmIdx
        {
            get
            {
                if (this.LsmIdxValueSpecified)
                {
                    return this.LsmIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LsmIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LsmIdxValue = value.GetValueOrDefault();
                    this.LsmIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("LsmIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _callback;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Callback", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Callback
        {
            get
            {
                return _callback;
            }
            set
            {
                if (!_callback.Equals(value))
                {
                    _callback = value;
                    OnPropertyChanged(nameof(Callback));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _seg0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Seg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Seg0
        {
            get
            {
                return _seg0;
            }
            set
            {
                if (!_seg0.Equals(value))
                {
                    _seg0 = value;
                    OnPropertyChanged(nameof(Seg0));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _seg1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Seg1", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Seg1
        {
            get
            {
                return _seg1;
            }
            set
            {
                if (!_seg1.Equals(value))
                {
                    _seg1 = value;
                    OnPropertyChanged(nameof(Seg1));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlWriteProp", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlWriteProp : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _startElement = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("StartElement", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort StartElement
        {
            get
            {
                return _startElement;
            }
            set
            {
                if (!_startElement.Equals(value))
                {
                    _startElement = value;
                    OnPropertyChanged(nameof(StartElement));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _count = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("Count", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (!_count.Equals(value))
                {
                    _count = value;
                    OnPropertyChanged(nameof(Count));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _verify;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Verify", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Verify
        {
            get
            {
                return _verify;
            }
            set
            {
                if (!_verify.Equals(value))
                {
                    _verify = value;
                    OnPropertyChanged(nameof(Verify));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlCompareProp", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlCompareProp : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _startElement = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("StartElement", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort StartElement
        {
            get
            {
                return _startElement;
            }
            set
            {
                if (!_startElement.Equals(value))
                {
                    _startElement = value;
                    OnPropertyChanged(nameof(StartElement));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _count = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("Count", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (!_count.Equals(value))
                {
                    _count = value;
                    OnPropertyChanged(nameof(Count));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlLoadImageProp", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlLoadImageProp : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _count = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("Count", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (!_count.Equals(value))
                {
                    _count = value;
                    OnPropertyChanged(nameof(Count));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _startElement = 1;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "4095")]
        [System.Xml.Serialization.XmlAttributeAttribute("StartElement", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort StartElement
        {
            get
            {
                return _startElement;
            }
            set
            {
                if (!_startElement.Equals(value))
                {
                    _startElement = value;
                    OnPropertyChanged(nameof(StartElement));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlInvokeFunctionProp", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlInvokeFunctionProp : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlReadFunctionProp", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlReadFunctionProp : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlWriteMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlWriteMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlMemAddrSpace_T _addressSpace = LdCtrlMemAddrSpace_T.Standard;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlMemAddrSpace_T.Standard)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AddressSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlMemAddrSpace_T AddressSpace
        {
            get
            {
                return _addressSpace;
            }
            set
            {
                if (!_addressSpace.Equals(value))
                {
                    _addressSpace = value;
                    OnPropertyChanged(nameof(AddressSpace));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _verify;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Verify", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Verify
        {
            get
            {
                return _verify;
            }
            set
            {
                if (!_verify.Equals(value))
                {
                    _verify = value;
                    OnPropertyChanged(nameof(Verify));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlCompareMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlCompareMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlMemAddrSpace_T _addressSpace = LdCtrlMemAddrSpace_T.Standard;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlMemAddrSpace_T.Standard)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AddressSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlMemAddrSpace_T AddressSpace
        {
            get
            {
                return _addressSpace;
            }
            set
            {
                if (!_addressSpace.Equals(value))
                {
                    _addressSpace = value;
                    OnPropertyChanged(nameof(AddressSpace));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlLoadImageMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlLoadImageMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlMemAddrSpace_T _addressSpace = LdCtrlMemAddrSpace_T.Standard;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlMemAddrSpace_T.Standard)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AddressSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlMemAddrSpace_T AddressSpace
        {
            get
            {
                return _addressSpace;
            }
            set
            {
                if (!_addressSpace.Equals(value))
                {
                    _addressSpace = value;
                    OnPropertyChanged(nameof(AddressSpace));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlWriteRelMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlWriteRelMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdx
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdx));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _verify;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Verify", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Verify
        {
            get
            {
                return _verify;
            }
            set
            {
                if (!_verify.Equals(value))
                {
                    _verify = value;
                    OnPropertyChanged(nameof(Verify));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlCompareRelMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlCompareRelMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdx
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdx));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _inlineData;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("InlineData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="hexBinary")]
        public byte[] InlineData
        {
            get
            {
                return _inlineData;
            }
            set
            {
                if (_inlineData == value)
                    return;
                if (_inlineData == null || value == null || !_inlineData.SequenceEqual(value))
                {
                    _inlineData = value;
                    OnPropertyChanged(nameof(InlineData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlLoadImageRelMem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlLoadImageRelMem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdx
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdx));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlConnect", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlConnect : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlDisconnect", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlDisconnect : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlRestart", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlRestart : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlDelay", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlDelay : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _milliSeconds;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MilliSeconds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort MilliSeconds
        {
            get
            {
                return _milliSeconds;
            }
            set
            {
                if (!_milliSeconds.Equals(value))
                {
                    _milliSeconds = value;
                    OnPropertyChanged(nameof(MilliSeconds));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlSetControlVariable", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlSetControlVariable : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlControlVariable_T _name;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlControlVariable_T Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (!_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (!_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlMapError", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlMapError : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _ldCtrlFilter = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LdCtrlFilter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LdCtrlFilter
        {
            get
            {
                return _ldCtrlFilter;
            }
            set
            {
                if (!_ldCtrlFilter.Equals(value))
                {
                    _ldCtrlFilter = value;
                    OnPropertyChanged(nameof(LdCtrlFilter));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _originalError;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("OriginalError", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint OriginalError
        {
            get
            {
                return _originalError;
            }
            set
            {
                if (!_originalError.Equals(value))
                {
                    _originalError = value;
                    OnPropertyChanged(nameof(OriginalError));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _mappedError;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MappedError", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint MappedError
        {
            get
            {
                return _mappedError;
            }
            set
            {
                if (!_mappedError.Equals(value))
                {
                    _mappedError = value;
                    OnPropertyChanged(nameof(MappedError));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlProgressText", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlProgressText : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _textId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("TextId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint TextId
        {
            get
            {
                return _textId;
            }
            set
            {
                if (!_textId.Equals(value))
                {
                    _textId = value;
                    OnPropertyChanged(nameof(TextId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlDeclarePropDesc", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlDeclarePropDesc : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objIdx;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjIdx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjIdxValue
        {
            get
            {
                return _objIdx;
            }
            set
            {
                if (!_objIdx.Equals(value))
                {
                    _objIdx = value;
                    OnPropertyChanged(nameof(ObjIdxValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjIdx-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjIdx property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjIdxValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjIdx
        {
            get
            {
                if (this.ObjIdxValueSpecified)
                {
                    return this.ObjIdxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjIdxValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjIdxValue = value.GetValueOrDefault();
                    this.ObjIdxValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjIdx");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjTypeValue
        {
            get
            {
                return _objType;
            }
            set
            {
                if (!_objType.Equals(value))
                {
                    _objType = value;
                    OnPropertyChanged(nameof(ObjTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjType
        {
            get
            {
                if (this.ObjTypeValueSpecified)
                {
                    return this.ObjTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjTypeValue = value.GetValueOrDefault();
                    this.ObjTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropId
        {
            get
            {
                return _propId;
            }
            set
            {
                if (!_propId.Equals(value))
                {
                    _propId = value;
                    OnPropertyChanged(nameof(PropId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PropType_T _propType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PropType_T PropType
        {
            get
            {
                return _propType;
            }
            set
            {
                if (!_propType.Equals(value))
                {
                    _propType = value;
                    OnPropertyChanged(nameof(PropType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _maxElements;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MaxElements", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort MaxElements
        {
            get
            {
                return _maxElements;
            }
            set
            {
                if (!_maxElements.Equals(value))
                {
                    _maxElements = value;
                    OnPropertyChanged(nameof(MaxElements));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _readAccess;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "15")]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadAccess", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ReadAccess
        {
            get
            {
                return _readAccess;
            }
            set
            {
                if (!_readAccess.Equals(value))
                {
                    _readAccess = value;
                    OnPropertyChanged(nameof(ReadAccess));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _writeAccess;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "15")]
        [System.Xml.Serialization.XmlAttributeAttribute("WriteAccess", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte WriteAccess
        {
            get
            {
                return _writeAccess;
            }
            set
            {
                if (!_writeAccess.Equals(value))
                {
                    _writeAccess = value;
                    OnPropertyChanged(nameof(WriteAccess));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _writable;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Writable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Writable
        {
            get
            {
                return _writable;
            }
            set
            {
                if (!_writable.Equals(value))
                {
                    _writable = value;
                    OnPropertyChanged(nameof(Writable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlClearLCFilterTable", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlClearLCFilterTable : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LdCtrlProcType_T _appliesTo = LdCtrlProcType_T.Auto;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(LdCtrlProcType_T.Auto)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AppliesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LdCtrlProcType_T AppliesTo
        {
            get
            {
                return _appliesTo;
            }
            set
            {
                if (!_appliesTo.Equals(value))
                {
                    _appliesTo = value;
                    OnPropertyChanged(nameof(AppliesTo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _useFunctionProp = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("UseFunctionProp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool UseFunctionProp
        {
            get
            {
                return _useFunctionProp;
            }
            set
            {
                if (!_useFunctionProp.Equals(value))
                {
                    _useFunctionProp = value;
                    OnPropertyChanged(nameof(UseFunctionProp));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedure_TLdCtrlMerge", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedure_TLdCtrlMerge : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _mergeId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MergeId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte MergeId
        {
            get
            {
                return _mergeId;
            }
            set
            {
                if (!_mergeId.Equals(value))
                {
                    _mergeId = value;
                    OnPropertyChanged(nameof(MergeId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TMemorySegmentsMemorySegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TMemorySegmentsMemorySegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceLocation_T _location;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Location", Namespace="http://knx.org/xml/project/11")]
        public ResourceLocation_T Location
        {
            get
            {
                return _location;
            }
            set
            {
                if (_location == value)
                    return;
                if (_location == null || value == null || !_location.Equals(value))
                {
                    _location = value;
                    OnPropertyChanged(nameof(Location));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HawkConfigurationData_TMemorySegmentsMemorySegmentAccessRights _accessRights;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AccessRights", Namespace="http://knx.org/xml/project/11")]
        public HawkConfigurationData_TMemorySegmentsMemorySegmentAccessRights AccessRights
        {
            get
            {
                return _accessRights;
            }
            set
            {
                if (_accessRights == value)
                    return;
                if (_accessRights == null || value == null || !_accessRights.Equals(value))
                {
                    _accessRights = value;
                    OnPropertyChanged(nameof(AccessRights));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _length;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Length", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Length
        {
            get
            {
                return _length;
            }
            set
            {
                if (!_length.Equals(value))
                {
                    _length = value;
                    OnPropertyChanged(nameof(Length));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _optional = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Optional", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Optional
        {
            get
            {
                return _optional;
            }
            set
            {
                if (!_optional.Equals(value))
                {
                    _optional = value;
                    OnPropertyChanged(nameof(Optional));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MemoryType_T _memoryType;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("MemoryType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MemoryType_T MemoryTypeValue
        {
            get
            {
                return _memoryType;
            }
            set
            {
                if (!_memoryType.Equals(value))
                {
                    _memoryType = value;
                    OnPropertyChanged(nameof(MemoryTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemoryType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemoryType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MemoryTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<MemoryType_T> MemoryType
        {
            get
            {
                if (this.MemoryTypeValueSpecified)
                {
                    return this.MemoryTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.MemoryTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.MemoryTypeValue = value.GetValueOrDefault();
                    this.MemoryTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("MemoryType");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TMemorySegmentsMemorySegmentAccessRights", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TMemorySegmentsMemorySegmentAccessRights : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceAccessRights_T _read;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Read", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceAccessRights_T Read
        {
            get
            {
                return _read;
            }
            set
            {
                if (!_read.Equals(value))
                {
                    _read = value;
                    OnPropertyChanged(nameof(Read));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ResourceAccessRights_T _write;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Write", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResourceAccessRights_T Write
        {
            get
            {
                return _write;
            }
            set
            {
                if (!_write.Equals(value))
                {
                    _write = value;
                    OnPropertyChanged(nameof(Write));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TInterfaceObjectsInterfaceObject", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TInterfaceObjectsInterfaceObject : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObjectProperty> _property;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Property", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObjectProperty> Property
        {
            get
            {
                return _property;
            }
            private set
            {
                if (_property == value)
                    return;
                if (_property == null || value == null || !_property.SequenceEqual(value))
                {
                    _property = value;
                    OnPropertyChanged(nameof(Property));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Property-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Property collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PropertySpecified
        {
            get
            {
                return (this.Property.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HawkConfigurationData_TInterfaceObjectsInterfaceObject" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HawkConfigurationData_TInterfaceObjectsInterfaceObject" /> class.</para>
        /// </summary>
        public HawkConfigurationData_TInterfaceObjectsInterfaceObject()
        {
            this._property = new System.Collections.ObjectModel.ObservableCollection<HawkConfigurationData_TInterfaceObjectsInterfaceObjectProperty>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _index;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Index", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte IndexValue
        {
            get
            {
                return _index;
            }
            set
            {
                if (!_index.Equals(value))
                {
                    _index = value;
                    OnPropertyChanged(nameof(IndexValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Index-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Index property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IndexValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> Index
        {
            get
            {
                if (this.IndexValueSpecified)
                {
                    return this.IndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.IndexValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.IndexValue = value.GetValueOrDefault();
                    this.IndexValueSpecified = value.HasValue;
                    OnPropertyChanged("Index");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objectType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjectType
        {
            get
            {
                return _objectType;
            }
            set
            {
                if (!_objectType.Equals(value))
                {
                    _objectType = value;
                    OnPropertyChanged(nameof(ObjectType));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HawkConfigurationData_TInterfaceObjectsInterfaceObjectProperty", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HawkConfigurationData_TInterfaceObjectsInterfaceObjectProperty : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _propertyID;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort PropertyID
        {
            get
            {
                return _propertyID;
            }
            set
            {
                if (!_propertyID.Equals(value))
                {
                    _propertyID = value;
                    OnPropertyChanged(nameof(PropertyID));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PropType_T _propertyDataType;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyDataType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PropType_T PropertyDataTypeValue
        {
            get
            {
                return _propertyDataType;
            }
            set
            {
                if (!_propertyDataType.Equals(value))
                {
                    _propertyDataType = value;
                    OnPropertyChanged(nameof(PropertyDataTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PropertyDataType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PropertyDataType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PropertyDataTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<PropType_T> PropertyDataType
        {
            get
            {
                if (this.PropertyDataTypeValueSpecified)
                {
                    return this.PropertyDataTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.PropertyDataTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.PropertyDataTypeValue = value.GetValueOrDefault();
                    this.PropertyDataTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("PropertyDataType");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TManufacturersManufacturer", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TManufacturersManufacturer : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _orderNumberFormattingScript;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OrderNumberFormattingScript", Namespace="http://knx.org/xml/project/11")]
        public string OrderNumberFormattingScript
        {
            get
            {
                return _orderNumberFormattingScript;
            }
            set
            {
                if (_orderNumberFormattingScript == value)
                    return;
                if (_orderNumberFormattingScript == null || value == null || !_orderNumberFormattingScript.Equals(value))
                {
                    _orderNumberFormattingScript = value;
                    OnPropertyChanged(nameof(OrderNumberFormattingScript));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturerPublicKeysPublicKey> _publicKeys;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("PublicKeys", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PublicKey", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturerPublicKeysPublicKey> PublicKeys
        {
            get
            {
                return _publicKeys;
            }
            private set
            {
                if (_publicKeys == value)
                    return;
                if (_publicKeys == null || value == null || !_publicKeys.SequenceEqual(value))
                {
                    _publicKeys = value;
                    OnPropertyChanged(nameof(PublicKeys));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PublicKeys-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PublicKeys collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PublicKeysSpecified
        {
            get
            {
                return (this.PublicKeys.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MasterData_TManufacturersManufacturer" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MasterData_TManufacturersManufacturer" /> class.</para>
        /// </summary>
        public MasterData_TManufacturersManufacturer()
        {
            this._publicKeys = new System.Collections.ObjectModel.ObservableCollection<MasterData_TManufacturersManufacturerPublicKeysPublicKey>();
            this._importGroup = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _knxManufacturerId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("KnxManufacturerId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort KnxManufacturerId
        {
            get
            {
                return _knxManufacturerId;
            }
            set
            {
                if (!_knxManufacturerId.Equals(value))
                {
                    _knxManufacturerId = value;
                    OnPropertyChanged(nameof(KnxManufacturerId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLanguage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLanguage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLanguage
        {
            get
            {
                return _defaultLanguage;
            }
            set
            {
                if (_defaultLanguage == value)
                    return;
                if (_defaultLanguage == null || value == null || !_defaultLanguage.Equals(value))
                {
                    _defaultLanguage = value;
                    OnPropertyChanged(nameof(DefaultLanguage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _compatibilityGroup;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompatibilityGroup", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort CompatibilityGroupValue
        {
            get
            {
                return _compatibilityGroup;
            }
            set
            {
                if (!_compatibilityGroup.Equals(value))
                {
                    _compatibilityGroup = value;
                    OnPropertyChanged(nameof(CompatibilityGroupValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompatibilityGroup-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompatibilityGroup property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CompatibilityGroupValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> CompatibilityGroup
        {
            get
            {
                if (this.CompatibilityGroupValueSpecified)
                {
                    return this.CompatibilityGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CompatibilityGroupValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CompatibilityGroupValue = value.GetValueOrDefault();
                    this.CompatibilityGroupValueSpecified = value.HasValue;
                    OnPropertyChanged("CompatibilityGroup");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MasterData_TManufacturersManufacturerImportRestriction _importRestriction = MasterData_TManufacturersManufacturerImportRestriction.Own;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(MasterData_TManufacturersManufacturerImportRestriction.Own)]
        [System.Xml.Serialization.XmlAttributeAttribute("ImportRestriction", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MasterData_TManufacturersManufacturerImportRestriction ImportRestriction
        {
            get
            {
                return _importRestriction;
            }
            set
            {
                if (!_importRestriction.Equals(value))
                {
                    _importRestriction = value;
                    OnPropertyChanged(nameof(ImportRestriction));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _importGroup;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ImportGroup", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> ImportGroup
        {
            get
            {
                return _importGroup;
            }
            private set
            {
                if (_importGroup == value)
                    return;
                if (_importGroup == null || value == null || !_importGroup.Equals(value))
                {
                    _importGroup = value;
                    OnPropertyChanged(nameof(ImportGroup));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ImportGroup-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ImportGroup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImportGroupSpecified
        {
            get
            {
                return (this.ImportGroup.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TManufacturersManufacturerImportRestriction", Namespace="http://knx.org/xml/project/11")]
    public enum MasterData_TManufacturersManufacturerImportRestriction
    {
        
        /// <summary>
        /// </summary>
        Own,
        
        /// <summary>
        /// </summary>
        Any,
        
        /// <summary>
        /// </summary>
        Group,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TManufacturersManufacturerPublicKeysPublicKey", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TManufacturersManufacturerPublicKeysPublicKey : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MasterData_TManufacturersManufacturerPublicKeysPublicKeyRSAKeyValue _rSAKeyValue;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RSAKeyValue", Namespace="http://knx.org/xml/project/11")]
        public MasterData_TManufacturersManufacturerPublicKeysPublicKeyRSAKeyValue RSAKeyValue
        {
            get
            {
                return _rSAKeyValue;
            }
            set
            {
                if (_rSAKeyValue == value)
                    return;
                if (_rSAKeyValue == null || value == null || !_rSAKeyValue.Equals(value))
                {
                    _rSAKeyValue = value;
                    OnPropertyChanged(nameof(RSAKeyValue));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _revoked = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Revoked", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Revoked
        {
            get
            {
                return _revoked;
            }
            set
            {
                if (!_revoked.Equals(value))
                {
                    _revoked = value;
                    OnPropertyChanged(nameof(Revoked));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MasterData_TManufacturersManufacturerPublicKeysPublicKeyRSAKeyValue", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MasterData_TManufacturersManufacturerPublicKeysPublicKeyRSAKeyValue : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _modulus;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Modulus", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Modulus
        {
            get
            {
                return _modulus;
            }
            set
            {
                if (_modulus == value)
                    return;
                if (_modulus == null || value == null || !_modulus.SequenceEqual(value))
                {
                    _modulus = value;
                    OnPropertyChanged(nameof(Modulus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _exponent;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Exponent", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Exponent
        {
            get
            {
                return _exponent;
            }
            set
            {
                if (_exponent == value)
                    return;
                if (_exponent == null || value == null || !_exponent.SequenceEqual(value))
                {
                    _exponent = value;
                    OnPropertyChanged(nameof(Exponent));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageData_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LanguageData_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnit> _translationUnit;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TranslationUnit", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnit> TranslationUnit
        {
            get
            {
                return _translationUnit;
            }
            private set
            {
                if (_translationUnit == value)
                    return;
                if (_translationUnit == null || value == null || !_translationUnit.SequenceEqual(value))
                {
                    _translationUnit = value;
                    OnPropertyChanged(nameof(TranslationUnit));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LanguageData_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LanguageData_T" /> class.</para>
        /// </summary>
        public LanguageData_T()
        {
            this._translationUnit = new System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnit>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _identifier;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Identifier", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                if (_identifier == value)
                    return;
                if (_identifier == null || value == null || !_identifier.Equals(value))
                {
                    _identifier = value;
                    OnPropertyChanged(nameof(Identifier));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageData_TTranslationUnit", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LanguageData_TTranslationUnit : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElement> _translationElement;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TranslationElement", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElement> TranslationElement
        {
            get
            {
                return _translationElement;
            }
            private set
            {
                if (_translationElement == value)
                    return;
                if (_translationElement == null || value == null || !_translationElement.SequenceEqual(value))
                {
                    _translationElement = value;
                    OnPropertyChanged(nameof(TranslationElement));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LanguageData_TTranslationUnit" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LanguageData_TTranslationUnit" /> class.</para>
        /// </summary>
        public LanguageData_TTranslationUnit()
        {
            this._translationElement = new System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElement>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _version = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("Version", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Version
        {
            get
            {
                return _version;
            }
            set
            {
                if (!_version.Equals(value))
                {
                    _version = value;
                    OnPropertyChanged(nameof(Version));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageData_TTranslationUnitTranslationElement", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LanguageData_TTranslationUnitTranslationElement : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElementTranslation> _translation;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Translation", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElementTranslation> Translation
        {
            get
            {
                return _translation;
            }
            private set
            {
                if (_translation == value)
                    return;
                if (_translation == null || value == null || !_translation.SequenceEqual(value))
                {
                    _translation = value;
                    OnPropertyChanged(nameof(Translation));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LanguageData_TTranslationUnitTranslationElement" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LanguageData_TTranslationUnitTranslationElement" /> class.</para>
        /// </summary>
        public LanguageData_TTranslationUnitTranslationElement()
        {
            this._translation = new System.Collections.ObjectModel.ObservableCollection<LanguageData_TTranslationUnitTranslationElementTranslation>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageData_TTranslationUnitTranslationElementTranslation", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LanguageData_TTranslationUnitTranslationElementTranslation : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _attributeName;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("AttributeName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AttributeName
        {
            get
            {
                return _attributeName;
            }
            set
            {
                if (_attributeName == value)
                    return;
                if (_attributeName == null || value == null || !_attributeName.Equals(value))
                {
                    _attributeName = value;
                    OnPropertyChanged(nameof(AttributeName));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ManufacturerData_TManufacturer", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManufacturerData_TManufacturer : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<CatalogSection_T> _catalog;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Catalog", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("CatalogSection", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<CatalogSection_T> Catalog
        {
            get
            {
                return _catalog;
            }
            private set
            {
                if (_catalog == value)
                    return;
                if (_catalog == null || value == null || !_catalog.SequenceEqual(value))
                {
                    _catalog = value;
                    OnPropertyChanged(nameof(Catalog));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Catalog-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Catalog collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CatalogSpecified
        {
            get
            {
                return (this.Catalog.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ManufacturerData_TManufacturer" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ManufacturerData_TManufacturer" /> class.</para>
        /// </summary>
        public ManufacturerData_TManufacturer()
        {
            this._catalog = new System.Collections.ObjectModel.ObservableCollection<CatalogSection_T>();
            this._applicationPrograms = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgram_T>();
            this._baggages = new System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturerBaggagesBaggage>();
            this._hardware = new System.Collections.ObjectModel.ObservableCollection<Hardware_T>();
            this._languages = new System.Collections.ObjectModel.ObservableCollection<LanguageData_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgram_T> _applicationPrograms;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ApplicationPrograms", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ApplicationProgram", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgram_T> ApplicationPrograms
        {
            get
            {
                return _applicationPrograms;
            }
            private set
            {
                if (_applicationPrograms == value)
                    return;
                if (_applicationPrograms == null || value == null || !_applicationPrograms.SequenceEqual(value))
                {
                    _applicationPrograms = value;
                    OnPropertyChanged(nameof(ApplicationPrograms));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApplicationPrograms-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ApplicationPrograms collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApplicationProgramsSpecified
        {
            get
            {
                return (this.ApplicationPrograms.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturerBaggagesBaggage> _baggages;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Baggages", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Baggage", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturerBaggagesBaggage> Baggages
        {
            get
            {
                return _baggages;
            }
            private set
            {
                if (_baggages == value)
                    return;
                if (_baggages == null || value == null || !_baggages.SequenceEqual(value))
                {
                    _baggages = value;
                    OnPropertyChanged(nameof(Baggages));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Baggages-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Baggages collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BaggagesSpecified
        {
            get
            {
                return (this.Baggages.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Hardware_T> _hardware;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Hardware", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Hardware", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Hardware_T> Hardware
        {
            get
            {
                return _hardware;
            }
            private set
            {
                if (_hardware == value)
                    return;
                if (_hardware == null || value == null || !_hardware.SequenceEqual(value))
                {
                    _hardware = value;
                    OnPropertyChanged(nameof(Hardware));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Hardware-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Hardware collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HardwareSpecified
        {
            get
            {
                return (this.Hardware.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LanguageData_T> _languages;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Languages", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Language", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LanguageData_T> Languages
        {
            get
            {
                return _languages;
            }
            private set
            {
                if (_languages == value)
                    return;
                if (_languages == null || value == null || !_languages.SequenceEqual(value))
                {
                    _languages = value;
                    OnPropertyChanged(nameof(Languages));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Languages-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Languages collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LanguagesSpecified
        {
            get
            {
                return (this.Languages.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Project_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Project_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Project_TProjectInformation _projectInformation;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ProjectInformation", Namespace="http://knx.org/xml/project/11")]
        public Project_TProjectInformation ProjectInformation
        {
            get
            {
                return _projectInformation;
            }
            set
            {
                if (_projectInformation == value)
                    return;
                if (_projectInformation == null || value == null || !_projectInformation.Equals(value))
                {
                    _projectInformation = value;
                    OnPropertyChanged(nameof(ProjectInformation));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Project_TInstallationsInstallation> _installations;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Installations", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Installation", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Project_TInstallationsInstallation> Installations
        {
            get
            {
                return _installations;
            }
            private set
            {
                if (_installations == value)
                    return;
                if (_installations == null || value == null || !_installations.SequenceEqual(value))
                {
                    _installations = value;
                    OnPropertyChanged(nameof(Installations));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Installations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Installations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstallationsSpecified
        {
            get
            {
                return (this.Installations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Project_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Project_T" /> class.</para>
        /// </summary>
        public Project_T()
        {
            this._installations = new System.Collections.ObjectModel.ObservableCollection<Project_TInstallationsInstallation>();
            this._userFiles = new System.Collections.ObjectModel.ObservableCollection<UserFile_T>();
            this._addInData = new System.Collections.ObjectModel.ObservableCollection<AddInData_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<UserFile_T> _userFiles;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("UserFiles", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("UserFile", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<UserFile_T> UserFiles
        {
            get
            {
                return _userFiles;
            }
            private set
            {
                if (_userFiles == value)
                    return;
                if (_userFiles == null || value == null || !_userFiles.SequenceEqual(value))
                {
                    _userFiles = value;
                    OnPropertyChanged(nameof(UserFiles));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UserFiles-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the UserFiles collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserFilesSpecified
        {
            get
            {
                return (this.UserFiles.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<AddInData_T> _addInData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("AddInData", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("AddInData", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<AddInData_T> AddInData
        {
            get
            {
                return _addInData;
            }
            private set
            {
                if (_addInData == value)
                    return;
                if (_addInData == null || value == null || !_addInData.SequenceEqual(value))
                {
                    _addInData = value;
                    OnPropertyChanged(nameof(AddInData));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AddInData-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AddInData collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AddInDataSpecified
        {
            get
            {
                return (this.AddInData.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CatalogSection_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CatalogSection_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<CatalogSection_T> _catalogSection;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CatalogSection", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<CatalogSection_T> CatalogSection
        {
            get
            {
                return _catalogSection;
            }
            private set
            {
                if (_catalogSection == value)
                    return;
                if (_catalogSection == null || value == null || !_catalogSection.SequenceEqual(value))
                {
                    _catalogSection = value;
                    OnPropertyChanged(nameof(CatalogSection));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CatalogSection-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CatalogSection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CatalogSectionSpecified
        {
            get
            {
                return (this.CatalogSection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="CatalogSection_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CatalogSection_T" /> class.</para>
        /// </summary>
        public CatalogSection_T()
        {
            this._catalogSection = new System.Collections.ObjectModel.ObservableCollection<CatalogSection_T>();
            this._catalogItem = new System.Collections.ObjectModel.ObservableCollection<CatalogSection_TCatalogItem>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<CatalogSection_TCatalogItem> _catalogItem;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CatalogItem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<CatalogSection_TCatalogItem> CatalogItem
        {
            get
            {
                return _catalogItem;
            }
            private set
            {
                if (_catalogItem == value)
                    return;
                if (_catalogItem == null || value == null || !_catalogItem.SequenceEqual(value))
                {
                    _catalogItem = value;
                    OnPropertyChanged(nameof(CatalogItem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CatalogItem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CatalogItem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CatalogItemSpecified
        {
            get
            {
                return (this.CatalogItem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (_number == value)
                    return;
                if (_number == null || value == null || !_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLanguage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLanguage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLanguage
        {
            get
            {
                return _defaultLanguage;
            }
            set
            {
                if (_defaultLanguage == value)
                    return;
                if (_defaultLanguage == null || value == null || !_defaultLanguage.Equals(value))
                {
                    _defaultLanguage = value;
                    OnPropertyChanged(nameof(DefaultLanguage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _nonRegRelevantDataVersion = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("NonRegRelevantDataVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort NonRegRelevantDataVersion
        {
            get
            {
                return _nonRegRelevantDataVersion;
            }
            set
            {
                if (!_nonRegRelevantDataVersion.Equals(value))
                {
                    _nonRegRelevantDataVersion = value;
                    OnPropertyChanged(nameof(NonRegRelevantDataVersion));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CatalogSection_TCatalogItem", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CatalogSection_TCatalogItem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _number;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _productRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ProductRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProductRefId
        {
            get
            {
                return _productRefId;
            }
            set
            {
                if (_productRefId == value)
                    return;
                if (_productRefId == null || value == null || !_productRefId.Equals(value))
                {
                    _productRefId = value;
                    OnPropertyChanged(nameof(ProductRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _hardware2ProgramRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Hardware2ProgramRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Hardware2ProgramRefId
        {
            get
            {
                return _hardware2ProgramRefId;
            }
            set
            {
                if (_hardware2ProgramRefId == value)
                    return;
                if (_hardware2ProgramRefId == null || value == null || !_hardware2ProgramRefId.Equals(value))
                {
                    _hardware2ProgramRefId = value;
                    OnPropertyChanged(nameof(Hardware2ProgramRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLanguage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLanguage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLanguage
        {
            get
            {
                return _defaultLanguage;
            }
            set
            {
                if (_defaultLanguage == value)
                    return;
                if (_defaultLanguage == null || value == null || !_defaultLanguage.Equals(value))
                {
                    _defaultLanguage = value;
                    OnPropertyChanged(nameof(DefaultLanguage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _mediumTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MediumTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> MediumTypes
        {
            get
            {
                return _mediumTypes;
            }
            private set
            {
                if (_mediumTypes == value)
                    return;
                if (_mediumTypes == null || value == null || !_mediumTypes.Equals(value))
                {
                    _mediumTypes = value;
                    OnPropertyChanged(nameof(MediumTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MediumTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MediumTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MediumTypesSpecified
        {
            get
            {
                return (this.MediumTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="CatalogSection_TCatalogItem" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CatalogSection_TCatalogItem" /> class.</para>
        /// </summary>
        public CatalogSection_TCatalogItem()
        {
            this._mediumTypes = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _nonRegRelevantDataVersion = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("NonRegRelevantDataVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort NonRegRelevantDataVersion
        {
            get
            {
                return _nonRegRelevantDataVersion;
            }
            set
            {
                if (!_nonRegRelevantDataVersion.Equals(value))
                {
                    _nonRegRelevantDataVersion = value;
                    OnPropertyChanged(nameof(NonRegRelevantDataVersion));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgram_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgram_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_T _static;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Static", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_T Static
        {
            get
            {
                return _static;
            }
            set
            {
                if (_static == value)
                    return;
                if (_static == null || value == null || !_static.Equals(value))
                {
                    _static = value;
                    OnPropertyChanged(nameof(Static));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramDynamic_T _dynamic;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Dynamic", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramDynamic_T Dynamic
        {
            get
            {
                return _dynamic;
            }
            set
            {
                if (_dynamic == value)
                    return;
                if (_dynamic == null || value == null || !_dynamic.Equals(value))
                {
                    _dynamic = value;
                    OnPropertyChanged(nameof(Dynamic));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _applicationNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ApplicationNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ApplicationNumber
        {
            get
            {
                return _applicationNumber;
            }
            set
            {
                if (!_applicationNumber.Equals(value))
                {
                    _applicationNumber = value;
                    OnPropertyChanged(nameof(ApplicationNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _applicationVersion;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ApplicationVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ApplicationVersion
        {
            get
            {
                return _applicationVersion;
            }
            set
            {
                if (!_applicationVersion.Equals(value))
                {
                    _applicationVersion = value;
                    OnPropertyChanged(nameof(ApplicationVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramType_T _programType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ProgramType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ApplicationProgramType_T ProgramType
        {
            get
            {
                return _programType;
            }
            set
            {
                if (!_programType.Equals(value))
                {
                    _programType = value;
                    OnPropertyChanged(nameof(ProgramType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _maskVersion;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MaskVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MaskVersion
        {
            get
            {
                return _maskVersion;
            }
            set
            {
                if (_maskVersion == value)
                    return;
                if (_maskVersion == null || value == null || !_maskVersion.Equals(value))
                {
                    _maskVersion = value;
                    OnPropertyChanged(nameof(MaskVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LoadProcedureStyle_T _loadProcedureStyle;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LoadProcedureStyle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LoadProcedureStyle_T LoadProcedureStyle
        {
            get
            {
                return _loadProcedureStyle;
            }
            set
            {
                if (!_loadProcedureStyle.Equals(value))
                {
                    _loadProcedureStyle = value;
                    OnPropertyChanged(nameof(LoadProcedureStyle));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _peiType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PeiType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PeiType
        {
            get
            {
                return _peiType;
            }
            set
            {
                if (!_peiType.Equals(value))
                {
                    _peiType = value;
                    OnPropertyChanged(nameof(PeiType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _helpTopic;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("HelpTopic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint HelpTopicValue
        {
            get
            {
                return _helpTopic;
            }
            set
            {
                if (!_helpTopic.Equals(value))
                {
                    _helpTopic = value;
                    OnPropertyChanged(nameof(HelpTopicValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HelpTopic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HelpTopic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HelpTopicValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> HelpTopic
        {
            get
            {
                if (this.HelpTopicValueSpecified)
                {
                    return this.HelpTopicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.HelpTopicValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.HelpTopicValue = value.GetValueOrDefault();
                    this.HelpTopicValueSpecified = value.HasValue;
                    OnPropertyChanged("HelpTopic");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _helpFile;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("HelpFile", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string HelpFile
        {
            get
            {
                return _helpFile;
            }
            set
            {
                if (_helpFile == value)
                    return;
                if (_helpFile == null || value == null || !_helpFile.Equals(value))
                {
                    _helpFile = value;
                    OnPropertyChanged(nameof(HelpFile));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLanguage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLanguage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLanguage
        {
            get
            {
                return _defaultLanguage;
            }
            set
            {
                if (_defaultLanguage == value)
                    return;
                if (_defaultLanguage == null || value == null || !_defaultLanguage.Equals(value))
                {
                    _defaultLanguage = value;
                    OnPropertyChanged(nameof(DefaultLanguage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _dynamicTableManagement;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("DynamicTableManagement", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DynamicTableManagement
        {
            get
            {
                return _dynamicTableManagement;
            }
            set
            {
                if (!_dynamicTableManagement.Equals(value))
                {
                    _dynamicTableManagement = value;
                    OnPropertyChanged(nameof(DynamicTableManagement));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _linkable;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Linkable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Linkable
        {
            get
            {
                return _linkable;
            }
            set
            {
                if (!_linkable.Equals(value))
                {
                    _linkable = value;
                    OnPropertyChanged(nameof(Linkable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgram_TMinEtsVersion _minEtsVersion;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("MinEtsVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ApplicationProgram_TMinEtsVersion MinEtsVersionValue
        {
            get
            {
                return _minEtsVersion;
            }
            set
            {
                if (!_minEtsVersion.Equals(value))
                {
                    _minEtsVersion = value;
                    OnPropertyChanged(nameof(MinEtsVersionValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinEtsVersion-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinEtsVersion property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinEtsVersionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ApplicationProgram_TMinEtsVersion> MinEtsVersion
        {
            get
            {
                if (this.MinEtsVersionValueSpecified)
                {
                    return this.MinEtsVersionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.MinEtsVersionValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.MinEtsVersionValue = value.GetValueOrDefault();
                    this.MinEtsVersionValueSpecified = value.HasValue;
                    OnPropertyChanged("MinEtsVersion");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _originalManufacturer;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("OriginalManufacturer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OriginalManufacturer
        {
            get
            {
                return _originalManufacturer;
            }
            set
            {
                if (_originalManufacturer == value)
                    return;
                if (_originalManufacturer == null || value == null || !_originalManufacturer.Equals(value))
                {
                    _originalManufacturer = value;
                    OnPropertyChanged(nameof(OriginalManufacturer));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _preEts4Style = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PreEts4Style", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool PreEts4Style
        {
            get
            {
                return _preEts4Style;
            }
            set
            {
                if (!_preEts4Style.Equals(value))
                {
                    _preEts4Style = value;
                    OnPropertyChanged(nameof(PreEts4Style));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _convertedFromPreEts4Data = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ConvertedFromPreEts4Data", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ConvertedFromPreEts4Data
        {
            get
            {
                return _convertedFromPreEts4Data;
            }
            set
            {
                if (!_convertedFromPreEts4Data.Equals(value))
                {
                    _convertedFromPreEts4Data = value;
                    OnPropertyChanged(nameof(ConvertedFromPreEts4Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _createdFromLegacySchemaVersion = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("CreatedFromLegacySchemaVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool CreatedFromLegacySchemaVersion
        {
            get
            {
                return _createdFromLegacySchemaVersion;
            }
            set
            {
                if (!_createdFromLegacySchemaVersion.Equals(value))
                {
                    _createdFromLegacySchemaVersion = value;
                    OnPropertyChanged(nameof(CreatedFromLegacySchemaVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramIPConfig_T _iPConfig = ApplicationProgramIPConfig_T.Tool;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ApplicationProgramIPConfig_T.Tool)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IPConfig", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ApplicationProgramIPConfig_T IPConfig
        {
            get
            {
                return _iPConfig;
            }
            set
            {
                if (!_iPConfig.Equals(value))
                {
                    _iPConfig = value;
                    OnPropertyChanged(nameof(IPConfig));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _additionalAddressesCount = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AdditionalAddressesCount", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int AdditionalAddressesCount
        {
            get
            {
                return _additionalAddressesCount;
            }
            set
            {
                if (!_additionalAddressesCount.Equals(value))
                {
                    _additionalAddressesCount = value;
                    OnPropertyChanged(nameof(AdditionalAddressesCount));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _nonRegRelevantDataVersion = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("NonRegRelevantDataVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort NonRegRelevantDataVersion
        {
            get
            {
                return _nonRegRelevantDataVersion;
            }
            set
            {
                if (!_nonRegRelevantDataVersion.Equals(value))
                {
                    _nonRegRelevantDataVersion = value;
                    OnPropertyChanged(nameof(NonRegRelevantDataVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _broken = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Broken", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Broken
        {
            get
            {
                return _broken;
            }
            set
            {
                if (!_broken.Equals(value))
                {
                    _broken = value;
                    OnPropertyChanged(nameof(Broken));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _downloadInfoIncomplete = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("DownloadInfoIncomplete", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DownloadInfoIncomplete
        {
            get
            {
                return _downloadInfoIncomplete;
            }
            set
            {
                if (!_downloadInfoIncomplete.Equals(value))
                {
                    _downloadInfoIncomplete = value;
                    OnPropertyChanged(nameof(DownloadInfoIncomplete));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _replacesVersions;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ReplacesVersions", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReplacesVersions
        {
            get
            {
                return _replacesVersions;
            }
            set
            {
                if (_replacesVersions == value)
                    return;
                if (_replacesVersions == null || value == null || !_replacesVersions.Equals(value))
                {
                    _replacesVersions = value;
                    OnPropertyChanged(nameof(ReplacesVersions));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgram_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgram_T" /> class.</para>
        /// </summary>
        public ApplicationProgram_T()
        {
            
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _hash;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Hash", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Hash
        {
            get
            {
                return _hash;
            }
            set
            {
                if (_hash == value)
                    return;
                if (_hash == null || value == null || !_hash.SequenceEqual(value))
                {
                    _hash = value;
                    OnPropertyChanged(nameof(Hash));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TCode _code;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Code", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TCode Code
        {
            get
            {
                return _code;
            }
            set
            {
                if (_code == value)
                    return;
                if (_code == null || value == null || !_code.Equals(value))
                {
                    _code = value;
                    OnPropertyChanged(nameof(Code));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterType_T> _parameterTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ParameterTypes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterType", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterType_T> ParameterTypes
        {
            get
            {
                return _parameterTypes;
            }
            private set
            {
                if (_parameterTypes == value)
                    return;
                if (_parameterTypes == null || value == null || !_parameterTypes.SequenceEqual(value))
                {
                    _parameterTypes = value;
                    OnPropertyChanged(nameof(ParameterTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterTypesSpecified
        {
            get
            {
                return (this.ParameterTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_T" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_T()
        {
            this._parameterTypes = new System.Collections.ObjectModel.ObservableCollection<ParameterType_T>();
            this._parameterRefs = new System.Collections.ObjectModel.ObservableCollection<ParameterRef_T>();
            this._parameterCalculations = new System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_T>();
            this._comObjectRefs = new System.Collections.ObjectModel.ObservableCollection<ComObjectRef_T>();
            this._fixupList = new System.Collections.ObjectModel.ObservableCollection<Fixup_T>();
            this._loadProcedures = new System.Collections.ObjectModel.ObservableCollection<LoadProcedures_TLoadProcedure>();
            this._binaryData = new System.Collections.ObjectModel.ObservableCollection<BinaryData_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TParameters _parameters;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameters", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                if (_parameters == value)
                    return;
                if (_parameters == null || value == null || !_parameters.Equals(value))
                {
                    _parameters = value;
                    OnPropertyChanged(nameof(Parameters));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterRef_T> _parameterRefs;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ParameterRefs", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterRef_T> ParameterRefs
        {
            get
            {
                return _parameterRefs;
            }
            private set
            {
                if (_parameterRefs == value)
                    return;
                if (_parameterRefs == null || value == null || !_parameterRefs.SequenceEqual(value))
                {
                    _parameterRefs = value;
                    OnPropertyChanged(nameof(ParameterRefs));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterRefs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterRefs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterRefsSpecified
        {
            get
            {
                return (this.ParameterRefs.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_T> _parameterCalculations;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ParameterCalculations", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterCalculation", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_T> ParameterCalculations
        {
            get
            {
                return _parameterCalculations;
            }
            private set
            {
                if (_parameterCalculations == value)
                    return;
                if (_parameterCalculations == null || value == null || !_parameterCalculations.SequenceEqual(value))
                {
                    _parameterCalculations = value;
                    OnPropertyChanged(nameof(ParameterCalculations));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterCalculations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterCalculations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterCalculationsSpecified
        {
            get
            {
                return (this.ParameterCalculations.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TComObjectTable _comObjectTable;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectTable", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TComObjectTable ComObjectTable
        {
            get
            {
                return _comObjectTable;
            }
            set
            {
                if (_comObjectTable == value)
                    return;
                if (_comObjectTable == null || value == null || !_comObjectTable.Equals(value))
                {
                    _comObjectTable = value;
                    OnPropertyChanged(nameof(ComObjectTable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRef_T> _comObjectRefs;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ComObjectRefs", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ComObjectRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRef_T> ComObjectRefs
        {
            get
            {
                return _comObjectRefs;
            }
            private set
            {
                if (_comObjectRefs == value)
                    return;
                if (_comObjectRefs == null || value == null || !_comObjectRefs.SequenceEqual(value))
                {
                    _comObjectRefs = value;
                    OnPropertyChanged(nameof(ComObjectRefs));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefsSpecified
        {
            get
            {
                return (this.ComObjectRefs.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TAddressTable _addressTable;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AddressTable", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TAddressTable AddressTable
        {
            get
            {
                return _addressTable;
            }
            set
            {
                if (_addressTable == value)
                    return;
                if (_addressTable == null || value == null || !_addressTable.Equals(value))
                {
                    _addressTable = value;
                    OnPropertyChanged(nameof(AddressTable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TAssociationTable _associationTable;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AssociationTable", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TAssociationTable AssociationTable
        {
            get
            {
                return _associationTable;
            }
            set
            {
                if (_associationTable == value)
                    return;
                if (_associationTable == null || value == null || !_associationTable.Equals(value))
                {
                    _associationTable = value;
                    OnPropertyChanged(nameof(AssociationTable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Fixup_T> _fixupList;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("FixupList", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Fixup", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Fixup_T> FixupList
        {
            get
            {
                return _fixupList;
            }
            private set
            {
                if (_fixupList == value)
                    return;
                if (_fixupList == null || value == null || !_fixupList.SequenceEqual(value))
                {
                    _fixupList = value;
                    OnPropertyChanged(nameof(FixupList));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FixupList-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FixupList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FixupListSpecified
        {
            get
            {
                return (this.FixupList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LoadProcedures_TLoadProcedure> _loadProcedures;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("LoadProcedures", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LoadProcedure", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<LoadProcedures_TLoadProcedure> LoadProcedures
        {
            get
            {
                return _loadProcedures;
            }
            private set
            {
                if (_loadProcedures == value)
                    return;
                if (_loadProcedures == null || value == null || !_loadProcedures.SequenceEqual(value))
                {
                    _loadProcedures = value;
                    OnPropertyChanged(nameof(LoadProcedures));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LoadProcedures-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LoadProcedures collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadProceduresSpecified
        {
            get
            {
                return (this.LoadProcedures.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TExtension _extension;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Extension", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TExtension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                if (_extension == value)
                    return;
                if (_extension == null || value == null || !_extension.Equals(value))
                {
                    _extension = value;
                    OnPropertyChanged(nameof(Extension));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryData_T> _binaryData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("BinaryData", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("BinaryData", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryData_T> BinaryData
        {
            get
            {
                return _binaryData;
            }
            private set
            {
                if (_binaryData == value)
                    return;
                if (_binaryData == null || value == null || !_binaryData.SequenceEqual(value))
                {
                    _binaryData = value;
                    OnPropertyChanged(nameof(BinaryData));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryData-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryData collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataSpecified
        {
            get
            {
                return (this.BinaryData.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TDeviceCompare _deviceCompare;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DeviceCompare", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TDeviceCompare DeviceCompare
        {
            get
            {
                return _deviceCompare;
            }
            set
            {
                if (_deviceCompare == value)
                    return;
                if (_deviceCompare == null || value == null || !_deviceCompare.Equals(value))
                {
                    _deviceCompare = value;
                    OnPropertyChanged(nameof(DeviceCompare));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TOptions _options;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Options", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TOptions Options
        {
            get
            {
                return _options;
            }
            set
            {
                if (_options == value)
                    return;
                if (_options == null || value == null || !_options.Equals(value))
                {
                    _options = value;
                    OnPropertyChanged(nameof(Options));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TCode", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TCode : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeAbsoluteSegment> _absoluteSegment;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("AbsoluteSegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeAbsoluteSegment> AbsoluteSegment
        {
            get
            {
                return _absoluteSegment;
            }
            private set
            {
                if (_absoluteSegment == value)
                    return;
                if (_absoluteSegment == null || value == null || !_absoluteSegment.SequenceEqual(value))
                {
                    _absoluteSegment = value;
                    OnPropertyChanged(nameof(AbsoluteSegment));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AbsoluteSegment-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AbsoluteSegment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AbsoluteSegmentSpecified
        {
            get
            {
                return (this.AbsoluteSegment.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TCode" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TCode" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TCode()
        {
            this._absoluteSegment = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeAbsoluteSegment>();
            this._relativeSegment = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeRelativeSegment>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeRelativeSegment> _relativeSegment;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("RelativeSegment", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TCodeRelativeSegment> RelativeSegment
        {
            get
            {
                return _relativeSegment;
            }
            private set
            {
                if (_relativeSegment == value)
                    return;
                if (_relativeSegment == null || value == null || !_relativeSegment.SequenceEqual(value))
                {
                    _relativeSegment = value;
                    OnPropertyChanged(nameof(RelativeSegment));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeSegment-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RelativeSegment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeSegmentSpecified
        {
            get
            {
                return (this.RelativeSegment.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TCodeAbsoluteSegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TCodeAbsoluteSegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _mask;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("Mask", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Mask
        {
            get
            {
                return _mask;
            }
            set
            {
                if (_mask == value)
                    return;
                if (_mask == null || value == null || !_mask.SequenceEqual(value))
                {
                    _mask = value;
                    OnPropertyChanged(nameof(Mask));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MemoryType_T _memoryType;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("MemoryType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MemoryType_T MemoryTypeValue
        {
            get
            {
                return _memoryType;
            }
            set
            {
                if (!_memoryType.Equals(value))
                {
                    _memoryType = value;
                    OnPropertyChanged(nameof(MemoryTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemoryType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemoryType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MemoryTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<MemoryType_T> MemoryType
        {
            get
            {
                if (this.MemoryTypeValueSpecified)
                {
                    return this.MemoryTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.MemoryTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.MemoryTypeValue = value.GetValueOrDefault();
                    this.MemoryTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("MemoryType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _address;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _userMemory = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("UserMemory", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool UserMemory
        {
            get
            {
                return _userMemory;
            }
            set
            {
                if (!_userMemory.Equals(value))
                {
                    _userMemory = value;
                    OnPropertyChanged(nameof(UserMemory));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TCodeRelativeSegment", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TCodeRelativeSegment : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _mask;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("Mask", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Mask
        {
            get
            {
                return _mask;
            }
            set
            {
                if (_mask == value)
                    return;
                if (_mask == null || value == null || !_mask.SequenceEqual(value))
                {
                    _mask = value;
                    OnPropertyChanged(nameof(Mask));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _loadStateMachine;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LoadStateMachine", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte LoadStateMachine
        {
            get
            {
                return _loadStateMachine;
            }
            set
            {
                if (!_loadStateMachine.Equals(value))
                {
                    _loadStateMachine = value;
                    OnPropertyChanged(nameof(LoadStateMachine));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TParameters", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TParameters : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Parameter_T> _parameter;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Parameter_T> Parameter
        {
            get
            {
                return _parameter;
            }
            private set
            {
                if (_parameter == value)
                    return;
                if (_parameter == null || value == null || !_parameter.SequenceEqual(value))
                {
                    _parameter = value;
                    OnPropertyChanged(nameof(Parameter));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parameter-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Parameter collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterSpecified
        {
            get
            {
                return (this.Parameter.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TParameters" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TParameters" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TParameters()
        {
            this._parameter = new System.Collections.ObjectModel.ObservableCollection<Parameter_T>();
            this._union = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TParametersUnion>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TParametersUnion> _union;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Union", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TParametersUnion> Union
        {
            get
            {
                return _union;
            }
            private set
            {
                if (_union == value)
                    return;
                if (_union == null || value == null || !_union.SequenceEqual(value))
                {
                    _union = value;
                    OnPropertyChanged(nameof(Union));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Union-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Union collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnionSpecified
        {
            get
            {
                return (this.Union.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeNumber _typeNumber;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeNumber", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeNumber TypeNumber
        {
            get
            {
                return _typeNumber;
            }
            set
            {
                if (_typeNumber == value)
                    return;
                if (_typeNumber == null || value == null || !_typeNumber.Equals(value))
                {
                    _typeNumber = value;
                    OnPropertyChanged(nameof(TypeNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeFloat _typeFloat;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeFloat", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeFloat TypeFloat
        {
            get
            {
                return _typeFloat;
            }
            set
            {
                if (_typeFloat == value)
                    return;
                if (_typeFloat == null || value == null || !_typeFloat.Equals(value))
                {
                    _typeFloat = value;
                    OnPropertyChanged(nameof(TypeFloat));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeRestriction _typeRestriction;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeRestriction", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeRestriction TypeRestriction
        {
            get
            {
                return _typeRestriction;
            }
            set
            {
                if (_typeRestriction == value)
                    return;
                if (_typeRestriction == null || value == null || !_typeRestriction.Equals(value))
                {
                    _typeRestriction = value;
                    OnPropertyChanged(nameof(TypeRestriction));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeText _typeText;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeText", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeText TypeText
        {
            get
            {
                return _typeText;
            }
            set
            {
                if (_typeText == value)
                    return;
                if (_typeText == null || value == null || !_typeText.Equals(value))
                {
                    _typeText = value;
                    OnPropertyChanged(nameof(TypeText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeTime _typeTime;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeTime", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeTime TypeTime
        {
            get
            {
                return _typeTime;
            }
            set
            {
                if (_typeTime == value)
                    return;
                if (_typeTime == null || value == null || !_typeTime.Equals(value))
                {
                    _typeTime = value;
                    OnPropertyChanged(nameof(TypeTime));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeDate _typeDate;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeDate", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeDate TypeDate
        {
            get
            {
                return _typeDate;
            }
            set
            {
                if (_typeDate == value)
                    return;
                if (_typeDate == null || value == null || !_typeDate.Equals(value))
                {
                    _typeDate = value;
                    OnPropertyChanged(nameof(TypeDate));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeIPAddress _typeIPAddress;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeIPAddress", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypeIPAddress TypeIPAddress
        {
            get
            {
                return _typeIPAddress;
            }
            set
            {
                if (_typeIPAddress == value)
                    return;
                if (_typeIPAddress == null || value == null || !_typeIPAddress.Equals(value))
                {
                    _typeIPAddress = value;
                    OnPropertyChanged(nameof(TypeIPAddress));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypePicture _typePicture;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypePicture", Namespace="http://knx.org/xml/project/11")]
        public ParameterType_TTypePicture TypePicture
        {
            get
            {
                return _typePicture;
            }
            set
            {
                if (_typePicture == value)
                    return;
                if (_typePicture == null || value == null || !_typePicture.Equals(value))
                {
                    _typePicture = value;
                    OnPropertyChanged(nameof(TypePicture));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private object _typeNone;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TypeNone", Namespace="http://knx.org/xml/project/11")]
        public object TypeNone
        {
            get
            {
                return _typeNone;
            }
            set
            {
                if (_typeNone == value)
                    return;
                if (_typeNone == null || value == null || !_typeNone.Equals(value))
                {
                    _typeNone = value;
                    OnPropertyChanged(nameof(TypeNone));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _internalDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("InternalDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InternalDescription
        {
            get
            {
                return _internalDescription;
            }
            set
            {
                if (_internalDescription == value)
                    return;
                if (_internalDescription == null || value == null || !_internalDescription.Equals(value))
                {
                    _internalDescription = value;
                    OnPropertyChanged(nameof(InternalDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _plugin;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Plugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Plugin
        {
            get
            {
                return _plugin;
            }
            set
            {
                if (_plugin == value)
                    return;
                if (_plugin == null || value == null || !_plugin.Equals(value))
                {
                    _plugin = value;
                    OnPropertyChanged(nameof(Plugin));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeNumber", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeNumber : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 32.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "1", "32")]
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeNumberType _type;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Type", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeNumberType Type
        {
            get
            {
                return _type;
            }
            set
            {
                if (!_type.Equals(value))
                {
                    _type = value;
                    OnPropertyChanged(nameof(Type));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _minInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("minInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MinInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                if (!_minInclusive.Equals(value))
                {
                    _minInclusive = value;
                    OnPropertyChanged(nameof(MinInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _maxInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("maxInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                if (!_maxInclusive.Equals(value))
                {
                    _maxInclusive = value;
                    OnPropertyChanged(nameof(MaxInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeNumberUIHint _uIHint;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("UIHint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeNumberUIHint UIHintValue
        {
            get
            {
                return _uIHint;
            }
            set
            {
                if (!_uIHint.Equals(value))
                {
                    _uIHint = value;
                    OnPropertyChanged(nameof(UIHintValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UIHint-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UIHint property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UIHintValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ParameterType_TTypeNumberUIHint> UIHint
        {
            get
            {
                if (this.UIHintValueSpecified)
                {
                    return this.UIHintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.UIHintValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.UIHintValue = value.GetValueOrDefault();
                    this.UIHintValueSpecified = value.HasValue;
                    OnPropertyChanged("UIHint");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeNumberType", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeNumberType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("signedInt")]
        SignedInt,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("unsignedInt")]
        UnsignedInt,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeNumberUIHint", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeNumberUIHint
    {
        
        /// <summary>
        /// </summary>
        Slider,
        
        /// <summary>
        /// </summary>
        CheckBox,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeFloat", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeFloat : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeFloatEncoding _encoding;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Encoding", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeFloatEncoding Encoding
        {
            get
            {
                return _encoding;
            }
            set
            {
                if (!_encoding.Equals(value))
                {
                    _encoding = value;
                    OnPropertyChanged(nameof(Encoding));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private double _minInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("minInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double MinInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                if (!_minInclusive.Equals(value))
                {
                    _minInclusive = value;
                    OnPropertyChanged(nameof(MinInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private double _maxInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("maxInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double MaxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                if (!_maxInclusive.Equals(value))
                {
                    _maxInclusive = value;
                    OnPropertyChanged(nameof(MaxInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeFloatUIHint _uIHint;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("UIHint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeFloatUIHint UIHintValue
        {
            get
            {
                return _uIHint;
            }
            set
            {
                if (!_uIHint.Equals(value))
                {
                    _uIHint = value;
                    OnPropertyChanged(nameof(UIHintValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UIHint-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UIHint property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UIHintValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ParameterType_TTypeFloatUIHint> UIHint
        {
            get
            {
                if (this.UIHintValueSpecified)
                {
                    return this.UIHintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.UIHintValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.UIHintValue = value.GetValueOrDefault();
                    this.UIHintValueSpecified = value.HasValue;
                    OnPropertyChanged("UIHint");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _displayFormat;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [#,]*[0,]+(\.0*)?([eE][+-]?0+)?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[#,]*[0,]+(\\.0*)?([eE][+-]?0+)?")]
        [System.Xml.Serialization.XmlAttributeAttribute("DisplayFormat", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DisplayFormat
        {
            get
            {
                return _displayFormat;
            }
            set
            {
                if (_displayFormat == value)
                    return;
                if (_displayFormat == null || value == null || !_displayFormat.Equals(value))
                {
                    _displayFormat = value;
                    OnPropertyChanged(nameof(DisplayFormat));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeFloatEncoding", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeFloatEncoding
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("DPT 9")]
        DPT_9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("IEEE-754 Single")]
        IEEE_754_Single,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("IEEE-754 Double")]
        IEEE_754_Double,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeFloatUIHint", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeFloatUIHint
    {
        
        /// <summary>
        /// </summary>
        Slider,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeRestriction", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeRestriction : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterType_TTypeRestrictionEnumeration> _enumeration;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("Enumeration", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterType_TTypeRestrictionEnumeration> Enumeration
        {
            get
            {
                return _enumeration;
            }
            private set
            {
                if (_enumeration == value)
                    return;
                if (_enumeration == null || value == null || !_enumeration.SequenceEqual(value))
                {
                    _enumeration = value;
                    OnPropertyChanged(nameof(Enumeration));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enumeration-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Enumeration collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnumerationSpecified
        {
            get
            {
                return (this.Enumeration.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ParameterType_TTypeRestriction" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ParameterType_TTypeRestriction" /> class.</para>
        /// </summary>
        public ParameterType_TTypeRestriction()
        {
            this._enumeration = new System.Collections.ObjectModel.ObservableCollection<ParameterType_TTypeRestrictionEnumeration>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeRestrictionBase _base;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Base", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeRestrictionBase Base
        {
            get
            {
                return _base;
            }
            set
            {
                if (!_base.Equals(value))
                {
                    _base = value;
                    OnPropertyChanged(nameof(Base));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "1", "1048575")]
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeRestrictionEnumeration", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeRestrictionEnumeration : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (!_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _displayOrder;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("DisplayOrder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int DisplayOrderValue
        {
            get
            {
                return _displayOrder;
            }
            set
            {
                if (!_displayOrder.Equals(value))
                {
                    _displayOrder = value;
                    OnPropertyChanged(nameof(DisplayOrderValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisplayOrder-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayOrder property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DisplayOrderValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DisplayOrder
        {
            get
            {
                if (this.DisplayOrderValueSpecified)
                {
                    return this.DisplayOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.DisplayOrderValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.DisplayOrderValue = value.GetValueOrDefault();
                    this.DisplayOrderValueSpecified = value.HasValue;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _binaryValue;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("BinaryValue", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] BinaryValue
        {
            get
            {
                return _binaryValue;
            }
            set
            {
                if (_binaryValue == value)
                    return;
                if (_binaryValue == null || value == null || !_binaryValue.SequenceEqual(value))
                {
                    _binaryValue = value;
                    OnPropertyChanged(nameof(BinaryValue));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeRestrictionBase", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeRestrictionBase
    {
        
        /// <summary>
        /// </summary>
        Value,
        
        /// <summary>
        /// </summary>
        BinaryValue,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeText", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeText : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 8.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "8", "1048575")]
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _pattern;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Pattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Pattern
        {
            get
            {
                return _pattern;
            }
            set
            {
                if (_pattern == value)
                    return;
                if (_pattern == null || value == null || !_pattern.Equals(value))
                {
                    _pattern = value;
                    OnPropertyChanged(nameof(Pattern));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeTime", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeTime : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 8.</para>
        /// <para xml:lang="en">Maximum inclusive value: 64.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "8", "64")]
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeTimeUnit _unit;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Unit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeTimeUnit Unit
        {
            get
            {
                return _unit;
            }
            set
            {
                if (!_unit.Equals(value))
                {
                    _unit = value;
                    OnPropertyChanged(nameof(Unit));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _minInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("minInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MinInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                if (!_minInclusive.Equals(value))
                {
                    _minInclusive = value;
                    OnPropertyChanged(nameof(MinInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _maxInclusive;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("maxInclusive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                if (!_maxInclusive.Equals(value))
                {
                    _maxInclusive = value;
                    OnPropertyChanged(nameof(MaxInclusive));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeTimeUIHint _uIHint;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("UIHint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeTimeUIHint UIHintValue
        {
            get
            {
                return _uIHint;
            }
            set
            {
                if (!_uIHint.Equals(value))
                {
                    _uIHint = value;
                    OnPropertyChanged(nameof(UIHintValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UIHint-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UIHint property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UIHintValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ParameterType_TTypeTimeUIHint> UIHint
        {
            get
            {
                if (this.UIHintValueSpecified)
                {
                    return this.UIHintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.UIHintValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.UIHintValue = value.GetValueOrDefault();
                    this.UIHintValueSpecified = value.HasValue;
                    OnPropertyChanged("UIHint");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeTimeUnit", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeTimeUnit
    {
        
        /// <summary>
        /// </summary>
        Hours,
        
        /// <summary>
        /// </summary>
        Minutes,
        
        /// <summary>
        /// </summary>
        Seconds,
        
        /// <summary>
        /// </summary>
        HundredMilliseconds,
        
        /// <summary>
        /// </summary>
        TenMilliseconds,
        
        /// <summary>
        /// </summary>
        Milliseconds,
        
        /// <summary>
        /// </summary>
        PackedSecondsAndMilliseconds,
        
        /// <summary>
        /// </summary>
        PackedDaysHoursMinutesAndSeconds,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeTimeUIHint", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeTimeUIHint
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_ss")]
        Time_Ss,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_ssf")]
        Time_Ssf,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_ssff")]
        Time_Ssff,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_ssfff")]
        Time_Ssfff,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_hhmm")]
        Time_Hhmm,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_hhmmss")]
        Time_Hhmmss,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_hhmmssf")]
        Time_Hhmmssf,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_hhmmssff")]
        Time_Hhmmssff,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_hhmmssfff")]
        Time_Hhmmssfff,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_dhh")]
        Time_Dhh,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_dhhmm")]
        Time_Dhhmm,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Time_dhhmmss")]
        Time_Dhhmmss,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Duration_hhmm")]
        Duration_Hhmm,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Duration_hhmmss")]
        Duration_Hhmmss,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Duration_hhmmssf")]
        Duration_Hhmmssf,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Duration_hhmmssff")]
        Duration_Hhmmssff,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Duration_hhmmssfff")]
        Duration_Hhmmssfff,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeDate", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeDate : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeDateEncoding _encoding;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Encoding", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeDateEncoding Encoding
        {
            get
            {
                return _encoding;
            }
            set
            {
                if (!_encoding.Equals(value))
                {
                    _encoding = value;
                    OnPropertyChanged(nameof(Encoding));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _displayTheYear = true;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("DisplayTheYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DisplayTheYear
        {
            get
            {
                return _displayTheYear;
            }
            set
            {
                if (!_displayTheYear.Equals(value))
                {
                    _displayTheYear = value;
                    OnPropertyChanged(nameof(DisplayTheYear));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeDateEncoding", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeDateEncoding
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("DPT 11")]
        DPT_11,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeIPAddress", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypeIPAddress : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeIPAddressAddressType _addressType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("AddressType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeIPAddressAddressType AddressType
        {
            get
            {
                return _addressType;
            }
            set
            {
                if (!_addressType.Equals(value))
                {
                    _addressType = value;
                    OnPropertyChanged(nameof(AddressType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterType_TTypeIPAddressVersion _version = ParameterType_TTypeIPAddressVersion.IPv4;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ParameterType_TTypeIPAddressVersion.IPv4)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Version", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterType_TTypeIPAddressVersion Version
        {
            get
            {
                return _version;
            }
            set
            {
                if (!_version.Equals(value))
                {
                    _version = value;
                    OnPropertyChanged(nameof(Version));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeIPAddressAddressType", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeIPAddressAddressType
    {
        
        /// <summary>
        /// </summary>
        HostAddress,
        
        /// <summary>
        /// </summary>
        GatewayAddress,
        
        /// <summary>
        /// </summary>
        UnicastAddress,
        
        /// <summary>
        /// </summary>
        BroadcastAddress,
        
        /// <summary>
        /// </summary>
        MulticastAddress,
        
        /// <summary>
        /// </summary>
        SubnetMask,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypeIPAddressVersion", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterType_TTypeIPAddressVersion
    {
        
        /// <summary>
        /// </summary>
        IPv4,
        
        /// <summary>
        /// </summary>
        IPv6,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterType_TTypePicture", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterType_TTypePicture : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private HorizontalAlignment_T _horizontalAlignment;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("HorizontalAlignment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public HorizontalAlignment_T HorizontalAlignmentValue
        {
            get
            {
                return _horizontalAlignment;
            }
            set
            {
                if (!_horizontalAlignment.Equals(value))
                {
                    _horizontalAlignment = value;
                    OnPropertyChanged(nameof(HorizontalAlignmentValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HorizontalAlignment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HorizontalAlignment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HorizontalAlignmentValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<HorizontalAlignment_T> HorizontalAlignment
        {
            get
            {
                if (this.HorizontalAlignmentValueSpecified)
                {
                    return this.HorizontalAlignmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.HorizontalAlignmentValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.HorizontalAlignmentValue = value.GetValueOrDefault();
                    this.HorizontalAlignmentValueSpecified = value.HasValue;
                    OnPropertyChanged("HorizontalAlignment");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Parameter_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parameter_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Parameter_TMemory _memory;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Memory", Namespace="http://knx.org/xml/project/11")]
        public Parameter_TMemory Memory
        {
            get
            {
                return _memory;
            }
            set
            {
                if (_memory == value)
                    return;
                if (_memory == null || value == null || !_memory.Equals(value))
                {
                    _memory = value;
                    OnPropertyChanged(nameof(Memory));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Parameter_TProperty _property;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Property", Namespace="http://knx.org/xml/project/11")]
        public Parameter_TProperty Property
        {
            get
            {
                return _property;
            }
            set
            {
                if (_property == value)
                    return;
                if (_property == null || value == null || !_property.Equals(value))
                {
                    _property = value;
                    OnPropertyChanged(nameof(Property));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyPatchAlways = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyPatchAlways", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyPatchAlways
        {
            get
            {
                return _legacyPatchAlways;
            }
            set
            {
                if (!_legacyPatchAlways.Equals(value))
                {
                    _legacyPatchAlways = value;
                    OnPropertyChanged(nameof(LegacyPatchAlways));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _parameterType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParameterType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParameterType
        {
            get
            {
                return _parameterType;
            }
            set
            {
                if (_parameterType == value)
                    return;
                if (_parameterType == null || value == null || !_parameterType.Equals(value))
                {
                    _parameterType = value;
                    OnPropertyChanged(nameof(ParameterType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _suffixText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("SuffixText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SuffixText
        {
            get
            {
                return _suffixText;
            }
            set
            {
                if (_suffixText == value)
                    return;
                if (_suffixText == null || value == null || !_suffixText.Equals(value))
                {
                    _suffixText = value;
                    OnPropertyChanged(nameof(SuffixText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Access_T _access = Access_T.ReadWrite;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Access_T.ReadWrite)]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Access_T Access
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Parameter_TMemory", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parameter_TMemory : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _bitOffset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "7")]
        [System.Xml.Serialization.XmlAttributeAttribute("BitOffset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte BitOffset
        {
            get
            {
                return _bitOffset;
            }
            set
            {
                if (!_bitOffset.Equals(value))
                {
                    _bitOffset = value;
                    OnPropertyChanged(nameof(BitOffset));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Parameter_TProperty", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parameter_TProperty : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objectIndex;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectIndex", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjectIndexValue
        {
            get
            {
                return _objectIndex;
            }
            set
            {
                if (!_objectIndex.Equals(value))
                {
                    _objectIndex = value;
                    OnPropertyChanged(nameof(ObjectIndexValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectIndex-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectIndex property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectIndexValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjectIndex
        {
            get
            {
                if (this.ObjectIndexValueSpecified)
                {
                    return this.ObjectIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectIndexValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectIndexValue = value.GetValueOrDefault();
                    this.ObjectIndexValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectIndex");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objectType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjectTypeValue
        {
            get
            {
                return _objectType;
            }
            set
            {
                if (!_objectType.Equals(value))
                {
                    _objectType = value;
                    OnPropertyChanged(nameof(ObjectTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjectType
        {
            get
            {
                if (this.ObjectTypeValueSpecified)
                {
                    return this.ObjectTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectTypeValue = value.GetValueOrDefault();
                    this.ObjectTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propertyId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropertyId
        {
            get
            {
                return _propertyId;
            }
            set
            {
                if (!_propertyId.Equals(value))
                {
                    _propertyId = value;
                    OnPropertyChanged(nameof(PropertyId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _bitOffset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "7")]
        [System.Xml.Serialization.XmlAttributeAttribute("BitOffset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte BitOffset
        {
            get
            {
                return _bitOffset;
            }
            set
            {
                if (!_bitOffset.Equals(value))
                {
                    _bitOffset = value;
                    OnPropertyChanged(nameof(BitOffset));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TParametersUnion", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TParametersUnion : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TParametersUnionMemory _memory;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Memory", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TParametersUnionMemory Memory
        {
            get
            {
                return _memory;
            }
            set
            {
                if (_memory == value)
                    return;
                if (_memory == null || value == null || !_memory.Equals(value))
                {
                    _memory = value;
                    OnPropertyChanged(nameof(Memory));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TParametersUnionProperty _property;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Property", Namespace="http://knx.org/xml/project/11")]
        public ApplicationProgramStatic_TParametersUnionProperty Property
        {
            get
            {
                return _property;
            }
            set
            {
                if (_property == value)
                    return;
                if (_property == null || value == null || !_property.Equals(value))
                {
                    _property = value;
                    OnPropertyChanged(nameof(Property));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<UnionParameter_T> _parameter;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("Parameter", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<UnionParameter_T> Parameter
        {
            get
            {
                return _parameter;
            }
            private set
            {
                if (_parameter == value)
                    return;
                if (_parameter == null || value == null || !_parameter.SequenceEqual(value))
                {
                    _parameter = value;
                    OnPropertyChanged(nameof(Parameter));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TParametersUnion" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TParametersUnion" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TParametersUnion()
        {
            this._parameter = new System.Collections.ObjectModel.ObservableCollection<UnionParameter_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _sizeInBit;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 8388600.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("SizeInBit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint SizeInBit
        {
            get
            {
                return _sizeInBit;
            }
            set
            {
                if (!_sizeInBit.Equals(value))
                {
                    _sizeInBit = value;
                    OnPropertyChanged(nameof(SizeInBit));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TParametersUnionMemory", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TParametersUnionMemory : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _bitOffset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "7")]
        [System.Xml.Serialization.XmlAttributeAttribute("BitOffset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte BitOffset
        {
            get
            {
                return _bitOffset;
            }
            set
            {
                if (!_bitOffset.Equals(value))
                {
                    _bitOffset = value;
                    OnPropertyChanged(nameof(BitOffset));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TParametersUnionProperty", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TParametersUnionProperty : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objectIndex;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectIndex", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjectIndexValue
        {
            get
            {
                return _objectIndex;
            }
            set
            {
                if (!_objectIndex.Equals(value))
                {
                    _objectIndex = value;
                    OnPropertyChanged(nameof(ObjectIndexValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectIndex-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectIndex property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectIndexValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjectIndex
        {
            get
            {
                if (this.ObjectIndexValueSpecified)
                {
                    return this.ObjectIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectIndexValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectIndexValue = value.GetValueOrDefault();
                    this.ObjectIndexValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectIndex");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objectType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjectTypeValue
        {
            get
            {
                return _objectType;
            }
            set
            {
                if (!_objectType.Equals(value))
                {
                    _objectType = value;
                    OnPropertyChanged(nameof(ObjectTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjectType
        {
            get
            {
                if (this.ObjectTypeValueSpecified)
                {
                    return this.ObjectTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectTypeValue = value.GetValueOrDefault();
                    this.ObjectTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propertyId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropertyId
        {
            get
            {
                return _propertyId;
            }
            set
            {
                if (!_propertyId.Equals(value))
                {
                    _propertyId = value;
                    OnPropertyChanged(nameof(PropertyId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _bitOffset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "7")]
        [System.Xml.Serialization.XmlAttributeAttribute("BitOffset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte BitOffset
        {
            get
            {
                return _bitOffset;
            }
            set
            {
                if (!_bitOffset.Equals(value))
                {
                    _bitOffset = value;
                    OnPropertyChanged(nameof(BitOffset));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UnionParameter_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnionParameter_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _parameterType;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParameterType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParameterType
        {
            get
            {
                return _parameterType;
            }
            set
            {
                if (_parameterType == value)
                    return;
                if (_parameterType == null || value == null || !_parameterType.Equals(value))
                {
                    _parameterType = value;
                    OnPropertyChanged(nameof(ParameterType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _bitOffset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "0", "7")]
        [System.Xml.Serialization.XmlAttributeAttribute("BitOffset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte BitOffset
        {
            get
            {
                return _bitOffset;
            }
            set
            {
                if (!_bitOffset.Equals(value))
                {
                    _bitOffset = value;
                    OnPropertyChanged(nameof(BitOffset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _suffixText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("SuffixText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SuffixText
        {
            get
            {
                return _suffixText;
            }
            set
            {
                if (_suffixText == value)
                    return;
                if (_suffixText == null || value == null || !_suffixText.Equals(value))
                {
                    _suffixText = value;
                    OnPropertyChanged(nameof(SuffixText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Access_T _access = Access_T.ReadWrite;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Access_T.ReadWrite)]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Access_T Access
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _defaultUnionParameter = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultUnionParameter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DefaultUnionParameter
        {
            get
            {
                return _defaultUnionParameter;
            }
            set
            {
                if (!_defaultUnionParameter.Equals(value))
                {
                    _defaultUnionParameter = value;
                    OnPropertyChanged(nameof(DefaultUnionParameter));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TComObjectTable", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TComObjectTable : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObject_T> _comObject;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("ComObject", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObject_T> ComObject
        {
            get
            {
                return _comObject;
            }
            private set
            {
                if (_comObject == value)
                    return;
                if (_comObject == null || value == null || !_comObject.SequenceEqual(value))
                {
                    _comObject = value;
                    OnPropertyChanged(nameof(ComObject));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObject-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObject collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectSpecified
        {
            get
            {
                return (this.ComObject.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TComObjectTable" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TComObjectTable" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TComObjectTable()
        {
            this._comObject = new System.Collections.ObjectModel.ObservableCollection<ComObject_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint OffsetValue
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(OffsetValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Offset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> Offset
        {
            get
            {
                if (this.OffsetValueSpecified)
                {
                    return this.OffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.OffsetValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.OffsetValue = value.GetValueOrDefault();
                    this.OffsetValueSpecified = value.HasValue;
                    OnPropertyChanged("Offset");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _suffixText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("SuffixText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SuffixText
        {
            get
            {
                return _suffixText;
            }
            set
            {
                if (_suffixText == value)
                    return;
                if (_suffixText == null || value == null || !_suffixText.Equals(value))
                {
                    _suffixText = value;
                    OnPropertyChanged(nameof(SuffixText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _tag;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Tag
        {
            get
            {
                return _tag;
            }
            set
            {
                if (_tag == value)
                    return;
                if (_tag == null || value == null || !_tag.Equals(value))
                {
                    _tag = value;
                    OnPropertyChanged(nameof(Tag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _displayOrder;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("DisplayOrder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int DisplayOrderValue
        {
            get
            {
                return _displayOrder;
            }
            set
            {
                if (!_displayOrder.Equals(value))
                {
                    _displayOrder = value;
                    OnPropertyChanged(nameof(DisplayOrderValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisplayOrder-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayOrder property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DisplayOrderValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DisplayOrder
        {
            get
            {
                if (this.DisplayOrderValueSpecified)
                {
                    return this.DisplayOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.DisplayOrderValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.DisplayOrderValue = value.GetValueOrDefault();
                    this.DisplayOrderValueSpecified = value.HasValue;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Access_T _access;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Access_T AccessValue
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(AccessValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Access-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Access property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AccessValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Access_T> Access
        {
            get
            {
                if (this.AccessValueSpecified)
                {
                    return this.AccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.AccessValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.AccessValue = value.GetValueOrDefault();
                    this.AccessValueSpecified = value.HasValue;
                    OnPropertyChanged("Access");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterCalculation_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterCalculation_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _rLTransformation;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("RLTransformation", Namespace="http://knx.org/xml/project/11")]
        public string RLTransformation
        {
            get
            {
                return _rLTransformation;
            }
            set
            {
                if (_rLTransformation == value)
                    return;
                if (_rLTransformation == null || value == null || !_rLTransformation.Equals(value))
                {
                    _rLTransformation = value;
                    OnPropertyChanged(nameof(RLTransformation));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _lRTransformation;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("LRTransformation", Namespace="http://knx.org/xml/project/11")]
        public string LRTransformation
        {
            get
            {
                return _lRTransformation;
            }
            set
            {
                if (_lRTransformation == value)
                    return;
                if (_lRTransformation == null || value == null || !_lRTransformation.Equals(value))
                {
                    _lRTransformation = value;
                    OnPropertyChanged(nameof(LRTransformation));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TLParametersParameterRefRef> _lParameters;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("LParameters", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TLParametersParameterRefRef> LParameters
        {
            get
            {
                return _lParameters;
            }
            private set
            {
                if (_lParameters == value)
                    return;
                if (_lParameters == null || value == null || !_lParameters.SequenceEqual(value))
                {
                    _lParameters = value;
                    OnPropertyChanged(nameof(LParameters));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ParameterCalculation_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ParameterCalculation_T" /> class.</para>
        /// </summary>
        public ParameterCalculation_T()
        {
            this._lParameters = new System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TLParametersParameterRefRef>();
            this._rParameters = new System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TRParametersParameterRefRef>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TRParametersParameterRefRef> _rParameters;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("RParameters", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterCalculation_TRParametersParameterRefRef> RParameters
        {
            get
            {
                return _rParameters;
            }
            private set
            {
                if (_rParameters == value)
                    return;
                if (_rParameters == null || value == null || !_rParameters.SequenceEqual(value))
                {
                    _rParameters = value;
                    OnPropertyChanged(nameof(RParameters));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ParameterCalculation_TLanguage _language;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Language", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ParameterCalculation_TLanguage Language
        {
            get
            {
                return _language;
            }
            set
            {
                if (!_language.Equals(value))
                {
                    _language = value;
                    OnPropertyChanged(nameof(Language));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterCalculation_TLanguage", Namespace="http://knx.org/xml/project/11")]
    public enum ParameterCalculation_TLanguage
    {
        
        /// <summary>
        /// </summary>
        VBScript,
        
        /// <summary>
        /// </summary>
        JavaScript,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterCalculation_TLParametersParameterRefRef", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterCalculation_TLParametersParameterRefRef : ParameterRefRef_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _aliasName;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("AliasName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasName
        {
            get
            {
                return _aliasName;
            }
            set
            {
                if (_aliasName == value)
                    return;
                if (_aliasName == null || value == null || !_aliasName.Equals(value))
                {
                    _aliasName = value;
                    OnPropertyChanged(nameof(AliasName));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterRefRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterCalculation_TLParametersParameterRefRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterCalculation_TRParametersParameterRefRef))]
    public partial class ParameterRefRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterCalculation_TRParametersParameterRefRef", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterCalculation_TRParametersParameterRefRef : ParameterRefRef_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _aliasName;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("AliasName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasName
        {
            get
            {
                return _aliasName;
            }
            set
            {
                if (_aliasName == value)
                    return;
                if (_aliasName == null || value == null || !_aliasName.Equals(value))
                {
                    _aliasName = value;
                    OnPropertyChanged(nameof(AliasName));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObject_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObject_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _number;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (!_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _functionText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("FunctionText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FunctionText
        {
            get
            {
                return _functionText;
            }
            set
            {
                if (_functionText == value)
                    return;
                if (_functionText == null || value == null || !_functionText.Equals(value))
                {
                    _functionText = value;
                    OnPropertyChanged(nameof(FunctionText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectPriority_T _priority = ComObjectPriority_T.Low;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ComObjectPriority_T.Low)]
        [System.Xml.Serialization.XmlAttributeAttribute("Priority", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComObjectPriority_T Priority
        {
            get
            {
                return _priority;
            }
            set
            {
                if (!_priority.Equals(value))
                {
                    _priority = value;
                    OnPropertyChanged(nameof(Priority));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectSize_T _objectSize;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectSize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComObjectSize_T ObjectSize
        {
            get
            {
                return _objectSize;
            }
            set
            {
                if (!_objectSize.Equals(value))
                {
                    _objectSize = value;
                    OnPropertyChanged(nameof(ObjectSize));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ReadFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadFlag
        {
            get
            {
                return _readFlag;
            }
            set
            {
                if (!_readFlag.Equals(value))
                {
                    _readFlag = value;
                    OnPropertyChanged(nameof(ReadFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _writeFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("WriteFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T WriteFlag
        {
            get
            {
                return _writeFlag;
            }
            set
            {
                if (!_writeFlag.Equals(value))
                {
                    _writeFlag = value;
                    OnPropertyChanged(nameof(WriteFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _communicationFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("CommunicationFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T CommunicationFlag
        {
            get
            {
                return _communicationFlag;
            }
            set
            {
                if (!_communicationFlag.Equals(value))
                {
                    _communicationFlag = value;
                    OnPropertyChanged(nameof(CommunicationFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _transmitFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("TransmitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T TransmitFlag
        {
            get
            {
                return _transmitFlag;
            }
            set
            {
                if (!_transmitFlag.Equals(value))
                {
                    _transmitFlag = value;
                    OnPropertyChanged(nameof(TransmitFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _updateFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("UpdateFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T UpdateFlag
        {
            get
            {
                return _updateFlag;
            }
            set
            {
                if (!_updateFlag.Equals(value))
                {
                    _updateFlag = value;
                    OnPropertyChanged(nameof(UpdateFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readOnInitFlag;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ReadOnInitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadOnInitFlag
        {
            get
            {
                return _readOnInitFlag;
            }
            set
            {
                if (!_readOnInitFlag.Equals(value))
                {
                    _readOnInitFlag = value;
                    OnPropertyChanged(nameof(ReadOnInitFlag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _datapointType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DatapointType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> DatapointType
        {
            get
            {
                return _datapointType;
            }
            private set
            {
                if (_datapointType == value)
                    return;
                if (_datapointType == null || value == null || !_datapointType.Equals(value))
                {
                    _datapointType = value;
                    OnPropertyChanged(nameof(DatapointType));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointTypeSpecified
        {
            get
            {
                return (this.DatapointType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObject_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObject_T" /> class.</para>
        /// </summary>
        public ComObject_T()
        {
            this._datapointType = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TAddressTable", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TAddressTable : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint OffsetValue
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(OffsetValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Offset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> Offset
        {
            get
            {
                if (this.OffsetValueSpecified)
                {
                    return this.OffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.OffsetValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.OffsetValue = value.GetValueOrDefault();
                    this.OffsetValueSpecified = value.HasValue;
                    OnPropertyChanged("Offset");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _maxEntries;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MaxEntries", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint MaxEntries
        {
            get
            {
                return _maxEntries;
            }
            set
            {
                if (!_maxEntries.Equals(value))
                {
                    _maxEntries = value;
                    OnPropertyChanged(nameof(MaxEntries));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _tag;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Tag
        {
            get
            {
                return _tag;
            }
            set
            {
                if (_tag == value)
                    return;
                if (_tag == null || value == null || !_tag.Equals(value))
                {
                    _tag = value;
                    OnPropertyChanged(nameof(Tag));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _functionText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("FunctionText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FunctionText
        {
            get
            {
                return _functionText;
            }
            set
            {
                if (_functionText == value)
                    return;
                if (_functionText == null || value == null || !_functionText.Equals(value))
                {
                    _functionText = value;
                    OnPropertyChanged(nameof(FunctionText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectPriority_T _priority;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Priority", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComObjectPriority_T PriorityValue
        {
            get
            {
                return _priority;
            }
            set
            {
                if (!_priority.Equals(value))
                {
                    _priority = value;
                    OnPropertyChanged(nameof(PriorityValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Priority-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Priority property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PriorityValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ComObjectPriority_T> Priority
        {
            get
            {
                if (this.PriorityValueSpecified)
                {
                    return this.PriorityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.PriorityValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.PriorityValue = value.GetValueOrDefault();
                    this.PriorityValueSpecified = value.HasValue;
                    OnPropertyChanged("Priority");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectSize_T _objectSize;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectSize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComObjectSize_T ObjectSizeValue
        {
            get
            {
                return _objectSize;
            }
            set
            {
                if (!_objectSize.Equals(value))
                {
                    _objectSize = value;
                    OnPropertyChanged(nameof(ObjectSizeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ComObjectSize_T> ObjectSize
        {
            get
            {
                if (this.ObjectSizeValueSpecified)
                {
                    return this.ObjectSizeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectSizeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectSizeValue = value.GetValueOrDefault();
                    this.ObjectSizeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectSize");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadFlagValue
        {
            get
            {
                return _readFlag;
            }
            set
            {
                if (!_readFlag.Equals(value))
                {
                    _readFlag = value;
                    OnPropertyChanged(nameof(ReadFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReadFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReadFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReadFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> ReadFlag
        {
            get
            {
                if (this.ReadFlagValueSpecified)
                {
                    return this.ReadFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReadFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReadFlagValue = value.GetValueOrDefault();
                    this.ReadFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("ReadFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _writeFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("WriteFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T WriteFlagValue
        {
            get
            {
                return _writeFlag;
            }
            set
            {
                if (!_writeFlag.Equals(value))
                {
                    _writeFlag = value;
                    OnPropertyChanged(nameof(WriteFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WriteFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WriteFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WriteFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> WriteFlag
        {
            get
            {
                if (this.WriteFlagValueSpecified)
                {
                    return this.WriteFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.WriteFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.WriteFlagValue = value.GetValueOrDefault();
                    this.WriteFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("WriteFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _communicationFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CommunicationFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T CommunicationFlagValue
        {
            get
            {
                return _communicationFlag;
            }
            set
            {
                if (!_communicationFlag.Equals(value))
                {
                    _communicationFlag = value;
                    OnPropertyChanged(nameof(CommunicationFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CommunicationFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommunicationFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CommunicationFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> CommunicationFlag
        {
            get
            {
                if (this.CommunicationFlagValueSpecified)
                {
                    return this.CommunicationFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CommunicationFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CommunicationFlagValue = value.GetValueOrDefault();
                    this.CommunicationFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("CommunicationFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _transmitFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("TransmitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T TransmitFlagValue
        {
            get
            {
                return _transmitFlag;
            }
            set
            {
                if (!_transmitFlag.Equals(value))
                {
                    _transmitFlag = value;
                    OnPropertyChanged(nameof(TransmitFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TransmitFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransmitFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TransmitFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> TransmitFlag
        {
            get
            {
                if (this.TransmitFlagValueSpecified)
                {
                    return this.TransmitFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.TransmitFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.TransmitFlagValue = value.GetValueOrDefault();
                    this.TransmitFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("TransmitFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _updateFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("UpdateFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T UpdateFlagValue
        {
            get
            {
                return _updateFlag;
            }
            set
            {
                if (!_updateFlag.Equals(value))
                {
                    _updateFlag = value;
                    OnPropertyChanged(nameof(UpdateFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UpdateFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpdateFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UpdateFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> UpdateFlag
        {
            get
            {
                if (this.UpdateFlagValueSpecified)
                {
                    return this.UpdateFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.UpdateFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.UpdateFlagValue = value.GetValueOrDefault();
                    this.UpdateFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("UpdateFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readOnInitFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadOnInitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadOnInitFlagValue
        {
            get
            {
                return _readOnInitFlag;
            }
            set
            {
                if (!_readOnInitFlag.Equals(value))
                {
                    _readOnInitFlag = value;
                    OnPropertyChanged(nameof(ReadOnInitFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReadOnInitFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReadOnInitFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReadOnInitFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> ReadOnInitFlag
        {
            get
            {
                if (this.ReadOnInitFlagValueSpecified)
                {
                    return this.ReadOnInitFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReadOnInitFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReadOnInitFlagValue = value.GetValueOrDefault();
                    this.ReadOnInitFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("ReadOnInitFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _datapointType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DatapointType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> DatapointType
        {
            get
            {
                return _datapointType;
            }
            private set
            {
                if (_datapointType == value)
                    return;
                if (_datapointType == null || value == null || !_datapointType.Equals(value))
                {
                    _datapointType = value;
                    OnPropertyChanged(nameof(DatapointType));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointTypeSpecified
        {
            get
            {
                return (this.DatapointType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectRef_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectRef_T" /> class.</para>
        /// </summary>
        public ComObjectRef_T()
        {
            this._datapointType = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TAssociationTable", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TAssociationTable : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint OffsetValue
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(OffsetValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Offset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> Offset
        {
            get
            {
                if (this.OffsetValueSpecified)
                {
                    return this.OffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.OffsetValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.OffsetValue = value.GetValueOrDefault();
                    this.OffsetValueSpecified = value.HasValue;
                    OnPropertyChanged("Offset");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _maxEntries;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("MaxEntries", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint MaxEntries
        {
            get
            {
                return _maxEntries;
            }
            set
            {
                if (!_maxEntries.Equals(value))
                {
                    _maxEntries = value;
                    OnPropertyChanged(nameof(MaxEntries));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TExtension", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TExtension : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TExtensionBaggage> _baggage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Baggage", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TExtensionBaggage> Baggage
        {
            get
            {
                return _baggage;
            }
            private set
            {
                if (_baggage == value)
                    return;
                if (_baggage == null || value == null || !_baggage.SequenceEqual(value))
                {
                    _baggage = value;
                    OnPropertyChanged(nameof(Baggage));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Baggage-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Baggage collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BaggageSpecified
        {
            get
            {
                return (this.Baggage.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TExtension" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TExtension" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TExtension()
        {
            this._baggage = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TExtensionBaggage>();
            this._etsDataHandlerCapabilities = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _etsDownloadPlugin;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("EtsDownloadPlugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EtsDownloadPlugin
        {
            get
            {
                return _etsDownloadPlugin;
            }
            set
            {
                if (_etsDownloadPlugin == value)
                    return;
                if (_etsDownloadPlugin == null || value == null || !_etsDownloadPlugin.Equals(value))
                {
                    _etsDownloadPlugin = value;
                    OnPropertyChanged(nameof(EtsDownloadPlugin));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _etsUiPlugin;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("EtsUiPlugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EtsUiPlugin
        {
            get
            {
                return _etsUiPlugin;
            }
            set
            {
                if (_etsUiPlugin == value)
                    return;
                if (_etsUiPlugin == null || value == null || !_etsUiPlugin.Equals(value))
                {
                    _etsUiPlugin = value;
                    OnPropertyChanged(nameof(EtsUiPlugin));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _etsDataHandler;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("EtsDataHandler", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EtsDataHandler
        {
            get
            {
                return _etsDataHandler;
            }
            set
            {
                if (_etsDataHandler == value)
                    return;
                if (_etsDataHandler == null || value == null || !_etsDataHandler.Equals(value))
                {
                    _etsDataHandler = value;
                    OnPropertyChanged(nameof(EtsDataHandler));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _etsDataHandlerCapabilities;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("EtsDataHandlerCapabilities", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> EtsDataHandlerCapabilities
        {
            get
            {
                return _etsDataHandlerCapabilities;
            }
            private set
            {
                if (_etsDataHandlerCapabilities == value)
                    return;
                if (_etsDataHandlerCapabilities == null || value == null || !_etsDataHandlerCapabilities.Equals(value))
                {
                    _etsDataHandlerCapabilities = value;
                    OnPropertyChanged(nameof(EtsDataHandlerCapabilities));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EtsDataHandlerCapabilities-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EtsDataHandlerCapabilities collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EtsDataHandlerCapabilitiesSpecified
        {
            get
            {
                return (this.EtsDataHandlerCapabilities.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _requiresExternalSoftware = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("RequiresExternalSoftware", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool RequiresExternalSoftware
        {
            get
            {
                return _requiresExternalSoftware;
            }
            set
            {
                if (!_requiresExternalSoftware.Equals(value))
                {
                    _requiresExternalSoftware = value;
                    OnPropertyChanged(nameof(RequiresExternalSoftware));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Fixup_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fixup_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<uint> _offset;
        
        /// <summary>
        /// <para>registration-relevant set</para>
        /// <para xml:lang="en">Maximum inclusive value: 65535.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant set")]
        [System.Xml.Serialization.XmlElementAttribute("Offset", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<uint> Offset
        {
            get
            {
                return _offset;
            }
            private set
            {
                if (_offset == value)
                    return;
                if (_offset == null || value == null || !_offset.SequenceEqual(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Fixup_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Fixup_T" /> class.</para>
        /// </summary>
        public Fixup_T()
        {
            this._offset = new System.Collections.ObjectModel.ObservableCollection<uint>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _functionRef;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("FunctionRef", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FunctionRef
        {
            get
            {
                return _functionRef;
            }
            set
            {
                if (_functionRef == value)
                    return;
                if (_functionRef == null || value == null || !_functionRef.Equals(value))
                {
                    _functionRef = value;
                    OnPropertyChanged(nameof(FunctionRef));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LoadProcedures_TLoadProcedure", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProcedures_TLoadProcedure : LoadProcedure_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _mergeId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("MergeId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte MergeIdValue
        {
            get
            {
                return _mergeId;
            }
            set
            {
                if (!_mergeId.Equals(value))
                {
                    _mergeId = value;
                    OnPropertyChanged(nameof(MergeIdValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MergeId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MergeId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MergeIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> MergeId
        {
            get
            {
                if (this.MergeIdValueSpecified)
                {
                    return this.MergeIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.MergeIdValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.MergeIdValue = value.GetValueOrDefault();
                    this.MergeIdValueSpecified = value.HasValue;
                    OnPropertyChanged("MergeId");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TExtensionBaggage", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TExtensionBaggage : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TDeviceCompare", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TDeviceCompare : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeMemory> _excludeMemory;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ExcludeMemory", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeMemory> ExcludeMemory
        {
            get
            {
                return _excludeMemory;
            }
            private set
            {
                if (_excludeMemory == value)
                    return;
                if (_excludeMemory == null || value == null || !_excludeMemory.SequenceEqual(value))
                {
                    _excludeMemory = value;
                    OnPropertyChanged(nameof(ExcludeMemory));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExcludeMemory-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ExcludeMemory collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludeMemorySpecified
        {
            get
            {
                return (this.ExcludeMemory.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramStatic_TDeviceCompare" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramStatic_TDeviceCompare" /> class.</para>
        /// </summary>
        public ApplicationProgramStatic_TDeviceCompare()
        {
            this._excludeMemory = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeMemory>();
            this._excludeProperty = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeProperty>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeProperty> _excludeProperty;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ExcludeProperty", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramStatic_TDeviceCompareExcludeProperty> ExcludeProperty
        {
            get
            {
                return _excludeProperty;
            }
            private set
            {
                if (_excludeProperty == value)
                    return;
                if (_excludeProperty == null || value == null || !_excludeProperty.SequenceEqual(value))
                {
                    _excludeProperty = value;
                    OnPropertyChanged(nameof(ExcludeProperty));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExcludeProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ExcludeProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludePropertySpecified
        {
            get
            {
                return (this.ExcludeProperty.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComTableExpectation_T _standardComTablesExpectable = ComTableExpectation_T.Try;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ComTableExpectation_T.Try)]
        [System.Xml.Serialization.XmlAttributeAttribute("StandardComTablesExpectable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComTableExpectation_T StandardComTablesExpectable
        {
            get
            {
                return _standardComTablesExpectable;
            }
            set
            {
                if (!_standardComTablesExpectable.Equals(value))
                {
                    _standardComTablesExpectable = value;
                    OnPropertyChanged(nameof(StandardComTablesExpectable));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BinaryData_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BinaryData_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TDeviceCompareExcludeMemory", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TDeviceCompareExcludeMemory : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _codeSegment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("CodeSegment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CodeSegment
        {
            get
            {
                return _codeSegment;
            }
            set
            {
                if (_codeSegment == value)
                    return;
                if (_codeSegment == null || value == null || !_codeSegment.Equals(value))
                {
                    _codeSegment = value;
                    OnPropertyChanged(nameof(CodeSegment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TDeviceCompareExcludeProperty", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TDeviceCompareExcludeProperty : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _objectIndex;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectIndex", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte ObjectIndexValue
        {
            get
            {
                return _objectIndex;
            }
            set
            {
                if (!_objectIndex.Equals(value))
                {
                    _objectIndex = value;
                    OnPropertyChanged(nameof(ObjectIndexValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectIndex-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectIndex property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectIndexValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<byte> ObjectIndex
        {
            get
            {
                if (this.ObjectIndexValueSpecified)
                {
                    return this.ObjectIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectIndexValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectIndexValue = value.GetValueOrDefault();
                    this.ObjectIndexValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectIndex");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _objectType;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ObjectTypeValue
        {
            get
            {
                return _objectType;
            }
            set
            {
                if (!_objectType.Equals(value))
                {
                    _objectType = value;
                    OnPropertyChanged(nameof(ObjectTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ObjectType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ObjectTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ObjectType
        {
            get
            {
                if (this.ObjectTypeValueSpecified)
                {
                    return this.ObjectTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ObjectTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ObjectTypeValue = value.GetValueOrDefault();
                    this.ObjectTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ObjectType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _occurrence = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("Occurrence", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Occurrence
        {
            get
            {
                return _occurrence;
            }
            set
            {
                if (!_occurrence.Equals(value))
                {
                    _occurrence = value;
                    OnPropertyChanged(nameof(Occurrence));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _propertyId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("PropertyId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte PropertyId
        {
            get
            {
                return _propertyId;
            }
            set
            {
                if (!_propertyId.Equals(value))
                {
                    _propertyId = value;
                    OnPropertyChanged(nameof(PropertyId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _offset;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Offset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                if (!_offset.Equals(value))
                {
                    _offset = value;
                    OnPropertyChanged(nameof(Offset));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _size;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 1048575.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Size", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Size
        {
            get
            {
                return _size;
            }
            set
            {
                if (!_size.Equals(value))
                {
                    _size = value;
                    OnPropertyChanged(nameof(Size));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TOptions", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramStatic_TOptions : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _preferPartialDownloadIfApplicationLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("PreferPartialDownloadIfApplicationLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool PreferPartialDownloadIfApplicationLoaded
        {
            get
            {
                return _preferPartialDownloadIfApplicationLoaded;
            }
            set
            {
                if (!_preferPartialDownloadIfApplicationLoaded.Equals(value))
                {
                    _preferPartialDownloadIfApplicationLoaded = value;
                    OnPropertyChanged(nameof(PreferPartialDownloadIfApplicationLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _easyCtrlModeModeStyleEmptyGroupComTables = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("EasyCtrlModeModeStyleEmptyGroupComTables", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool EasyCtrlModeModeStyleEmptyGroupComTables
        {
            get
            {
                return _easyCtrlModeModeStyleEmptyGroupComTables;
            }
            set
            {
                if (!_easyCtrlModeModeStyleEmptyGroupComTables.Equals(value))
                {
                    _easyCtrlModeModeStyleEmptyGroupComTables = value;
                    OnPropertyChanged(nameof(EasyCtrlModeModeStyleEmptyGroupComTables));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _setObjectTableLengthAlwaysToOne = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("SetObjectTableLengthAlwaysToOne", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SetObjectTableLengthAlwaysToOne
        {
            get
            {
                return _setObjectTableLengthAlwaysToOne;
            }
            set
            {
                if (!_setObjectTableLengthAlwaysToOne.Equals(value))
                {
                    _setObjectTableLengthAlwaysToOne = value;
                    OnPropertyChanged(nameof(SetObjectTableLengthAlwaysToOne));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private TextEncoding_T _textParameterEncoding;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("TextParameterEncoding", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextEncoding_T TextParameterEncodingValue
        {
            get
            {
                return _textParameterEncoding;
            }
            set
            {
                if (!_textParameterEncoding.Equals(value))
                {
                    _textParameterEncoding = value;
                    OnPropertyChanged(nameof(TextParameterEncodingValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TextParameterEncoding-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TextParameterEncoding property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TextParameterEncodingValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<TextEncoding_T> TextParameterEncoding
        {
            get
            {
                if (this.TextParameterEncodingValueSpecified)
                {
                    return this.TextParameterEncodingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.TextParameterEncodingValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.TextParameterEncodingValue = value.GetValueOrDefault();
                    this.TextParameterEncodingValueSpecified = value.HasValue;
                    OnPropertyChanged("TextParameterEncoding");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TOptionsTextParameterEncodingSelector _textParameterEncodingSelector = ApplicationProgramStatic_TOptionsTextParameterEncodingSelector.UseTextParameterEncodingCodePage;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ApplicationProgramStatic_TOptionsTextParameterEncodingSelector.UseTextParameterEncodingCodePage)]
        [System.Xml.Serialization.XmlAttributeAttribute("TextParameterEncodingSelector", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ApplicationProgramStatic_TOptionsTextParameterEncodingSelector TextParameterEncodingSelector
        {
            get
            {
                return _textParameterEncodingSelector;
            }
            set
            {
                if (!_textParameterEncodingSelector.Equals(value))
                {
                    _textParameterEncodingSelector = value;
                    OnPropertyChanged(nameof(TextParameterEncodingSelector));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _textParameterZeroTerminate = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("TextParameterZeroTerminate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool TextParameterZeroTerminate
        {
            get
            {
                return _textParameterZeroTerminate;
            }
            set
            {
                if (!_textParameterZeroTerminate.Equals(value))
                {
                    _textParameterZeroTerminate = value;
                    OnPropertyChanged(nameof(TextParameterZeroTerminate));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ApplicationProgramStatic_TOptionsParameterByteOrder _parameterByteOrder = ApplicationProgramStatic_TOptionsParameterByteOrder.BigEndian;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ApplicationProgramStatic_TOptionsParameterByteOrder.BigEndian)]
        [System.Xml.Serialization.XmlAttributeAttribute("ParameterByteOrder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ApplicationProgramStatic_TOptionsParameterByteOrder ParameterByteOrder
        {
            get
            {
                return _parameterByteOrder;
            }
            set
            {
                if (!_parameterByteOrder.Equals(value))
                {
                    _parameterByteOrder = value;
                    OnPropertyChanged(nameof(ParameterByteOrder));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _partialDownloadOnlyVisibleParameters = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("PartialDownloadOnlyVisibleParameters", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool PartialDownloadOnlyVisibleParameters
        {
            get
            {
                return _partialDownloadOnlyVisibleParameters;
            }
            set
            {
                if (!_partialDownloadOnlyVisibleParameters.Equals(value))
                {
                    _partialDownloadOnlyVisibleParameters = value;
                    OnPropertyChanged(nameof(PartialDownloadOnlyVisibleParameters));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyNoPartialDownload = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyNoPartialDownload", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyNoPartialDownload
        {
            get
            {
                return _legacyNoPartialDownload;
            }
            set
            {
                if (!_legacyNoPartialDownload.Equals(value))
                {
                    _legacyNoPartialDownload = value;
                    OnPropertyChanged(nameof(LegacyNoPartialDownload));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyNoMemoryVerifyMode = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyNoMemoryVerifyMode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyNoMemoryVerifyMode
        {
            get
            {
                return _legacyNoMemoryVerifyMode;
            }
            set
            {
                if (!_legacyNoMemoryVerifyMode.Equals(value))
                {
                    _legacyNoMemoryVerifyMode = value;
                    OnPropertyChanged(nameof(LegacyNoMemoryVerifyMode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyNoOptimisticWrite = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyNoOptimisticWrite", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyNoOptimisticWrite
        {
            get
            {
                return _legacyNoOptimisticWrite;
            }
            set
            {
                if (!_legacyNoOptimisticWrite.Equals(value))
                {
                    _legacyNoOptimisticWrite = value;
                    OnPropertyChanged(nameof(LegacyNoOptimisticWrite));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyDoNotReportPropertyWriteErrors = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyDoNotReportPropertyWriteErrors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyDoNotReportPropertyWriteErrors
        {
            get
            {
                return _legacyDoNotReportPropertyWriteErrors;
            }
            set
            {
                if (!_legacyDoNotReportPropertyWriteErrors.Equals(value))
                {
                    _legacyDoNotReportPropertyWriteErrors = value;
                    OnPropertyChanged(nameof(LegacyDoNotReportPropertyWriteErrors));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyNoBackgroundDownload = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyNoBackgroundDownload", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyNoBackgroundDownload
        {
            get
            {
                return _legacyNoBackgroundDownload;
            }
            set
            {
                if (!_legacyNoBackgroundDownload.Equals(value))
                {
                    _legacyNoBackgroundDownload = value;
                    OnPropertyChanged(nameof(LegacyNoBackgroundDownload));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyDoNotCheckManufacturerId = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyDoNotCheckManufacturerId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyDoNotCheckManufacturerId
        {
            get
            {
                return _legacyDoNotCheckManufacturerId;
            }
            set
            {
                if (!_legacyDoNotCheckManufacturerId.Equals(value))
                {
                    _legacyDoNotCheckManufacturerId = value;
                    OnPropertyChanged(nameof(LegacyDoNotCheckManufacturerId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyAlwaysReloadAppIfCoVisibilityChanged = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyAlwaysReloadAppIfCoVisibilityChanged", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyAlwaysReloadAppIfCoVisibilityChanged
        {
            get
            {
                return _legacyAlwaysReloadAppIfCoVisibilityChanged;
            }
            set
            {
                if (!_legacyAlwaysReloadAppIfCoVisibilityChanged.Equals(value))
                {
                    _legacyAlwaysReloadAppIfCoVisibilityChanged = value;
                    OnPropertyChanged(nameof(LegacyAlwaysReloadAppIfCoVisibilityChanged));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyNeverReloadAppIfCoVisibilityChanged = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyNeverReloadAppIfCoVisibilityChanged", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyNeverReloadAppIfCoVisibilityChanged
        {
            get
            {
                return _legacyNeverReloadAppIfCoVisibilityChanged;
            }
            set
            {
                if (!_legacyNeverReloadAppIfCoVisibilityChanged.Equals(value))
                {
                    _legacyNeverReloadAppIfCoVisibilityChanged = value;
                    OnPropertyChanged(nameof(LegacyNeverReloadAppIfCoVisibilityChanged));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyDoNotSupportUndoDelete = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyDoNotSupportUndoDelete", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyDoNotSupportUndoDelete
        {
            get
            {
                return _legacyDoNotSupportUndoDelete;
            }
            set
            {
                if (!_legacyDoNotSupportUndoDelete.Equals(value))
                {
                    _legacyDoNotSupportUndoDelete = value;
                    OnPropertyChanged(nameof(LegacyDoNotSupportUndoDelete));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyAllowPartialDownloadIfAp2Mismatch = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyAllowPartialDownloadIfAp2Mismatch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyAllowPartialDownloadIfAp2Mismatch
        {
            get
            {
                return _legacyAllowPartialDownloadIfAp2Mismatch;
            }
            set
            {
                if (!_legacyAllowPartialDownloadIfAp2Mismatch.Equals(value))
                {
                    _legacyAllowPartialDownloadIfAp2Mismatch = value;
                    OnPropertyChanged(nameof(LegacyAllowPartialDownloadIfAp2Mismatch));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyKeepObjectTableGaps = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyKeepObjectTableGaps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyKeepObjectTableGaps
        {
            get
            {
                return _legacyKeepObjectTableGaps;
            }
            set
            {
                if (!_legacyKeepObjectTableGaps.Equals(value))
                {
                    _legacyKeepObjectTableGaps = value;
                    OnPropertyChanged(nameof(LegacyKeepObjectTableGaps));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _legacyProxyCommunicationObjects = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("LegacyProxyCommunicationObjects", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LegacyProxyCommunicationObjects
        {
            get
            {
                return _legacyProxyCommunicationObjects;
            }
            set
            {
                if (!_legacyProxyCommunicationObjects.Equals(value))
                {
                    _legacyProxyCommunicationObjects = value;
                    OnPropertyChanged(nameof(LegacyProxyCommunicationObjects));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _deviceInfoIgnoreRunState = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("DeviceInfoIgnoreRunState", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DeviceInfoIgnoreRunState
        {
            get
            {
                return _deviceInfoIgnoreRunState;
            }
            set
            {
                if (!_deviceInfoIgnoreRunState.Equals(value))
                {
                    _deviceInfoIgnoreRunState = value;
                    OnPropertyChanged(nameof(DeviceInfoIgnoreRunState));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _deviceInfoIgnoreLoadedState = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("DeviceInfoIgnoreLoadedState", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DeviceInfoIgnoreLoadedState
        {
            get
            {
                return _deviceInfoIgnoreLoadedState;
            }
            set
            {
                if (!_deviceInfoIgnoreLoadedState.Equals(value))
                {
                    _deviceInfoIgnoreLoadedState = value;
                    OnPropertyChanged(nameof(DeviceInfoIgnoreLoadedState));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _deviceCompareAllowCompatibleManufacturerId = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("DeviceCompareAllowCompatibleManufacturerId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DeviceCompareAllowCompatibleManufacturerId
        {
            get
            {
                return _deviceCompareAllowCompatibleManufacturerId;
            }
            set
            {
                if (!_deviceCompareAllowCompatibleManufacturerId.Equals(value))
                {
                    _deviceCompareAllowCompatibleManufacturerId = value;
                    OnPropertyChanged(nameof(DeviceCompareAllowCompatibleManufacturerId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _lineCoupler0912NewProgrammingStyle = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LineCoupler0912NewProgrammingStyle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LineCoupler0912NewProgrammingStyle
        {
            get
            {
                return _lineCoupler0912NewProgrammingStyle;
            }
            set
            {
                if (!_lineCoupler0912NewProgrammingStyle.Equals(value))
                {
                    _lineCoupler0912NewProgrammingStyle = value;
                    OnPropertyChanged(nameof(LineCoupler0912NewProgrammingStyle));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _comparable;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Comparable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ComparableValue
        {
            get
            {
                return _comparable;
            }
            set
            {
                if (!_comparable.Equals(value))
                {
                    _comparable = value;
                    OnPropertyChanged(nameof(ComparableValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Comparable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Comparable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ComparableValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Comparable
        {
            get
            {
                if (this.ComparableValueSpecified)
                {
                    return this.ComparableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ComparableValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ComparableValue = value.GetValueOrDefault();
                    this.ComparableValueSpecified = value.HasValue;
                    OnPropertyChanged("Comparable");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _reconstructable;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Reconstructable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ReconstructableValue
        {
            get
            {
                return _reconstructable;
            }
            set
            {
                if (!_reconstructable.Equals(value))
                {
                    _reconstructable = value;
                    OnPropertyChanged(nameof(ReconstructableValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reconstructable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Reconstructable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReconstructableValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Reconstructable
        {
            get
            {
                if (this.ReconstructableValueSpecified)
                {
                    return this.ReconstructableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReconstructableValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReconstructableValue = value.GetValueOrDefault();
                    this.ReconstructableValueSpecified = value.HasValue;
                    OnPropertyChanged("Reconstructable");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TOptionsTextParameterEncodingSelector", Namespace="http://knx.org/xml/project/11")]
    public enum ApplicationProgramStatic_TOptionsTextParameterEncodingSelector
    {
        
        /// <summary>
        /// </summary>
        UseWindowsAnsiCodePage,
        
        /// <summary>
        /// </summary>
        UseProjectCodePage,
        
        /// <summary>
        /// </summary>
        UseTextParameterEncodingCodePage,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramStatic_TOptionsParameterByteOrder", Namespace="http://knx.org/xml/project/11")]
    public enum ApplicationProgramStatic_TOptionsParameterByteOrder
    {
        
        /// <summary>
        /// </summary>
        BigEndian,
        
        /// <summary>
        /// </summary>
        LittleEndian,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramDynamic_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramDynamic_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramDynamic_TChannelIndependentBlock> _channelIndependentBlock;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ChannelIndependentBlock", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramDynamic_TChannelIndependentBlock> ChannelIndependentBlock
        {
            get
            {
                return _channelIndependentBlock;
            }
            private set
            {
                if (_channelIndependentBlock == value)
                    return;
                if (_channelIndependentBlock == null || value == null || !_channelIndependentBlock.SequenceEqual(value))
                {
                    _channelIndependentBlock = value;
                    OnPropertyChanged(nameof(ChannelIndependentBlock));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChannelIndependentBlock-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChannelIndependentBlock collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelIndependentBlockSpecified
        {
            get
            {
                return (this.ChannelIndependentBlock.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramDynamic_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramDynamic_T" /> class.</para>
        /// </summary>
        public ApplicationProgramDynamic_T()
        {
            this._channelIndependentBlock = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramDynamic_TChannelIndependentBlock>();
            this._channel = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T> _channel;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Channel", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T> Channel
        {
            get
            {
                return _channel;
            }
            private set
            {
                if (_channel == value)
                    return;
                if (_channel == null || value == null || !_channel.SequenceEqual(value))
                {
                    _channel = value;
                    OnPropertyChanged(nameof(Channel));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Channel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Channel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified
        {
            get
            {
                return (this.Channel.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramDynamic_TChannelIndependentBlock", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramDynamic_TChannelIndependentBlock : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> _parameterBlock;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlock", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> ParameterBlock
        {
            get
            {
                return _parameterBlock;
            }
            private set
            {
                if (_parameterBlock == value)
                    return;
                if (_parameterBlock == null || value == null || !_parameterBlock.SequenceEqual(value))
                {
                    _parameterBlock = value;
                    OnPropertyChanged(nameof(ParameterBlock));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlock-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlock collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockSpecified
        {
            get
            {
                return (this.ParameterBlock.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramDynamic_TChannelIndependentBlock" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramDynamic_TChannelIndependentBlock" /> class.</para>
        /// </summary>
        public ApplicationProgramDynamic_TChannelIndependentBlock()
        {
            this._parameterBlock = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T>();
            this._binaryDataRef = new System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T>();
            this._comObjectRefRef = new System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> _binaryDataRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BinaryDataRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> BinaryDataRef
        {
            get
            {
                return _binaryDataRef;
            }
            private set
            {
                if (_binaryDataRef == value)
                    return;
                if (_binaryDataRef == null || value == null || !_binaryDataRef.SequenceEqual(value))
                {
                    _binaryDataRef = value;
                    OnPropertyChanged(nameof(BinaryDataRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryDataRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryDataRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataRefSpecified
        {
            get
            {
                return (this.BinaryDataRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> _comObjectRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> ComObjectRefRef
        {
            get
            {
                return _comObjectRefRef;
            }
            private set
            {
                if (_comObjectRefRef == value)
                    return;
                if (_comObjectRefRef == null || value == null || !_comObjectRefRef.SequenceEqual(value))
                {
                    _comObjectRefRef = value;
                    OnPropertyChanged(nameof(ComObjectRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefRefSpecified
        {
            get
            {
                return (this.ComObjectRefRef.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectParameterBlock_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectParameterBlock_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T> _parameterSeparator;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterSeparator", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T> ParameterSeparator
        {
            get
            {
                return _parameterSeparator;
            }
            private set
            {
                if (_parameterSeparator == value)
                    return;
                if (_parameterSeparator == null || value == null || !_parameterSeparator.SequenceEqual(value))
                {
                    _parameterSeparator = value;
                    OnPropertyChanged(nameof(ParameterSeparator));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterSeparator-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterSeparator collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterSeparatorSpecified
        {
            get
            {
                return (this.ParameterSeparator.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectParameterBlock_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectParameterBlock_T" /> class.</para>
        /// </summary>
        public ComObjectParameterBlock_T()
        {
            this._parameterSeparator = new System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T>();
            this._parameterRefRef = new System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T>();
            this._binaryDataRef = new System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T>();
            this._comObjectRefRef = new System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T>();
            this._assign = new System.Collections.ObjectModel.ObservableCollection<Assign_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T> _parameterRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T> ParameterRefRef
        {
            get
            {
                return _parameterRefRef;
            }
            private set
            {
                if (_parameterRefRef == value)
                    return;
                if (_parameterRefRef == null || value == null || !_parameterRefRef.SequenceEqual(value))
                {
                    _parameterRefRef = value;
                    OnPropertyChanged(nameof(ParameterRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterRefRefSpecified
        {
            get
            {
                return (this.ParameterRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> _binaryDataRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BinaryDataRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> BinaryDataRef
        {
            get
            {
                return _binaryDataRef;
            }
            private set
            {
                if (_binaryDataRef == value)
                    return;
                if (_binaryDataRef == null || value == null || !_binaryDataRef.SequenceEqual(value))
                {
                    _binaryDataRef = value;
                    OnPropertyChanged(nameof(BinaryDataRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryDataRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryDataRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataRefSpecified
        {
            get
            {
                return (this.BinaryDataRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> _comObjectRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> ComObjectRefRef
        {
            get
            {
                return _comObjectRefRef;
            }
            private set
            {
                if (_comObjectRefRef == value)
                    return;
                if (_comObjectRefRef == null || value == null || !_comObjectRefRef.SequenceEqual(value))
                {
                    _comObjectRefRef = value;
                    OnPropertyChanged(nameof(ComObjectRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefRefSpecified
        {
            get
            {
                return (this.ComObjectRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Assign_T> _assign;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Assign", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Assign_T> Assign
        {
            get
            {
                return _assign;
            }
            private set
            {
                if (_assign == value)
                    return;
                if (_assign == null || value == null || !_assign.SequenceEqual(value))
                {
                    _assign = value;
                    OnPropertyChanged(nameof(Assign));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Assign-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Assign collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssignSpecified
        {
            get
            {
                return (this.Assign.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Access_T _access = Access_T.ReadWrite;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Access_T.ReadWrite)]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Access_T Access
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _helpTopic;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("HelpTopic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint HelpTopicValue
        {
            get
            {
                return _helpTopic;
            }
            set
            {
                if (!_helpTopic.Equals(value))
                {
                    _helpTopic = value;
                    OnPropertyChanged(nameof(HelpTopicValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HelpTopic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HelpTopic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HelpTopicValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<uint> HelpTopic
        {
            get
            {
                if (this.HelpTopicValueSpecified)
                {
                    return this.HelpTopicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.HelpTopicValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.HelpTopicValue = value.GetValueOrDefault();
                    this.HelpTopicValueSpecified = value.HasValue;
                    OnPropertyChanged("HelpTopic");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _internalDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("InternalDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InternalDescription
        {
            get
            {
                return _internalDescription;
            }
            set
            {
                if (_internalDescription == value)
                    return;
                if (_internalDescription == null || value == null || !_internalDescription.Equals(value))
                {
                    _internalDescription = value;
                    OnPropertyChanged(nameof(InternalDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _paramRefId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParamRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParamRefId
        {
            get
            {
                return _paramRefId;
            }
            set
            {
                if (_paramRefId == value)
                    return;
                if (_paramRefId == null || value == null || !_paramRefId.Equals(value))
                {
                    _paramRefId = value;
                    OnPropertyChanged(nameof(ParamRefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterSeparator_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterSeparator_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Access_T _access = Access_T.ReadWrite;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Access_T.ReadWrite)]
        [System.Xml.Serialization.XmlAttributeAttribute("Access", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Access_T Access
        {
            get
            {
                return _access;
            }
            set
            {
                if (!_access.Equals(value))
                {
                    _access = value;
                    OnPropertyChanged(nameof(Access));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectParameterChoose_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectParameterChoose_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_TWhen> _when;
        
        /// <summary>
        /// <para>registration-relevant list</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant list")]
        [System.Xml.Serialization.XmlElementAttribute("when", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_TWhen> When
        {
            get
            {
                return _when;
            }
            private set
            {
                if (_when == value)
                    return;
                if (_when == null || value == null || !_when.SequenceEqual(value))
                {
                    _when = value;
                    OnPropertyChanged(nameof(When));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectParameterChoose_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectParameterChoose_T" /> class.</para>
        /// </summary>
        public ComObjectParameterChoose_T()
        {
            this._when = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_TWhen>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _paramRefId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParamRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParamRefId
        {
            get
            {
                return _paramRefId;
            }
            set
            {
                if (_paramRefId == value)
                    return;
                if (_paramRefId == null || value == null || !_paramRefId.Equals(value))
                {
                    _paramRefId = value;
                    OnPropertyChanged(nameof(ParamRefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectParameterChoose_TWhen", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectParameterChoose_TWhen : When_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T> _parameterSeparator;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterSeparator", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T> ParameterSeparator
        {
            get
            {
                return _parameterSeparator;
            }
            private set
            {
                if (_parameterSeparator == value)
                    return;
                if (_parameterSeparator == null || value == null || !_parameterSeparator.SequenceEqual(value))
                {
                    _parameterSeparator = value;
                    OnPropertyChanged(nameof(ParameterSeparator));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterSeparator-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterSeparator collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterSeparatorSpecified
        {
            get
            {
                return (this.ParameterSeparator.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectParameterChoose_TWhen" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectParameterChoose_TWhen" /> class.</para>
        /// </summary>
        public ComObjectParameterChoose_TWhen()
        {
            this._parameterSeparator = new System.Collections.ObjectModel.ObservableCollection<ParameterSeparator_T>();
            this._parameterRefRef = new System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T>();
            this._binaryDataRef = new System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T>();
            this._comObjectRefRef = new System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T>();
            this._assign = new System.Collections.ObjectModel.ObservableCollection<Assign_T>();
            this._parameterBlockRename = new System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T> _parameterRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterRefRef_T> ParameterRefRef
        {
            get
            {
                return _parameterRefRef;
            }
            private set
            {
                if (_parameterRefRef == value)
                    return;
                if (_parameterRefRef == null || value == null || !_parameterRefRef.SequenceEqual(value))
                {
                    _parameterRefRef = value;
                    OnPropertyChanged(nameof(ParameterRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterRefRefSpecified
        {
            get
            {
                return (this.ParameterRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> _binaryDataRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BinaryDataRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> BinaryDataRef
        {
            get
            {
                return _binaryDataRef;
            }
            private set
            {
                if (_binaryDataRef == value)
                    return;
                if (_binaryDataRef == null || value == null || !_binaryDataRef.SequenceEqual(value))
                {
                    _binaryDataRef = value;
                    OnPropertyChanged(nameof(BinaryDataRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryDataRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryDataRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataRefSpecified
        {
            get
            {
                return (this.BinaryDataRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> _comObjectRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> ComObjectRefRef
        {
            get
            {
                return _comObjectRefRef;
            }
            private set
            {
                if (_comObjectRefRef == value)
                    return;
                if (_comObjectRefRef == null || value == null || !_comObjectRefRef.SequenceEqual(value))
                {
                    _comObjectRefRef = value;
                    OnPropertyChanged(nameof(ComObjectRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefRefSpecified
        {
            get
            {
                return (this.ComObjectRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Assign_T> _assign;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Assign", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Assign_T> Assign
        {
            get
            {
                return _assign;
            }
            private set
            {
                if (_assign == value)
                    return;
                if (_assign == null || value == null || !_assign.SequenceEqual(value))
                {
                    _assign = value;
                    OnPropertyChanged(nameof(Assign));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Assign-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Assign collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssignSpecified
        {
            get
            {
                return (this.Assign.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> _parameterBlockRename;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlockRename", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> ParameterBlockRename
        {
            get
            {
                return _parameterBlockRename;
            }
            private set
            {
                if (_parameterBlockRename == value)
                    return;
                if (_parameterBlockRename == null || value == null || !_parameterBlockRename.SequenceEqual(value))
                {
                    _parameterBlockRename = value;
                    OnPropertyChanged(nameof(ParameterBlockRename));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlockRename-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlockRename collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockRenameSpecified
        {
            get
            {
                return (this.ParameterBlockRename.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("When_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelChoose_TWhen))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ComObjectParameterChoose_TWhen))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DependentChannelChoose_TWhen))]
    public partial class When_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _test;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Pattern: ((-?\d+\s)*-?\d+)|((=|(!=)|>|<|(>=)|(<=))-?\d+).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((-?\\d+\\s)*-?\\d+)|((=|(!=)|>|<|(>=)|(<=))-?\\d+)")]
        [System.Xml.Serialization.XmlAttributeAttribute("test", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Test
        {
            get
            {
                return _test;
            }
            set
            {
                if (_test == value)
                    return;
                if (_test == null || value == null || !_test.Equals(value))
                {
                    _test = value;
                    OnPropertyChanged(nameof(Test));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _default = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("default", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Default
        {
            get
            {
                return _default;
            }
            set
            {
                if (!_default.Equals(value))
                {
                    _default = value;
                    OnPropertyChanged(nameof(Default));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BinaryDataRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BinaryDataRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectRefRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectRefRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Assign_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Assign_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _targetParamRefRef;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("TargetParamRefRef", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TargetParamRefRef
        {
            get
            {
                return _targetParamRefRef;
            }
            set
            {
                if (_targetParamRefRef == value)
                    return;
                if (_targetParamRefRef == null || value == null || !_targetParamRefRef.Equals(value))
                {
                    _targetParamRefRef = value;
                    OnPropertyChanged(nameof(TargetParamRefRef));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _sourceParamRefRef;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("SourceParamRefRef", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SourceParamRefRef
        {
            get
            {
                return _sourceParamRefRef;
            }
            set
            {
                if (_sourceParamRefRef == value)
                    return;
                if (_sourceParamRefRef == null || value == null || !_sourceParamRefRef.Equals(value))
                {
                    _sourceParamRefRef = value;
                    OnPropertyChanged(nameof(SourceParamRefRef));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterBlockRename_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterBlockRename_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ChannelChoose_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChannelChoose_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ChannelChoose_TWhen> _when;
        
        /// <summary>
        /// <para>registration-relevant list</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant list")]
        [System.Xml.Serialization.XmlElementAttribute("when", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ChannelChoose_TWhen> When
        {
            get
            {
                return _when;
            }
            private set
            {
                if (_when == value)
                    return;
                if (_when == null || value == null || !_when.SequenceEqual(value))
                {
                    _when = value;
                    OnPropertyChanged(nameof(When));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ChannelChoose_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ChannelChoose_T" /> class.</para>
        /// </summary>
        public ChannelChoose_T()
        {
            this._when = new System.Collections.ObjectModel.ObservableCollection<ChannelChoose_TWhen>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _paramRefId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParamRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParamRefId
        {
            get
            {
                return _paramRefId;
            }
            set
            {
                if (_paramRefId == value)
                    return;
                if (_paramRefId == null || value == null || !_paramRefId.Equals(value))
                {
                    _paramRefId = value;
                    OnPropertyChanged(nameof(ParamRefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ChannelChoose_TWhen", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChannelChoose_TWhen : When_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> _parameterBlock;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlock", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> ParameterBlock
        {
            get
            {
                return _parameterBlock;
            }
            private set
            {
                if (_parameterBlock == value)
                    return;
                if (_parameterBlock == null || value == null || !_parameterBlock.SequenceEqual(value))
                {
                    _parameterBlock = value;
                    OnPropertyChanged(nameof(ParameterBlock));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlock-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlock collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockSpecified
        {
            get
            {
                return (this.ParameterBlock.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ChannelChoose_TWhen" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ChannelChoose_TWhen" /> class.</para>
        /// </summary>
        public ChannelChoose_TWhen()
        {
            this._parameterBlock = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T>();
            this._comObjectRefRef = new System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T>();
            this._binaryDataRef = new System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T>();
            this._parameterBlockRename = new System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> _comObjectRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> ComObjectRefRef
        {
            get
            {
                return _comObjectRefRef;
            }
            private set
            {
                if (_comObjectRefRef == value)
                    return;
                if (_comObjectRefRef == null || value == null || !_comObjectRefRef.SequenceEqual(value))
                {
                    _comObjectRefRef = value;
                    OnPropertyChanged(nameof(ComObjectRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefRefSpecified
        {
            get
            {
                return (this.ComObjectRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> _binaryDataRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BinaryDataRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> BinaryDataRef
        {
            get
            {
                return _binaryDataRef;
            }
            private set
            {
                if (_binaryDataRef == value)
                    return;
                if (_binaryDataRef == null || value == null || !_binaryDataRef.SequenceEqual(value))
                {
                    _binaryDataRef = value;
                    OnPropertyChanged(nameof(BinaryDataRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryDataRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryDataRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataRefSpecified
        {
            get
            {
                return (this.BinaryDataRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> _parameterBlockRename;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlockRename", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> ParameterBlockRename
        {
            get
            {
                return _parameterBlockRename;
            }
            private set
            {
                if (_parameterBlockRename == value)
                    return;
                if (_parameterBlockRename == null || value == null || !_parameterBlockRename.SequenceEqual(value))
                {
                    _parameterBlockRename = value;
                    OnPropertyChanged(nameof(ParameterBlockRename));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlockRename-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlockRename collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockRenameSpecified
        {
            get
            {
                return (this.ParameterBlockRename.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramChannel_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramChannel_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> _parameterBlock;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlock", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T> ParameterBlock
        {
            get
            {
                return _parameterBlock;
            }
            private set
            {
                if (_parameterBlock == value)
                    return;
                if (_parameterBlock == null || value == null || !_parameterBlock.SequenceEqual(value))
                {
                    _parameterBlock = value;
                    OnPropertyChanged(nameof(ParameterBlock));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlock-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlock collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockSpecified
        {
            get
            {
                return (this.ParameterBlock.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApplicationProgramChannel_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApplicationProgramChannel_T" /> class.</para>
        /// </summary>
        public ApplicationProgramChannel_T()
        {
            this._parameterBlock = new System.Collections.ObjectModel.ObservableCollection<ComObjectParameterBlock_T>();
            this._comObjectRefRef = new System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T>();
            this._binaryDataRef = new System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> _comObjectRefRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ComObjectRefRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectRefRef_T> ComObjectRefRef
        {
            get
            {
                return _comObjectRefRef;
            }
            private set
            {
                if (_comObjectRefRef == value)
                    return;
                if (_comObjectRefRef == null || value == null || !_comObjectRefRef.SequenceEqual(value))
                {
                    _comObjectRefRef = value;
                    OnPropertyChanged(nameof(ComObjectRefRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectRefRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectRefRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectRefRefSpecified
        {
            get
            {
                return (this.ComObjectRefRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> _binaryDataRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BinaryDataRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BinaryDataRef_T> BinaryDataRef
        {
            get
            {
                return _binaryDataRef;
            }
            private set
            {
                if (_binaryDataRef == value)
                    return;
                if (_binaryDataRef == null || value == null || !_binaryDataRef.SequenceEqual(value))
                {
                    _binaryDataRef = value;
                    OnPropertyChanged(nameof(BinaryDataRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryDataRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryDataRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataRefSpecified
        {
            get
            {
                return (this.BinaryDataRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ChannelChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (_number == value)
                    return;
                if (_number == null || value == null || !_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DependentChannelChoose_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DependentChannelChoose_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_TWhen> _when;
        
        /// <summary>
        /// <para>registration-relevant list</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant list")]
        [System.Xml.Serialization.XmlElementAttribute("when", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_TWhen> When
        {
            get
            {
                return _when;
            }
            private set
            {
                if (_when == value)
                    return;
                if (_when == null || value == null || !_when.SequenceEqual(value))
                {
                    _when = value;
                    OnPropertyChanged(nameof(When));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="DependentChannelChoose_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DependentChannelChoose_T" /> class.</para>
        /// </summary>
        public DependentChannelChoose_T()
        {
            this._when = new System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_TWhen>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _paramRefId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("ParamRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ParamRefId
        {
            get
            {
                return _paramRefId;
            }
            set
            {
                if (_paramRefId == value)
                    return;
                if (_paramRefId == null || value == null || !_paramRefId.Equals(value))
                {
                    _paramRefId = value;
                    OnPropertyChanged(nameof(ParamRefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DependentChannelChoose_TWhen", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DependentChannelChoose_TWhen : When_T, System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T> _channel;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Channel", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T> Channel
        {
            get
            {
                return _channel;
            }
            private set
            {
                if (_channel == value)
                    return;
                if (_channel == null || value == null || !_channel.SequenceEqual(value))
                {
                    _channel = value;
                    OnPropertyChanged(nameof(Channel));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Channel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Channel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified
        {
            get
            {
                return (this.Channel.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="DependentChannelChoose_TWhen" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DependentChannelChoose_TWhen" /> class.</para>
        /// </summary>
        public DependentChannelChoose_TWhen()
        {
            this._channel = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramChannel_T>();
            this._choose = new System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T>();
            this._parameterBlockRename = new System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T> _choose;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("choose", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DependentChannelChoose_T> Choose
        {
            get
            {
                return _choose;
            }
            private set
            {
                if (_choose == value)
                    return;
                if (_choose == null || value == null || !_choose.SequenceEqual(value))
                {
                    _choose = value;
                    OnPropertyChanged(nameof(Choose));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Choose-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Choose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseSpecified
        {
            get
            {
                return (this.Choose.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> _parameterBlockRename;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ParameterBlockRename", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterBlockRename_T> ParameterBlockRename
        {
            get
            {
                return _parameterBlockRename;
            }
            private set
            {
                if (_parameterBlockRename == value)
                    return;
                if (_parameterBlockRename == null || value == null || !_parameterBlockRename.SequenceEqual(value))
                {
                    _parameterBlockRename = value;
                    OnPropertyChanged(nameof(ParameterBlockRename));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterBlockRename-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterBlockRename collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterBlockRenameSpecified
        {
            get
            {
                return (this.ParameterBlockRename.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgram_TMinEtsVersion", Namespace="http://knx.org/xml/project/11")]
    public enum ApplicationProgram_TMinEtsVersion
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3.0")]
        Item3Period0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3.0d")]
        Item3Period0D,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3.0f")]
        Item3Period0F,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4.0")]
        Item4Period0,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ManufacturerData_TManufacturerBaggagesBaggage", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManufacturerData_TManufacturerBaggagesBaggage : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ManufacturerData_TManufacturerBaggagesBaggageFileInfo _fileInfo;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("FileInfo", Namespace="http://knx.org/xml/project/11")]
        public ManufacturerData_TManufacturerBaggagesBaggageFileInfo FileInfo
        {
            get
            {
                return _fileInfo;
            }
            set
            {
                if (_fileInfo == value)
                    return;
                if (_fileInfo == null || value == null || !_fileInfo.Equals(value))
                {
                    _fileInfo = value;
                    OnPropertyChanged(nameof(FileInfo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _targetPath;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: (([^"<>\|:\*\?/\\\t\n\r]+\\)*[^"<>\|:\*\?/\\\t\n\r]+)?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(([^\"<>\\|:\\*\\?/\\\\\\t\\n\\r]+\\\\)*[^\"<>\\|:\\*\\?/\\\\\\t\\n\\r]+)?")]
        [System.Xml.Serialization.XmlAttributeAttribute("TargetPath", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TargetPath
        {
            get
            {
                return _targetPath;
            }
            set
            {
                if (_targetPath == value)
                    return;
                if (_targetPath == null || value == null || !_targetPath.Equals(value))
                {
                    _targetPath = value;
                    OnPropertyChanged(nameof(TargetPath));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [^"<>\|:\*\?/\\\t\n\r]+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^\"<>\\|:\\*\\?/\\\\\\t\\n\\r]+")]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _installOnImport;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("InstallOnImport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool InstallOnImport
        {
            get
            {
                return _installOnImport;
            }
            set
            {
                if (!_installOnImport.Equals(value))
                {
                    _installOnImport = value;
                    OnPropertyChanged(nameof(InstallOnImport));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _groupAddresses16BitEnabled = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("GroupAddresses16BitEnabled", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool GroupAddresses16BitEnabled
        {
            get
            {
                return _groupAddresses16BitEnabled;
            }
            set
            {
                if (!_groupAddresses16BitEnabled.Equals(value))
                {
                    _groupAddresses16BitEnabled = value;
                    OnPropertyChanged(nameof(GroupAddresses16BitEnabled));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ManufacturerData_TManufacturerBaggagesBaggageFileInfo", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManufacturerData_TManufacturerBaggagesBaggageFileInfo : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+")]
        [System.Xml.Serialization.XmlAttributeAttribute("Version", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                if (_version == value)
                    return;
                if (_version == null || value == null || !_version.Equals(value))
                {
                    _version = value;
                    OnPropertyChanged(nameof(Version));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _timeInfo;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("TimeInfo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime TimeInfoValue
        {
            get
            {
                return _timeInfo;
            }
            set
            {
                if (!_timeInfo.Equals(value))
                {
                    _timeInfo = value;
                    OnPropertyChanged(nameof(TimeInfoValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeInfo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimeInfo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TimeInfoValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> TimeInfo
        {
            get
            {
                if (this.TimeInfoValueSpecified)
                {
                    return this.TimeInfoValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.TimeInfoValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.TimeInfoValue = value.GetValueOrDefault();
                    this.TimeInfoValueSpecified = value.HasValue;
                    OnPropertyChanged("TimeInfo");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _hidden = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Hidden", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Hidden
        {
            get
            {
                return _hidden;
            }
            set
            {
                if (!_hidden.Equals(value))
                {
                    _hidden = value;
                    OnPropertyChanged(nameof(Hidden));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _readOnly = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadOnly", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ReadOnly
        {
            get
            {
                return _readOnly;
            }
            set
            {
                if (!_readOnly.Equals(value))
                {
                    _readOnly = value;
                    OnPropertyChanged(nameof(ReadOnly));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hardware_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProduct> _products;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Products", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Product", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProduct> Products
        {
            get
            {
                return _products;
            }
            private set
            {
                if (_products == value)
                    return;
                if (_products == null || value == null || !_products.SequenceEqual(value))
                {
                    _products = value;
                    OnPropertyChanged(nameof(Products));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Products-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Products collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProductsSpecified
        {
            get
            {
                return (this.Products.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Hardware_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Hardware_T" /> class.</para>
        /// </summary>
        public Hardware_T()
        {
            this._products = new System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProduct>();
            this._hardware2Programs = new System.Collections.ObjectModel.ObservableCollection<Hardware2Program_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Hardware2Program_T> _hardware2Programs;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Hardware2Programs", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Hardware2Program", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Hardware2Program_T> Hardware2Programs
        {
            get
            {
                return _hardware2Programs;
            }
            private set
            {
                if (_hardware2Programs == value)
                    return;
                if (_hardware2Programs == null || value == null || !_hardware2Programs.SequenceEqual(value))
                {
                    _hardware2Programs = value;
                    OnPropertyChanged(nameof(Hardware2Programs));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Hardware2Programs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Hardware2Programs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Hardware2ProgramsSpecified
        {
            get
            {
                return (this.Hardware2Programs.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _serialNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("SerialNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                if (_serialNumber == value)
                    return;
                if (_serialNumber == null || value == null || !_serialNumber.Equals(value))
                {
                    _serialNumber = value;
                    OnPropertyChanged(nameof(SerialNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _versionNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 32767.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(ushort), "0", "32767")]
        [System.Xml.Serialization.XmlAttributeAttribute("VersionNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort VersionNumber
        {
            get
            {
                return _versionNumber;
            }
            set
            {
                if (!_versionNumber.Equals(value))
                {
                    _versionNumber = value;
                    OnPropertyChanged(nameof(VersionNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private float _busCurrent;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("BusCurrent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float BusCurrentValue
        {
            get
            {
                return _busCurrent;
            }
            set
            {
                if (!_busCurrent.Equals(value))
                {
                    _busCurrent = value;
                    OnPropertyChanged(nameof(BusCurrentValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BusCurrent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusCurrent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BusCurrentValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<float> BusCurrent
        {
            get
            {
                if (this.BusCurrentValueSpecified)
                {
                    return this.BusCurrentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.BusCurrentValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.BusCurrentValue = value.GetValueOrDefault();
                    this.BusCurrentValueSpecified = value.HasValue;
                    OnPropertyChanged("BusCurrent");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isAccessory = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsAccessory", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsAccessory
        {
            get
            {
                return _isAccessory;
            }
            set
            {
                if (!_isAccessory.Equals(value))
                {
                    _isAccessory = value;
                    OnPropertyChanged(nameof(IsAccessory));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _hasIndividualAddress;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("HasIndividualAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool HasIndividualAddress
        {
            get
            {
                return _hasIndividualAddress;
            }
            set
            {
                if (!_hasIndividualAddress.Equals(value))
                {
                    _hasIndividualAddress = value;
                    OnPropertyChanged(nameof(HasIndividualAddress));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _hasApplicationProgram;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("HasApplicationProgram", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool HasApplicationProgram
        {
            get
            {
                return _hasApplicationProgram;
            }
            set
            {
                if (!_hasApplicationProgram.Equals(value))
                {
                    _hasApplicationProgram = value;
                    OnPropertyChanged(nameof(HasApplicationProgram));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _hasApplicationProgram2 = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("HasApplicationProgram2", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool HasApplicationProgram2
        {
            get
            {
                return _hasApplicationProgram2;
            }
            set
            {
                if (!_hasApplicationProgram2.Equals(value))
                {
                    _hasApplicationProgram2 = value;
                    OnPropertyChanged(nameof(HasApplicationProgram2));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isPowerSupply = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsPowerSupply", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsPowerSupply
        {
            get
            {
                return _isPowerSupply;
            }
            set
            {
                if (!_isPowerSupply.Equals(value))
                {
                    _isPowerSupply = value;
                    OnPropertyChanged(nameof(IsPowerSupply));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isChoke = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsChoke", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsChoke
        {
            get
            {
                return _isChoke;
            }
            set
            {
                if (!_isChoke.Equals(value))
                {
                    _isChoke = value;
                    OnPropertyChanged(nameof(IsChoke));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isCoupler = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsCoupler", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsCoupler
        {
            get
            {
                return _isCoupler;
            }
            set
            {
                if (!_isCoupler.Equals(value))
                {
                    _isCoupler = value;
                    OnPropertyChanged(nameof(IsCoupler));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isPowerLineRepeater = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsPowerLineRepeater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsPowerLineRepeater
        {
            get
            {
                return _isPowerLineRepeater;
            }
            set
            {
                if (!_isPowerLineRepeater.Equals(value))
                {
                    _isPowerLineRepeater = value;
                    OnPropertyChanged(nameof(IsPowerLineRepeater));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isPowerLineSignalFilter = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsPowerLineSignalFilter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsPowerLineSignalFilter
        {
            get
            {
                return _isPowerLineSignalFilter;
            }
            set
            {
                if (!_isPowerLineSignalFilter.Equals(value))
                {
                    _isPowerLineSignalFilter = value;
                    OnPropertyChanged(nameof(IsPowerLineSignalFilter));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isCable = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsCable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsCable
        {
            get
            {
                return _isCable;
            }
            set
            {
                if (!_isCable.Equals(value))
                {
                    _isCable = value;
                    OnPropertyChanged(nameof(IsCable));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isIPEnabled = false;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("IsIPEnabled", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsIPEnabled
        {
            get
            {
                return _isIPEnabled;
            }
            set
            {
                if (!_isIPEnabled.Equals(value))
                {
                    _isIPEnabled = value;
                    OnPropertyChanged(nameof(IsIPEnabled));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _originalManufacturer;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("OriginalManufacturer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OriginalManufacturer
        {
            get
            {
                return _originalManufacturer;
            }
            set
            {
                if (_originalManufacturer == value)
                    return;
                if (_originalManufacturer == null || value == null || !_originalManufacturer.Equals(value))
                {
                    _originalManufacturer = value;
                    OnPropertyChanged(nameof(OriginalManufacturer));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _noDownloadWithoutPlugin = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("NoDownloadWithoutPlugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool NoDownloadWithoutPlugin
        {
            get
            {
                return _noDownloadWithoutPlugin;
            }
            set
            {
                if (!_noDownloadWithoutPlugin.Equals(value))
                {
                    _noDownloadWithoutPlugin = value;
                    OnPropertyChanged(nameof(NoDownloadWithoutPlugin));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _nonRegRelevantDataVersion = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("NonRegRelevantDataVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort NonRegRelevantDataVersion
        {
            get
            {
                return _nonRegRelevantDataVersion;
            }
            set
            {
                if (!_nonRegRelevantDataVersion.Equals(value))
                {
                    _nonRegRelevantDataVersion = value;
                    OnPropertyChanged(nameof(NonRegRelevantDataVersion));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Project_TProjectInformation", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Project_TProjectInformation : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Project_TProjectInformationHistoryEntriesHistoryEntry> _historyEntries;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("HistoryEntries", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("HistoryEntry", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Project_TProjectInformationHistoryEntriesHistoryEntry> HistoryEntries
        {
            get
            {
                return _historyEntries;
            }
            private set
            {
                if (_historyEntries == value)
                    return;
                if (_historyEntries == null || value == null || !_historyEntries.SequenceEqual(value))
                {
                    _historyEntries = value;
                    OnPropertyChanged(nameof(HistoryEntries));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HistoryEntries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the HistoryEntries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HistoryEntriesSpecified
        {
            get
            {
                return (this.HistoryEntries.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Project_TProjectInformation" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Project_TProjectInformation" /> class.</para>
        /// </summary>
        public Project_TProjectInformation()
        {
            this._historyEntries = new System.Collections.ObjectModel.ObservableCollection<Project_TProjectInformationHistoryEntriesHistoryEntry>();
            this._toDoItems = new System.Collections.ObjectModel.ObservableCollection<ToDoItem_T>();
            this._projectTraces = new System.Collections.ObjectModel.ObservableCollection<ProjectTrace_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ToDoItem_T> _toDoItems;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ToDoItems", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ToDoItem", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ToDoItem_T> ToDoItems
        {
            get
            {
                return _toDoItems;
            }
            private set
            {
                if (_toDoItems == value)
                    return;
                if (_toDoItems == null || value == null || !_toDoItems.SequenceEqual(value))
                {
                    _toDoItems = value;
                    OnPropertyChanged(nameof(ToDoItems));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ToDoItems-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ToDoItems collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToDoItemsSpecified
        {
            get
            {
                return (this.ToDoItems.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ProjectTrace_T> _projectTraces;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ProjectTraces", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ProjectTrace", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ProjectTrace_T> ProjectTraces
        {
            get
            {
                return _projectTraces;
            }
            private set
            {
                if (_projectTraces == value)
                    return;
                if (_projectTraces == null || value == null || !_projectTraces.SequenceEqual(value))
                {
                    _projectTraces = value;
                    OnPropertyChanged(nameof(ProjectTraces));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProjectTraces-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ProjectTraces collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectTracesSpecified
        {
            get
            {
                return (this.ProjectTraces.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private GroupAddressStyle_T _groupAddressStyle;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("GroupAddressStyle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GroupAddressStyle_T GroupAddressStyle
        {
            get
            {
                return _groupAddressStyle;
            }
            set
            {
                if (!_groupAddressStyle.Equals(value))
                {
                    _groupAddressStyle = value;
                    OnPropertyChanged(nameof(GroupAddressStyle));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _projectNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProjectNumber
        {
            get
            {
                return _projectNumber;
            }
            set
            {
                if (_projectNumber == value)
                    return;
                if (_projectNumber == null || value == null || !_projectNumber.Equals(value))
                {
                    _projectNumber = value;
                    OnPropertyChanged(nameof(ProjectNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _contractNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("ContractNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ContractNumber
        {
            get
            {
                return _contractNumber;
            }
            set
            {
                if (_contractNumber == value)
                    return;
                if (_contractNumber == null || value == null || !_contractNumber.Equals(value))
                {
                    _contractNumber = value;
                    OnPropertyChanged(nameof(ContractNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _lastModified;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LastModified", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime LastModifiedValue
        {
            get
            {
                return _lastModified;
            }
            set
            {
                if (!_lastModified.Equals(value))
                {
                    _lastModified = value;
                    OnPropertyChanged(nameof(LastModifiedValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastModified-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastModified property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastModifiedValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LastModified
        {
            get
            {
                if (this.LastModifiedValueSpecified)
                {
                    return this.LastModifiedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LastModifiedValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LastModifiedValue = value.GetValueOrDefault();
                    this.LastModifiedValueSpecified = value.HasValue;
                    OnPropertyChanged("LastModified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _projectStart;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectStart", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime ProjectStartValue
        {
            get
            {
                return _projectStart;
            }
            set
            {
                if (!_projectStart.Equals(value))
                {
                    _projectStart = value;
                    OnPropertyChanged(nameof(ProjectStartValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProjectStart-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProjectStart property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ProjectStartValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> ProjectStart
        {
            get
            {
                if (this.ProjectStartValueSpecified)
                {
                    return this.ProjectStartValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ProjectStartValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ProjectStartValue = value.GetValueOrDefault();
                    this.ProjectStartValueSpecified = value.HasValue;
                    OnPropertyChanged("ProjectStart");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _projectEnd;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectEnd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime ProjectEndValue
        {
            get
            {
                return _projectEnd;
            }
            set
            {
                if (!_projectEnd.Equals(value))
                {
                    _projectEnd = value;
                    OnPropertyChanged(nameof(ProjectEndValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProjectEnd-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProjectEnd property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ProjectEndValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> ProjectEnd
        {
            get
            {
                if (this.ProjectEndValueSpecified)
                {
                    return this.ProjectEndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ProjectEndValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ProjectEndValue = value.GetValueOrDefault();
                    this.ProjectEndValueSpecified = value.HasValue;
                    OnPropertyChanged("ProjectEnd");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _projectId;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort ProjectIdValue
        {
            get
            {
                return _projectId;
            }
            set
            {
                if (!_projectId.Equals(value))
                {
                    _projectId = value;
                    OnPropertyChanged(nameof(ProjectIdValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProjectId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProjectId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ProjectIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 4095.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> ProjectId
        {
            get
            {
                if (this.ProjectIdValueSpecified)
                {
                    return this.ProjectIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ProjectIdValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ProjectIdValue = value.GetValueOrDefault();
                    this.ProjectIdValueSpecified = value.HasValue;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _projectPassword;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectPassword", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProjectPassword
        {
            get
            {
                return _projectPassword;
            }
            set
            {
                if (_projectPassword == value)
                    return;
                if (_projectPassword == null || value == null || !_projectPassword.Equals(value))
                {
                    _projectPassword = value;
                    OnPropertyChanged(nameof(ProjectPassword));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus = CompletionStatus_T.Undefined;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(CompletionStatus_T.Undefined)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatus
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ProjectTracingLevel_T _projectTracingLevel = ProjectTracingLevel_T.None;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(ProjectTracingLevel_T.None)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectTracingLevel", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ProjectTracingLevel_T ProjectTracingLevel
        {
            get
            {
                return _projectTracingLevel;
            }
            set
            {
                if (!_projectTracingLevel.Equals(value))
                {
                    _projectTracingLevel = value;
                    OnPropertyChanged(nameof(ProjectTracingLevel));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _projectTracingPassword;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlAttributeAttribute("ProjectTracingPassword", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProjectTracingPassword
        {
            get
            {
                return _projectTracingPassword;
            }
            set
            {
                if (_projectTracingPassword == value)
                    return;
                if (_projectTracingPassword == null || value == null || !_projectTracingPassword.Equals(value))
                {
                    _projectTracingPassword = value;
                    OnPropertyChanged(nameof(ProjectTracingPassword));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _hide16BitGroupsFromLegacyPlugins = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Hide16BitGroupsFromLegacyPlugins", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Hide16BitGroupsFromLegacyPlugins
        {
            get
            {
                return _hide16BitGroupsFromLegacyPlugins;
            }
            set
            {
                if (!_hide16BitGroupsFromLegacyPlugins.Equals(value))
                {
                    _hide16BitGroupsFromLegacyPlugins = value;
                    OnPropertyChanged(nameof(Hide16BitGroupsFromLegacyPlugins));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private TextEncoding_T _codePage;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CodePage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextEncoding_T CodePageValue
        {
            get
            {
                return _codePage;
            }
            set
            {
                if (!_codePage.Equals(value))
                {
                    _codePage = value;
                    OnPropertyChanged(nameof(CodePageValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CodePage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CodePage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CodePageValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<TextEncoding_T> CodePage
        {
            get
            {
                if (this.CodePageValueSpecified)
                {
                    return this.CodePageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CodePageValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CodePageValue = value.GetValueOrDefault();
                    this.CodePageValueSpecified = value.HasValue;
                    OnPropertyChanged("CodePage");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware_TProductsProduct", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hardware_TProductsProduct : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductBaggagesBaggage> _baggages;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Baggages", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Baggage", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductBaggagesBaggage> Baggages
        {
            get
            {
                return _baggages;
            }
            private set
            {
                if (_baggages == value)
                    return;
                if (_baggages == null || value == null || !_baggages.SequenceEqual(value))
                {
                    _baggages = value;
                    OnPropertyChanged(nameof(Baggages));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Baggages-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Baggages collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BaggagesSpecified
        {
            get
            {
                return (this.Baggages.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Hardware_TProductsProduct" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Hardware_TProductsProduct" /> class.</para>
        /// </summary>
        public Hardware_TProductsProduct()
        {
            this._baggages = new System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductBaggagesBaggage>();
            this._attributes = new System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductAttributesAttribute>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductAttributesAttribute> _attributes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Attributes", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Attribute", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Hardware_TProductsProductAttributesAttribute> Attributes
        {
            get
            {
                return _attributes;
            }
            private set
            {
                if (_attributes == value)
                    return;
                if (_attributes == null || value == null || !_attributes.SequenceEqual(value))
                {
                    _attributes = value;
                    OnPropertyChanged(nameof(Attributes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attributes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RegistrationInfo_T _registrationInfo;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RegistrationInfo", Namespace="http://knx.org/xml/project/11")]
        public RegistrationInfo_T RegistrationInfo
        {
            get
            {
                return _registrationInfo;
            }
            set
            {
                if (_registrationInfo == value)
                    return;
                if (_registrationInfo == null || value == null || !_registrationInfo.Equals(value))
                {
                    _registrationInfo = value;
                    OnPropertyChanged(nameof(RegistrationInfo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _orderNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("OrderNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OrderNumber
        {
            get
            {
                return _orderNumber;
            }
            set
            {
                if (_orderNumber == value)
                    return;
                if (_orderNumber == null || value == null || !_orderNumber.Equals(value))
                {
                    _orderNumber = value;
                    OnPropertyChanged(nameof(OrderNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isRailMounted;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("IsRailMounted", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsRailMounted
        {
            get
            {
                return _isRailMounted;
            }
            set
            {
                if (!_isRailMounted.Equals(value))
                {
                    _isRailMounted = value;
                    OnPropertyChanged(nameof(IsRailMounted));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private float _widthInMillimeter;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("WidthInMillimeter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float WidthInMillimeterValue
        {
            get
            {
                return _widthInMillimeter;
            }
            set
            {
                if (!_widthInMillimeter.Equals(value))
                {
                    _widthInMillimeter = value;
                    OnPropertyChanged(nameof(WidthInMillimeterValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WidthInMillimeter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WidthInMillimeter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WidthInMillimeterValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<float> WidthInMillimeter
        {
            get
            {
                if (this.WidthInMillimeterValueSpecified)
                {
                    return this.WidthInMillimeterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.WidthInMillimeterValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.WidthInMillimeterValue = value.GetValueOrDefault();
                    this.WidthInMillimeterValueSpecified = value.HasValue;
                    OnPropertyChanged("WidthInMillimeter");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _visibleDescription;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("VisibleDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VisibleDescription
        {
            get
            {
                return _visibleDescription;
            }
            set
            {
                if (_visibleDescription == value)
                    return;
                if (_visibleDescription == null || value == null || !_visibleDescription.Equals(value))
                {
                    _visibleDescription = value;
                    OnPropertyChanged(nameof(VisibleDescription));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLanguage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLanguage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLanguage
        {
            get
            {
                return _defaultLanguage;
            }
            set
            {
                if (_defaultLanguage == value)
                    return;
                if (_defaultLanguage == null || value == null || !_defaultLanguage.Equals(value))
                {
                    _defaultLanguage = value;
                    OnPropertyChanged(nameof(DefaultLanguage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _nonRegRelevantDataVersion = 0;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.Xml.Serialization.XmlAttributeAttribute("NonRegRelevantDataVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort NonRegRelevantDataVersion
        {
            get
            {
                return _nonRegRelevantDataVersion;
            }
            set
            {
                if (!_nonRegRelevantDataVersion.Equals(value))
                {
                    _nonRegRelevantDataVersion = value;
                    OnPropertyChanged(nameof(NonRegRelevantDataVersion));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _hash;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Hash", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Hash
        {
            get
            {
                return _hash;
            }
            set
            {
                if (_hash == value)
                    return;
                if (_hash == null || value == null || !_hash.SequenceEqual(value))
                {
                    _hash = value;
                    OnPropertyChanged(nameof(Hash));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RegistrationInfo_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegistrationInfo_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RegistrationStatus_T _registrationStatus;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RegistrationStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RegistrationStatus_T RegistrationStatus
        {
            get
            {
                return _registrationStatus;
            }
            set
            {
                if (!_registrationStatus.Equals(value))
                {
                    _registrationStatus = value;
                    OnPropertyChanged(nameof(RegistrationStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _registrationNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Pattern: \d{4}/\d+.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{4}/\\d+")]
        [System.Xml.Serialization.XmlAttributeAttribute("RegistrationNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RegistrationNumber
        {
            get
            {
                return _registrationNumber;
            }
            set
            {
                if (_registrationNumber == value)
                    return;
                if (_registrationNumber == null || value == null || !_registrationNumber.Equals(value))
                {
                    _registrationNumber = value;
                    OnPropertyChanged(nameof(RegistrationNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _originalRegistrationNumber;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// <para xml:lang="en">Pattern: \d{4}/\d+.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{4}/\\d+")]
        [System.Xml.Serialization.XmlAttributeAttribute("OriginalRegistrationNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OriginalRegistrationNumber
        {
            get
            {
                return _originalRegistrationNumber;
            }
            set
            {
                if (_originalRegistrationNumber == value)
                    return;
                if (_originalRegistrationNumber == null || value == null || !_originalRegistrationNumber.Equals(value))
                {
                    _originalRegistrationNumber = value;
                    OnPropertyChanged(nameof(OriginalRegistrationNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _registrationDate;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("RegistrationDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime RegistrationDateValue
        {
            get
            {
                return _registrationDate;
            }
            set
            {
                if (!_registrationDate.Equals(value))
                {
                    _registrationDate = value;
                    OnPropertyChanged(nameof(RegistrationDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RegistrationDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegistrationDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RegistrationDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> RegistrationDate
        {
            get
            {
                if (this.RegistrationDateValueSpecified)
                {
                    return this.RegistrationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.RegistrationDateValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.RegistrationDateValue = value.GetValueOrDefault();
                    this.RegistrationDateValueSpecified = value.HasValue;
                    OnPropertyChanged("RegistrationDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _registrationSignature;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RegistrationSignature", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] RegistrationSignature
        {
            get
            {
                return _registrationSignature;
            }
            set
            {
                if (_registrationSignature == value)
                    return;
                if (_registrationSignature == null || value == null || !_registrationSignature.SequenceEqual(value))
                {
                    _registrationSignature = value;
                    OnPropertyChanged(nameof(RegistrationSignature));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RegistrationInfo_TRegistrationKey _registrationKey = RegistrationInfo_TRegistrationKey.Knxconv;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(RegistrationInfo_TRegistrationKey.Knxconv)]
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RegistrationKey", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RegistrationInfo_TRegistrationKey RegistrationKey
        {
            get
            {
                return _registrationKey;
            }
            set
            {
                if (!_registrationKey.Equals(value))
                {
                    _registrationKey = value;
                    OnPropertyChanged(nameof(RegistrationKey));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware_TProductsProductBaggagesBaggage", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hardware_TProductsProductBaggagesBaggage : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware_TProductsProductAttributesAttribute", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hardware_TProductsProductAttributesAttribute : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Hardware_TProductsProductAttributesAttributeName _name;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Hardware_TProductsProductAttributesAttributeName Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (!_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware_TProductsProductAttributesAttributeName", Namespace="http://knx.org/xml/project/11")]
    public enum Hardware_TProductsProductAttributesAttributeName
    {
        
        /// <summary>
        /// </summary>
        CatalogName,
        
        /// <summary>
        /// </summary>
        Series,
        
        /// <summary>
        /// </summary>
        Colour,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RegistrationInfo_TRegistrationKey", Namespace="http://knx.org/xml/project/11")]
    public enum RegistrationInfo_TRegistrationKey
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("knxconv")]
        Knxconv,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("knxcert")]
        Knxcert,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hardware2Program_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hardware2Program_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProgramRef_T> _applicationProgramRef;
        
        /// <summary>
        /// <para>registration-relevant list</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant list")]
        [System.Xml.Serialization.XmlElementAttribute("ApplicationProgramRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProgramRef_T> ApplicationProgramRef
        {
            get
            {
                return _applicationProgramRef;
            }
            private set
            {
                if (_applicationProgramRef == value)
                    return;
                if (_applicationProgramRef == null || value == null || !_applicationProgramRef.SequenceEqual(value))
                {
                    _applicationProgramRef = value;
                    OnPropertyChanged(nameof(ApplicationProgramRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApplicationProgramRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ApplicationProgramRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApplicationProgramRefSpecified
        {
            get
            {
                return (this.ApplicationProgramRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Hardware2Program_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Hardware2Program_T" /> class.</para>
        /// </summary>
        public Hardware2Program_T()
        {
            this._applicationProgramRef = new System.Collections.ObjectModel.ObservableCollection<ApplicationProgramRef_T>();
            this._mediumTypes = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RegistrationInfo_T _registrationInfo;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RegistrationInfo", Namespace="http://knx.org/xml/project/11")]
        public RegistrationInfo_T RegistrationInfo
        {
            get
            {
                return _registrationInfo;
            }
            set
            {
                if (_registrationInfo == value)
                    return;
                if (_registrationInfo == null || value == null || !_registrationInfo.Equals(value))
                {
                    _registrationInfo = value;
                    OnPropertyChanged(nameof(RegistrationInfo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _mediumTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MediumTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> MediumTypes
        {
            get
            {
                return _mediumTypes;
            }
            private set
            {
                if (_mediumTypes == value)
                    return;
                if (_mediumTypes == null || value == null || !_mediumTypes.Equals(value))
                {
                    _mediumTypes = value;
                    OnPropertyChanged(nameof(MediumTypes));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MediumTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MediumTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MediumTypesSpecified
        {
            get
            {
                return (this.MediumTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _hash;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Hash", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Hash
        {
            get
            {
                return _hash;
            }
            set
            {
                if (_hash == value)
                    return;
                if (_hash == null || value == null || !_hash.SequenceEqual(value))
                {
                    _hash = value;
                    OnPropertyChanged(nameof(Hash));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _checkSums;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("CheckSums", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] CheckSums
        {
            get
            {
                return _checkSums;
            }
            set
            {
                if (_checkSums == value)
                    return;
                if (_checkSums == null || value == null || !_checkSums.SequenceEqual(value))
                {
                    _checkSums = value;
                    OnPropertyChanged(nameof(CheckSums));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _loadedImage;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("LoadedImage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] LoadedImage
        {
            get
            {
                return _loadedImage;
            }
            set
            {
                if (_loadedImage == value)
                    return;
                if (_loadedImage == null || value == null || !_loadedImage.SequenceEqual(value))
                {
                    _loadedImage = value;
                    OnPropertyChanged(nameof(LoadedImage));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApplicationProgramRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationProgramRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// <para>registration-relevant</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("registration-relevant")]
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Project_TProjectInformationHistoryEntriesHistoryEntry", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Project_TProjectInformationHistoryEntriesHistoryEntry : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _date;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Date", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime Date
        {
            get
            {
                return _date;
            }
            set
            {
                if (!_date.Equals(value))
                {
                    _date = value;
                    OnPropertyChanged(nameof(Date));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _user;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("User", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string User
        {
            get
            {
                return _user;
            }
            set
            {
                if (_user == value)
                    return;
                if (_user == null || value == null || !_user.Equals(value))
                {
                    _user = value;
                    OnPropertyChanged(nameof(User));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _detail;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Detail", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Detail
        {
            get
            {
                return _detail;
            }
            set
            {
                if (_detail == value)
                    return;
                if (_detail == null || value == null || !_detail.Equals(value))
                {
                    _detail = value;
                    OnPropertyChanged(nameof(Detail));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ToDoItem_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ToDoItem_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _objectPath;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectPath", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ObjectPath
        {
            get
            {
                return _objectPath;
            }
            set
            {
                if (_objectPath == value)
                    return;
                if (_objectPath == null || value == null || !_objectPath.Equals(value))
                {
                    _objectPath = value;
                    OnPropertyChanged(nameof(ObjectPath));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ToDoStatus_T _status;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ToDoStatus_T Status
        {
            get
            {
                return _status;
            }
            set
            {
                if (!_status.Equals(value))
                {
                    _status = value;
                    OnPropertyChanged(nameof(Status));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProjectTrace_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProjectTrace_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _date;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Date", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime Date
        {
            get
            {
                return _date;
            }
            set
            {
                if (!_date.Equals(value))
                {
                    _date = value;
                    OnPropertyChanged(nameof(Date));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _userName;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("UserName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string UserName
        {
            get
            {
                return _userName;
            }
            set
            {
                if (_userName == value)
                    return;
                if (_userName == null || value == null || !_userName.Equals(value))
                {
                    _userName = value;
                    OnPropertyChanged(nameof(UserName));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("KNX", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("KNX", Namespace="http://knx.org/xml/project/11")]
    public partial class KNX : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MasterData_T _masterData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MasterData", Namespace="http://knx.org/xml/project/11")]
        public MasterData_T MasterData
        {
            get
            {
                return _masterData;
            }
            set
            {
                if (_masterData == value)
                    return;
                if (_masterData == null || value == null || !_masterData.Equals(value))
                {
                    _masterData = value;
                    OnPropertyChanged(nameof(MasterData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturer> _manufacturerData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ManufacturerData", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Manufacturer", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturer> ManufacturerData
        {
            get
            {
                return _manufacturerData;
            }
            private set
            {
                if (_manufacturerData == value)
                    return;
                if (_manufacturerData == null || value == null || !_manufacturerData.SequenceEqual(value))
                {
                    _manufacturerData = value;
                    OnPropertyChanged(nameof(ManufacturerData));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ManufacturerData-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ManufacturerData collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ManufacturerDataSpecified
        {
            get
            {
                return (this.ManufacturerData.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="KNX" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="KNX" /> class.</para>
        /// </summary>
        public KNX()
        {
            this._manufacturerData = new System.Collections.ObjectModel.ObservableCollection<ManufacturerData_TManufacturer>();
            this._project = new System.Collections.ObjectModel.ObservableCollection<Project_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Project_T> _project;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Project", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Project_T> Project
        {
            get
            {
                return _project;
            }
            private set
            {
                if (_project == value)
                    return;
                if (_project == null || value == null || !_project.SequenceEqual(value))
                {
                    _project = value;
                    OnPropertyChanged(nameof(Project));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Project-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Project collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectSpecified
        {
            get
            {
                return (this.Project.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _createdBy;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("CreatedBy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CreatedBy
        {
            get
            {
                return _createdBy;
            }
            set
            {
                if (_createdBy == value)
                    return;
                if (_createdBy == null || value == null || !_createdBy.Equals(value))
                {
                    _createdBy = value;
                    OnPropertyChanged(nameof(CreatedBy));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _toolVersion;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ToolVersion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ToolVersion
        {
            get
            {
                return _toolVersion;
            }
            set
            {
                if (_toolVersion == value)
                    return;
                if (_toolVersion == null || value == null || !_toolVersion.Equals(value))
                {
                    _toolVersion = value;
                    OnPropertyChanged(nameof(ToolVersion));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Project_TInstallationsInstallation", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Project_TInstallationsInstallation : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Topology_T _topology;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Topology", Namespace="http://knx.org/xml/project/11")]
        public Topology_T Topology
        {
            get
            {
                return _topology;
            }
            set
            {
                if (_topology == value)
                    return;
                if (_topology == null || value == null || !_topology.Equals(value))
                {
                    _topology = value;
                    OnPropertyChanged(nameof(Topology));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BuildingPart_T> _buildings;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Buildings", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("BuildingPart", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BuildingPart_T> Buildings
        {
            get
            {
                return _buildings;
            }
            private set
            {
                if (_buildings == value)
                    return;
                if (_buildings == null || value == null || !_buildings.SequenceEqual(value))
                {
                    _buildings = value;
                    OnPropertyChanged(nameof(Buildings));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Project_TInstallationsInstallation" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Project_TInstallationsInstallation" /> class.</para>
        /// </summary>
        public Project_TInstallationsInstallation()
        {
            this._buildings = new System.Collections.ObjectModel.ObservableCollection<BuildingPart_T>();
            this._trades = new System.Collections.ObjectModel.ObservableCollection<Trade_T>();
            this._splitInfos = new System.Collections.ObjectModel.ObservableCollection<SplitInfo_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private GroupAddresses_T _groupAddresses;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("GroupAddresses", Namespace="http://knx.org/xml/project/11")]
        public GroupAddresses_T GroupAddresses
        {
            get
            {
                return _groupAddresses;
            }
            set
            {
                if (_groupAddresses == value)
                    return;
                if (_groupAddresses == null || value == null || !_groupAddresses.Equals(value))
                {
                    _groupAddresses = value;
                    OnPropertyChanged(nameof(GroupAddresses));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Trade_T> _trades;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Trades", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Trade", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Trade_T> Trades
        {
            get
            {
                return _trades;
            }
            private set
            {
                if (_trades == value)
                    return;
                if (_trades == null || value == null || !_trades.SequenceEqual(value))
                {
                    _trades = value;
                    OnPropertyChanged(nameof(Trades));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Trades-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Trades collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TradesSpecified
        {
            get
            {
                return (this.Trades.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private BusAccess_T _busAccess;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BusAccess", Namespace="http://knx.org/xml/project/11")]
        public BusAccess_T BusAccess
        {
            get
            {
                return _busAccess;
            }
            set
            {
                if (_busAccess == value)
                    return;
                if (_busAccess == null || value == null || !_busAccess.Equals(value))
                {
                    _busAccess = value;
                    OnPropertyChanged(nameof(BusAccess));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<SplitInfo_T> _splitInfos;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SplitInfos", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SplitInfo", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<SplitInfo_T> SplitInfos
        {
            get
            {
                return _splitInfos;
            }
            private set
            {
                if (_splitInfos == value)
                    return;
                if (_splitInfos == null || value == null || !_splitInfos.SequenceEqual(value))
                {
                    _splitInfos = value;
                    OnPropertyChanged(nameof(SplitInfos));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SplitInfos-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SplitInfos collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SplitInfosSpecified
        {
            get
            {
                return (this.SplitInfos.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _installationId;
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("InstallationId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort InstallationIdValue
        {
            get
            {
                return _installationId;
            }
            set
            {
                if (!_installationId.Equals(value))
                {
                    _installationId = value;
                    OnPropertyChanged(nameof(InstallationIdValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InstallationId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstallationId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InstallationIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ushort> InstallationId
        {
            get
            {
                if (this.InstallationIdValueSpecified)
                {
                    return this.InstallationIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.InstallationIdValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.InstallationIdValue = value.GetValueOrDefault();
                    this.InstallationIdValueSpecified = value.HasValue;
                    OnPropertyChanged("InstallationId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ulong _bCUKey = 4294967295ul;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(4294967295ul)]
        [System.Xml.Serialization.XmlAttributeAttribute("BCUKey", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ulong BCUKey
        {
            get
            {
                return _bCUKey;
            }
            set
            {
                if (!_bCUKey.Equals(value))
                {
                    _bCUKey = value;
                    OnPropertyChanged(nameof(BCUKey));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _iPRoutingMulticastAddress = "224.0.23.12";
        
        /// <summary>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("224.0.23.12")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0" +
            "-9][0-9]|[1-9][0-9]|[0-9])")]
        [System.Xml.Serialization.XmlAttributeAttribute("IPRoutingMulticastAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IPRoutingMulticastAddress
        {
            get
            {
                return _iPRoutingMulticastAddress;
            }
            set
            {
                if (_iPRoutingMulticastAddress == value)
                    return;
                if (_iPRoutingMulticastAddress == null || value == null || !_iPRoutingMulticastAddress.Equals(value))
                {
                    _iPRoutingMulticastAddress = value;
                    OnPropertyChanged(nameof(IPRoutingMulticastAddress));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLine;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLine", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLine
        {
            get
            {
                return _defaultLine;
            }
            set
            {
                if (_defaultLine == value)
                    return;
                if (_defaultLine == null || value == null || !_defaultLine.Equals(value))
                {
                    _defaultLine = value;
                    OnPropertyChanged(nameof(DefaultLine));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus = CompletionStatus_T.Undefined;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(CompletionStatus_T.Undefined)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatus
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Project_TInstallationsInstallationSplitType _splitType;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("SplitType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Project_TInstallationsInstallationSplitType SplitTypeValue
        {
            get
            {
                return _splitType;
            }
            set
            {
                if (!_splitType.Equals(value))
                {
                    _splitType = value;
                    OnPropertyChanged(nameof(SplitTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SplitType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SplitType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SplitTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Project_TInstallationsInstallationSplitType> SplitType
        {
            get
            {
                if (this.SplitTypeValueSpecified)
                {
                    return this.SplitTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.SplitTypeValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.SplitTypeValue = value.GetValueOrDefault();
                    this.SplitTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("SplitType");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Topology_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Topology_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Topology_TArea> _area;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Area", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Topology_TArea> Area
        {
            get
            {
                return _area;
            }
            private set
            {
                if (_area == value)
                    return;
                if (_area == null || value == null || !_area.SequenceEqual(value))
                {
                    _area = value;
                    OnPropertyChanged(nameof(Area));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Area-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Area collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AreaSpecified
        {
            get
            {
                return (this.Area.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Topology_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Topology_T" /> class.</para>
        /// </summary>
        public Topology_T()
        {
            this._area = new System.Collections.ObjectModel.ObservableCollection<Topology_TArea>();
            this._unassignedDevices = new System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T> _unassignedDevices;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("UnassignedDevices", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DeviceInstance", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T> UnassignedDevices
        {
            get
            {
                return _unassignedDevices;
            }
            private set
            {
                if (_unassignedDevices == value)
                    return;
                if (_unassignedDevices == null || value == null || !_unassignedDevices.SequenceEqual(value))
                {
                    _unassignedDevices = value;
                    OnPropertyChanged(nameof(UnassignedDevices));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UnassignedDevices-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the UnassignedDevices collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnassignedDevicesSpecified
        {
            get
            {
                return (this.UnassignedDevices.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Topology_TArea", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Topology_TArea : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLine> _line;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Line", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLine> Line
        {
            get
            {
                return _line;
            }
            private set
            {
                if (_line == value)
                    return;
                if (_line == null || value == null || !_line.SequenceEqual(value))
                {
                    _line = value;
                    OnPropertyChanged(nameof(Line));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Line-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Line collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineSpecified
        {
            get
            {
                return (this.Line.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Topology_TArea" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Topology_TArea" /> class.</para>
        /// </summary>
        public Topology_TArea()
        {
            this._line = new System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLine>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _address;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "0", "15")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatusValue
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatusValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompletionStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompletionStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CompletionStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<CompletionStatus_T> CompletionStatus
        {
            get
            {
                if (this.CompletionStatusValueSpecified)
                {
                    return this.CompletionStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CompletionStatusValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CompletionStatusValue = value.GetValueOrDefault();
                    this.CompletionStatusValueSpecified = value.HasValue;
                    OnPropertyChanged("CompletionStatus");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Topology_TAreaLine", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Topology_TAreaLine : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T> _deviceInstance;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DeviceInstance", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T> DeviceInstance
        {
            get
            {
                return _deviceInstance;
            }
            private set
            {
                if (_deviceInstance == value)
                    return;
                if (_deviceInstance == null || value == null || !_deviceInstance.SequenceEqual(value))
                {
                    _deviceInstance = value;
                    OnPropertyChanged(nameof(DeviceInstance));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeviceInstanceSpecified
        {
            get
            {
                return (this.DeviceInstance.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Topology_TAreaLine" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Topology_TAreaLine" /> class.</para>
        /// </summary>
        public Topology_TAreaLine()
        {
            this._deviceInstance = new System.Collections.ObjectModel.ObservableCollection<DeviceInstance_T>();
            this._additionalGroupAddresses = new System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLineAdditionalGroupAddressesGroupAddress>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private BusAccess_T _busAccess;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BusAccess", Namespace="http://knx.org/xml/project/11")]
        public BusAccess_T BusAccess
        {
            get
            {
                return _busAccess;
            }
            set
            {
                if (_busAccess == value)
                    return;
                if (_busAccess == null || value == null || !_busAccess.Equals(value))
                {
                    _busAccess = value;
                    OnPropertyChanged(nameof(BusAccess));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLineAdditionalGroupAddressesGroupAddress> _additionalGroupAddresses;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("AdditionalGroupAddresses", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("GroupAddress", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Topology_TAreaLineAdditionalGroupAddressesGroupAddress> AdditionalGroupAddresses
        {
            get
            {
                return _additionalGroupAddresses;
            }
            private set
            {
                if (_additionalGroupAddresses == value)
                    return;
                if (_additionalGroupAddresses == null || value == null || !_additionalGroupAddresses.SequenceEqual(value))
                {
                    _additionalGroupAddresses = value;
                    OnPropertyChanged(nameof(AdditionalGroupAddresses));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalGroupAddresses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalGroupAddresses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AdditionalGroupAddressesSpecified
        {
            get
            {
                return (this.AdditionalGroupAddresses.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _address;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 15.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "0", "15")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _mediumTypeRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("MediumTypeRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MediumTypeRefId
        {
            get
            {
                return _mediumTypeRefId;
            }
            set
            {
                if (_mediumTypeRefId == value)
                    return;
                if (_mediumTypeRefId == null || value == null || !_mediumTypeRefId.Equals(value))
                {
                    _mediumTypeRefId = value;
                    OnPropertyChanged(nameof(MediumTypeRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ulong _domainAddress;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("DomainAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ulong DomainAddressValue
        {
            get
            {
                return _domainAddress;
            }
            set
            {
                if (!_domainAddress.Equals(value))
                {
                    _domainAddress = value;
                    OnPropertyChanged(nameof(DomainAddressValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DomainAddress-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DomainAddress property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DomainAddressValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ulong> DomainAddress
        {
            get
            {
                if (this.DomainAddressValueSpecified)
                {
                    return this.DomainAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.DomainAddressValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.DomainAddressValue = value.GetValueOrDefault();
                    this.DomainAddressValueSpecified = value.HasValue;
                    OnPropertyChanged("DomainAddress");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _domainAddressIsChecked = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("DomainAddressIsChecked", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool DomainAddressIsChecked
        {
            get
            {
                return _domainAddressIsChecked;
            }
            set
            {
                if (!_domainAddressIsChecked.Equals(value))
                {
                    _domainAddressIsChecked = value;
                    OnPropertyChanged(nameof(DomainAddressIsChecked));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _iPRoutingMulticastAddress = "224.0.23.12";
        
        /// <summary>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("224.0.23.12")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0" +
            "-9][0-9]|[1-9][0-9]|[0-9])")]
        [System.Xml.Serialization.XmlAttributeAttribute("IPRoutingMulticastAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IPRoutingMulticastAddress
        {
            get
            {
                return _iPRoutingMulticastAddress;
            }
            set
            {
                if (_iPRoutingMulticastAddress == value)
                    return;
                if (_iPRoutingMulticastAddress == null || value == null || !_iPRoutingMulticastAddress.Equals(value))
                {
                    _iPRoutingMulticastAddress = value;
                    OnPropertyChanged(nameof(IPRoutingMulticastAddress));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _multicastTTL = 16;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(16)]
        [System.Xml.Serialization.XmlAttributeAttribute("MulticastTTL", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte MulticastTTL
        {
            get
            {
                return _multicastTTL;
            }
            set
            {
                if (!_multicastTTL.Equals(value))
                {
                    _multicastTTL = value;
                    OnPropertyChanged(nameof(MulticastTTL));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatusValue
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatusValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompletionStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompletionStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CompletionStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<CompletionStatus_T> CompletionStatus
        {
            get
            {
                if (this.CompletionStatusValueSpecified)
                {
                    return this.CompletionStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CompletionStatusValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CompletionStatusValue = value.GetValueOrDefault();
                    this.CompletionStatusValueSpecified = value.HasValue;
                    OnPropertyChanged("CompletionStatus");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeviceInstance_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInstance_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ParameterInstanceRef_T> _parameterInstanceRefs;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ParameterInstanceRefs", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ParameterInstanceRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ParameterInstanceRef_T> ParameterInstanceRefs
        {
            get
            {
                return _parameterInstanceRefs;
            }
            private set
            {
                if (_parameterInstanceRefs == value)
                    return;
                if (_parameterInstanceRefs == null || value == null || !_parameterInstanceRefs.SequenceEqual(value))
                {
                    _parameterInstanceRefs = value;
                    OnPropertyChanged(nameof(ParameterInstanceRefs));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParameterInstanceRefs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ParameterInstanceRefs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParameterInstanceRefsSpecified
        {
            get
            {
                return (this.ParameterInstanceRefs.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="DeviceInstance_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DeviceInstance_T" /> class.</para>
        /// </summary>
        public DeviceInstance_T()
        {
            this._parameterInstanceRefs = new System.Collections.ObjectModel.ObservableCollection<ParameterInstanceRef_T>();
            this._comObjectInstanceRefs = new System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_T>();
            this._additionalAddresses = new System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TAdditionalAddressesAddress>();
            this._binaryData = new System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TBinaryDataBinaryData>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_T> _comObjectInstanceRefs;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ComObjectInstanceRefs", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ComObjectInstanceRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_T> ComObjectInstanceRefs
        {
            get
            {
                return _comObjectInstanceRefs;
            }
            private set
            {
                if (_comObjectInstanceRefs == value)
                    return;
                if (_comObjectInstanceRefs == null || value == null || !_comObjectInstanceRefs.SequenceEqual(value))
                {
                    _comObjectInstanceRefs = value;
                    OnPropertyChanged(nameof(ComObjectInstanceRefs));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ComObjectInstanceRefs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ComObjectInstanceRefs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComObjectInstanceRefsSpecified
        {
            get
            {
                return (this.ComObjectInstanceRefs.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TAdditionalAddressesAddress> _additionalAddresses;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("AdditionalAddresses", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Address", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TAdditionalAddressesAddress> AdditionalAddresses
        {
            get
            {
                return _additionalAddresses;
            }
            private set
            {
                if (_additionalAddresses == value)
                    return;
                if (_additionalAddresses == null || value == null || !_additionalAddresses.SequenceEqual(value))
                {
                    _additionalAddresses = value;
                    OnPropertyChanged(nameof(AdditionalAddresses));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalAddresses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalAddresses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AdditionalAddressesSpecified
        {
            get
            {
                return (this.AdditionalAddresses.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TBinaryDataBinaryData> _binaryData;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("BinaryData", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("BinaryData", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstance_TBinaryDataBinaryData> BinaryData
        {
            get
            {
                return _binaryData;
            }
            private set
            {
                if (_binaryData == value)
                    return;
                if (_binaryData == null || value == null || !_binaryData.SequenceEqual(value))
                {
                    _binaryData = value;
                    OnPropertyChanged(nameof(BinaryData));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BinaryData-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BinaryData collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BinaryDataSpecified
        {
            get
            {
                return (this.BinaryData.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IPConfig_T _iPConfig;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("IPConfig", Namespace="http://knx.org/xml/project/11")]
        public IPConfig_T IPConfig
        {
            get
            {
                return _iPConfig;
            }
            set
            {
                if (_iPConfig == value)
                    return;
                if (_iPConfig == null || value == null || !_iPConfig.Equals(value))
                {
                    _iPConfig = value;
                    OnPropertyChanged(nameof(IPConfig));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _productRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ProductRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProductRefId
        {
            get
            {
                return _productRefId;
            }
            set
            {
                if (_productRefId == value)
                    return;
                if (_productRefId == null || value == null || !_productRefId.Equals(value))
                {
                    _productRefId = value;
                    OnPropertyChanged(nameof(ProductRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _hardware2ProgramRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Hardware2ProgramRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Hardware2ProgramRefId
        {
            get
            {
                return _hardware2ProgramRefId;
            }
            set
            {
                if (_hardware2ProgramRefId == value)
                    return;
                if (_hardware2ProgramRefId == null || value == null || !_hardware2ProgramRefId.Equals(value))
                {
                    _hardware2ProgramRefId = value;
                    OnPropertyChanged(nameof(Hardware2ProgramRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _address;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "0", "255")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int AddressValue
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(AddressValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Address-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Address property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AddressValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 255.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Address
        {
            get
            {
                if (this.AddressValueSpecified)
                {
                    return this.AddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.AddressValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.AddressValue = value.GetValueOrDefault();
                    this.AddressValueSpecified = value.HasValue;
                    OnPropertyChanged("Address");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _lastModified;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LastModified", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime LastModifiedValue
        {
            get
            {
                return _lastModified;
            }
            set
            {
                if (!_lastModified.Equals(value))
                {
                    _lastModified = value;
                    OnPropertyChanged(nameof(LastModifiedValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastModified-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastModified property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastModifiedValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LastModified
        {
            get
            {
                if (this.LastModifiedValueSpecified)
                {
                    return this.LastModifiedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LastModifiedValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LastModifiedValue = value.GetValueOrDefault();
                    this.LastModifiedValueSpecified = value.HasValue;
                    OnPropertyChanged("LastModified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _lastDownload;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("LastDownload", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime LastDownloadValue
        {
            get
            {
                return _lastDownload;
            }
            set
            {
                if (!_lastDownload.Equals(value))
                {
                    _lastDownload = value;
                    OnPropertyChanged(nameof(LastDownloadValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastDownload-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDownload property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastDownloadValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LastDownload
        {
            get
            {
                if (this.LastDownloadValueSpecified)
                {
                    return this.LastDownloadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.LastDownloadValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.LastDownloadValue = value.GetValueOrDefault();
                    this.LastDownloadValueSpecified = value.HasValue;
                    OnPropertyChanged("LastDownload");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _installationHints;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("InstallationHints", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InstallationHints
        {
            get
            {
                return _installationHints;
            }
            set
            {
                if (_installationHints == value)
                    return;
                if (_installationHints == null || value == null || !_installationHints.Equals(value))
                {
                    _installationHints = value;
                    OnPropertyChanged(nameof(InstallationHints));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus = CompletionStatus_T.Undefined;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(CompletionStatus_T.Undefined)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatus
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _individualAddressLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("IndividualAddressLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IndividualAddressLoaded
        {
            get
            {
                return _individualAddressLoaded;
            }
            set
            {
                if (!_individualAddressLoaded.Equals(value))
                {
                    _individualAddressLoaded = value;
                    OnPropertyChanged(nameof(IndividualAddressLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _applicationProgramLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("ApplicationProgramLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ApplicationProgramLoaded
        {
            get
            {
                return _applicationProgramLoaded;
            }
            set
            {
                if (!_applicationProgramLoaded.Equals(value))
                {
                    _applicationProgramLoaded = value;
                    OnPropertyChanged(nameof(ApplicationProgramLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _parametersLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("ParametersLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ParametersLoaded
        {
            get
            {
                return _parametersLoaded;
            }
            set
            {
                if (!_parametersLoaded.Equals(value))
                {
                    _parametersLoaded = value;
                    OnPropertyChanged(nameof(ParametersLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _communicationPartLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("CommunicationPartLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool CommunicationPartLoaded
        {
            get
            {
                return _communicationPartLoaded;
            }
            set
            {
                if (!_communicationPartLoaded.Equals(value))
                {
                    _communicationPartLoaded = value;
                    OnPropertyChanged(nameof(CommunicationPartLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _mediumConfigLoaded = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("MediumConfigLoaded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool MediumConfigLoaded
        {
            get
            {
                return _mediumConfigLoaded;
            }
            set
            {
                if (!_mediumConfigLoaded.Equals(value))
                {
                    _mediumConfigLoaded = value;
                    OnPropertyChanged(nameof(MediumConfigLoaded));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _loadedImage;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("LoadedImage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] LoadedImage
        {
            get
            {
                return _loadedImage;
            }
            set
            {
                if (_loadedImage == value)
                    return;
                if (_loadedImage == null || value == null || !_loadedImage.SequenceEqual(value))
                {
                    _loadedImage = value;
                    OnPropertyChanged(nameof(LoadedImage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _checkSums;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("CheckSums", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] CheckSums
        {
            get
            {
                return _checkSums;
            }
            set
            {
                if (_checkSums == value)
                    return;
                if (_checkSums == null || value == null || !_checkSums.SequenceEqual(value))
                {
                    _checkSums = value;
                    OnPropertyChanged(nameof(CheckSums));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isCommunicationObjectVisibilityCalculated;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("IsCommunicationObjectVisibilityCalculated", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsCommunicationObjectVisibilityCalculatedValue
        {
            get
            {
                return _isCommunicationObjectVisibilityCalculated;
            }
            set
            {
                if (!_isCommunicationObjectVisibilityCalculated.Equals(value))
                {
                    _isCommunicationObjectVisibilityCalculated = value;
                    OnPropertyChanged(nameof(IsCommunicationObjectVisibilityCalculatedValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die IsCommunicationObjectVisibilityCalculated-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsCommunicationObjectVisibilityCalculated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IsCommunicationObjectVisibilityCalculatedValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> IsCommunicationObjectVisibilityCalculated
        {
            get
            {
                if (this.IsCommunicationObjectVisibilityCalculatedValueSpecified)
                {
                    return this.IsCommunicationObjectVisibilityCalculatedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.IsCommunicationObjectVisibilityCalculatedValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.IsCommunicationObjectVisibilityCalculatedValue = value.GetValueOrDefault();
                    this.IsCommunicationObjectVisibilityCalculatedValueSpecified = value.HasValue;
                    OnPropertyChanged("IsCommunicationObjectVisibilityCalculated");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _broken = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Broken", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Broken
        {
            get
            {
                return _broken;
            }
            set
            {
                if (!_broken.Equals(value))
                {
                    _broken = value;
                    OnPropertyChanged(nameof(Broken));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _serialNumber;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("SerialNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                if (_serialNumber == value)
                    return;
                if (_serialNumber == null || value == null || !_serialNumber.SequenceEqual(value))
                {
                    _serialNumber = value;
                    OnPropertyChanged(nameof(SerialNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _uniqueId;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: \{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [System.Xml.Serialization.XmlAttributeAttribute("UniqueId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string UniqueId
        {
            get
            {
                return _uniqueId;
            }
            set
            {
                if (_uniqueId == value)
                    return;
                if (_uniqueId == null || value == null || !_uniqueId.Equals(value))
                {
                    _uniqueId = value;
                    OnPropertyChanged(nameof(UniqueId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IPConfig_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IPConfig_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IPConfigAssign_T _assign = IPConfigAssign_T.Auto;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(IPConfigAssign_T.Auto)]
        [System.Xml.Serialization.XmlAttributeAttribute("Assign", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IPConfigAssign_T Assign
        {
            get
            {
                return _assign;
            }
            set
            {
                if (!_assign.Equals(value))
                {
                    _assign = value;
                    OnPropertyChanged(nameof(Assign));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _iPAddress;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0" +
            "-9][0-9]|[1-9][0-9]|[0-9])")]
        [System.Xml.Serialization.XmlAttributeAttribute("IPAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IPAddress
        {
            get
            {
                return _iPAddress;
            }
            set
            {
                if (_iPAddress == value)
                    return;
                if (_iPAddress == null || value == null || !_iPAddress.Equals(value))
                {
                    _iPAddress = value;
                    OnPropertyChanged(nameof(IPAddress));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _subnetMask;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0" +
            "-9][0-9]|[1-9][0-9]|[0-9])")]
        [System.Xml.Serialization.XmlAttributeAttribute("SubnetMask", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SubnetMask
        {
            get
            {
                return _subnetMask;
            }
            set
            {
                if (_subnetMask == value)
                    return;
                if (_subnetMask == null || value == null || !_subnetMask.Equals(value))
                {
                    _subnetMask = value;
                    OnPropertyChanged(nameof(SubnetMask));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultGateway;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0" +
            "-9][0-9]|[1-9][0-9]|[0-9])")]
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultGateway", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultGateway
        {
            get
            {
                return _defaultGateway;
            }
            set
            {
                if (_defaultGateway == value)
                    return;
                if (_defaultGateway == null || value == null || !_defaultGateway.Equals(value))
                {
                    _defaultGateway = value;
                    OnPropertyChanged(nameof(DefaultGateway));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _mACAddress;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("MACAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MACAddress
        {
            get
            {
                return _mACAddress;
            }
            set
            {
                if (_mACAddress == value)
                    return;
                if (_mACAddress == null || value == null || !_mACAddress.Equals(value))
                {
                    _mACAddress = value;
                    OnPropertyChanged(nameof(MACAddress));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParameterInstanceRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterInstanceRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _value;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (_value == value)
                    return;
                if (_value == null || value == null || !_value.Equals(value))
                {
                    _value = value;
                    OnPropertyChanged(nameof(Value));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectInstanceRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectInstanceRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectInstanceRef_TConnectors _connectors;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Connectors", Namespace="http://knx.org/xml/project/11")]
        public ComObjectInstanceRef_TConnectors Connectors
        {
            get
            {
                return _connectors;
            }
            set
            {
                if (_connectors == value)
                    return;
                if (_connectors == null || value == null || !_connectors.Equals(value))
                {
                    _connectors = value;
                    OnPropertyChanged(nameof(Connectors));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _text;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Text", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                if (_text == value)
                    return;
                if (_text == null || value == null || !_text.Equals(value))
                {
                    _text = value;
                    OnPropertyChanged(nameof(Text));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _functionText;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("FunctionText", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FunctionText
        {
            get
            {
                return _functionText;
            }
            set
            {
                if (_functionText == value)
                    return;
                if (_functionText == null || value == null || !_functionText.Equals(value))
                {
                    _functionText = value;
                    OnPropertyChanged(nameof(FunctionText));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectPriority_T _priority;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("Priority", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ComObjectPriority_T PriorityValue
        {
            get
            {
                return _priority;
            }
            set
            {
                if (!_priority.Equals(value))
                {
                    _priority = value;
                    OnPropertyChanged(nameof(PriorityValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Priority-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Priority property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PriorityValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<ComObjectPriority_T> Priority
        {
            get
            {
                if (this.PriorityValueSpecified)
                {
                    return this.PriorityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.PriorityValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.PriorityValue = value.GetValueOrDefault();
                    this.PriorityValueSpecified = value.HasValue;
                    OnPropertyChanged("Priority");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadFlagValue
        {
            get
            {
                return _readFlag;
            }
            set
            {
                if (!_readFlag.Equals(value))
                {
                    _readFlag = value;
                    OnPropertyChanged(nameof(ReadFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReadFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReadFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReadFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> ReadFlag
        {
            get
            {
                if (this.ReadFlagValueSpecified)
                {
                    return this.ReadFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReadFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReadFlagValue = value.GetValueOrDefault();
                    this.ReadFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("ReadFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _writeFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("WriteFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T WriteFlagValue
        {
            get
            {
                return _writeFlag;
            }
            set
            {
                if (!_writeFlag.Equals(value))
                {
                    _writeFlag = value;
                    OnPropertyChanged(nameof(WriteFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WriteFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WriteFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WriteFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> WriteFlag
        {
            get
            {
                if (this.WriteFlagValueSpecified)
                {
                    return this.WriteFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.WriteFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.WriteFlagValue = value.GetValueOrDefault();
                    this.WriteFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("WriteFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _communicationFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("CommunicationFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T CommunicationFlagValue
        {
            get
            {
                return _communicationFlag;
            }
            set
            {
                if (!_communicationFlag.Equals(value))
                {
                    _communicationFlag = value;
                    OnPropertyChanged(nameof(CommunicationFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CommunicationFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommunicationFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CommunicationFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> CommunicationFlag
        {
            get
            {
                if (this.CommunicationFlagValueSpecified)
                {
                    return this.CommunicationFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.CommunicationFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.CommunicationFlagValue = value.GetValueOrDefault();
                    this.CommunicationFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("CommunicationFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _transmitFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("TransmitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T TransmitFlagValue
        {
            get
            {
                return _transmitFlag;
            }
            set
            {
                if (!_transmitFlag.Equals(value))
                {
                    _transmitFlag = value;
                    OnPropertyChanged(nameof(TransmitFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TransmitFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransmitFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TransmitFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> TransmitFlag
        {
            get
            {
                if (this.TransmitFlagValueSpecified)
                {
                    return this.TransmitFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.TransmitFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.TransmitFlagValue = value.GetValueOrDefault();
                    this.TransmitFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("TransmitFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _updateFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("UpdateFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T UpdateFlagValue
        {
            get
            {
                return _updateFlag;
            }
            set
            {
                if (!_updateFlag.Equals(value))
                {
                    _updateFlag = value;
                    OnPropertyChanged(nameof(UpdateFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UpdateFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpdateFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UpdateFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> UpdateFlag
        {
            get
            {
                if (this.UpdateFlagValueSpecified)
                {
                    return this.UpdateFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.UpdateFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.UpdateFlagValue = value.GetValueOrDefault();
                    this.UpdateFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("UpdateFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Enable_T _readOnInitFlag;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("ReadOnInitFlag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enable_T ReadOnInitFlagValue
        {
            get
            {
                return _readOnInitFlag;
            }
            set
            {
                if (!_readOnInitFlag.Equals(value))
                {
                    _readOnInitFlag = value;
                    OnPropertyChanged(nameof(ReadOnInitFlagValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReadOnInitFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReadOnInitFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReadOnInitFlagValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<Enable_T> ReadOnInitFlag
        {
            get
            {
                if (this.ReadOnInitFlagValueSpecified)
                {
                    return this.ReadOnInitFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.ReadOnInitFlagValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.ReadOnInitFlagValue = value.GetValueOrDefault();
                    this.ReadOnInitFlagValueSpecified = value.HasValue;
                    OnPropertyChanged("ReadOnInitFlag");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _datapointType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DatapointType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> DatapointType
        {
            get
            {
                return _datapointType;
            }
            private set
            {
                if (_datapointType == value)
                    return;
                if (_datapointType == null || value == null || !_datapointType.Equals(value))
                {
                    _datapointType = value;
                    OnPropertyChanged(nameof(DatapointType));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointTypeSpecified
        {
            get
            {
                return (this.DatapointType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectInstanceRef_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectInstanceRef_T" /> class.</para>
        /// </summary>
        public ComObjectInstanceRef_T()
        {
            this._datapointType = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isActive;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("IsActive", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsActiveValue
        {
            get
            {
                return _isActive;
            }
            set
            {
                if (!_isActive.Equals(value))
                {
                    _isActive = value;
                    OnPropertyChanged(nameof(IsActiveValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die IsActive-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsActive property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IsActiveValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> IsActive
        {
            get
            {
                if (this.IsActiveValueSpecified)
                {
                    return this.IsActiveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((this.IsActiveValue.Equals(value.GetValueOrDefault()) == false))
                {
                    this.IsActiveValue = value.GetValueOrDefault();
                    this.IsActiveValueSpecified = value.HasValue;
                    OnPropertyChanged("IsActive");
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectInstanceRef_TConnectors", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectInstanceRef_TConnectors : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ComObjectInstanceRef_TConnectorsSend _send;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Send", Namespace="http://knx.org/xml/project/11")]
        public ComObjectInstanceRef_TConnectorsSend Send
        {
            get
            {
                return _send;
            }
            set
            {
                if (_send == value)
                    return;
                if (_send == null || value == null || !_send.Equals(value))
                {
                    _send = value;
                    OnPropertyChanged(nameof(Send));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_TConnectorsReceive> _receive;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Receive", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_TConnectorsReceive> Receive
        {
            get
            {
                return _receive;
            }
            private set
            {
                if (_receive == value)
                    return;
                if (_receive == null || value == null || !_receive.SequenceEqual(value))
                {
                    _receive = value;
                    OnPropertyChanged(nameof(Receive));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Receive-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Receive collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReceiveSpecified
        {
            get
            {
                return (this.Receive.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ComObjectInstanceRef_TConnectors" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ComObjectInstanceRef_TConnectors" /> class.</para>
        /// </summary>
        public ComObjectInstanceRef_TConnectors()
        {
            this._receive = new System.Collections.ObjectModel.ObservableCollection<ComObjectInstanceRef_TConnectorsReceive>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectInstanceRef_TConnectorsSend", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectInstanceRef_TConnectorsSend : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _groupAddressRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("GroupAddressRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GroupAddressRefId
        {
            get
            {
                return _groupAddressRefId;
            }
            set
            {
                if (_groupAddressRefId == value)
                    return;
                if (_groupAddressRefId == null || value == null || !_groupAddressRefId.Equals(value))
                {
                    _groupAddressRefId = value;
                    OnPropertyChanged(nameof(GroupAddressRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _acknowledge = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Acknowledge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Acknowledge
        {
            get
            {
                return _acknowledge;
            }
            set
            {
                if (!_acknowledge.Equals(value))
                {
                    _acknowledge = value;
                    OnPropertyChanged(nameof(Acknowledge));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ComObjectInstanceRef_TConnectorsReceive", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComObjectInstanceRef_TConnectorsReceive : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _groupAddressRefId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("GroupAddressRefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GroupAddressRefId
        {
            get
            {
                return _groupAddressRefId;
            }
            set
            {
                if (_groupAddressRefId == value)
                    return;
                if (_groupAddressRefId == null || value == null || !_groupAddressRefId.Equals(value))
                {
                    _groupAddressRefId = value;
                    OnPropertyChanged(nameof(GroupAddressRefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _acknowledge = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Acknowledge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Acknowledge
        {
            get
            {
                return _acknowledge;
            }
            set
            {
                if (!_acknowledge.Equals(value))
                {
                    _acknowledge = value;
                    OnPropertyChanged(nameof(Acknowledge));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeviceInstance_TAdditionalAddressesAddress", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInstance_TAdditionalAddressesAddress : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _address;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(byte), "1", "255")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeviceInstance_TBinaryDataBinaryData", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInstance_TBinaryDataBinaryData : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _data;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Data", Namespace="http://knx.org/xml/project/11", DataType="base64Binary")]
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                if (_data == value)
                    return;
                if (_data == null || value == null || !_data.SequenceEqual(value))
                {
                    _data = value;
                    OnPropertyChanged(nameof(Data));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BusAccess_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BusAccess_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _edi;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: \{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [System.Xml.Serialization.XmlAttributeAttribute("Edi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Edi
        {
            get
            {
                return _edi;
            }
            set
            {
                if (_edi == value)
                    return;
                if (_edi == null || value == null || !_edi.Equals(value))
                {
                    _edi = value;
                    OnPropertyChanged(nameof(Edi));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _parameter;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Parameter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Parameter
        {
            get
            {
                return _parameter;
            }
            set
            {
                if (_parameter == value)
                    return;
                if (_parameter == null || value == null || !_parameter.Equals(value))
                {
                    _parameter = value;
                    OnPropertyChanged(nameof(Parameter));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Topology_TAreaLineAdditionalGroupAddressesGroupAddress", Namespace="http://knx.org/xml/project/11", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Topology_TAreaLineAdditionalGroupAddressesGroupAddress : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _address;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupAddresses_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupAddresses_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<GroupRange_T> _groupRanges;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("GroupRanges", Namespace="http://knx.org/xml/project/11")]
        [System.Xml.Serialization.XmlArrayItemAttribute("GroupRange", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<GroupRange_T> GroupRanges
        {
            get
            {
                return _groupRanges;
            }
            private set
            {
                if (_groupRanges == value)
                    return;
                if (_groupRanges == null || value == null || !_groupRanges.SequenceEqual(value))
                {
                    _groupRanges = value;
                    OnPropertyChanged(nameof(GroupRanges));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="GroupAddresses_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupAddresses_T" /> class.</para>
        /// </summary>
        public GroupAddresses_T()
        {
            this._groupRanges = new System.Collections.ObjectModel.ObservableCollection<GroupRange_T>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BuildingPart_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildingPart_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<BuildingPart_T> _buildingPart;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BuildingPart", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<BuildingPart_T> BuildingPart
        {
            get
            {
                return _buildingPart;
            }
            private set
            {
                if (_buildingPart == value)
                    return;
                if (_buildingPart == null || value == null || !_buildingPart.SequenceEqual(value))
                {
                    _buildingPart = value;
                    OnPropertyChanged(nameof(BuildingPart));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingPart-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BuildingPart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BuildingPartSpecified
        {
            get
            {
                return (this.BuildingPart.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="BuildingPart_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BuildingPart_T" /> class.</para>
        /// </summary>
        public BuildingPart_T()
        {
            this._buildingPart = new System.Collections.ObjectModel.ObservableCollection<BuildingPart_T>();
            this._deviceInstanceRef = new System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T> _deviceInstanceRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DeviceInstanceRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T> DeviceInstanceRef
        {
            get
            {
                return _deviceInstanceRef;
            }
            private set
            {
                if (_deviceInstanceRef == value)
                    return;
                if (_deviceInstanceRef == null || value == null || !_deviceInstanceRef.SequenceEqual(value))
                {
                    _deviceInstanceRef = value;
                    OnPropertyChanged(nameof(DeviceInstanceRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceInstanceRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceInstanceRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeviceInstanceRefSpecified
        {
            get
            {
                return (this.DeviceInstanceRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private BuildingPartType_T _type;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Type", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BuildingPartType_T Type
        {
            get
            {
                return _type;
            }
            set
            {
                if (!_type.Equals(value))
                {
                    _type = value;
                    OnPropertyChanged(nameof(Type));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (_number == value)
                    return;
                if (_number == null || value == null || !_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus = CompletionStatus_T.Undefined;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(CompletionStatus_T.Undefined)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatus
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _defaultLine;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DefaultLine", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefaultLine
        {
            get
            {
                return _defaultLine;
            }
            set
            {
                if (_defaultLine == value)
                    return;
                if (_defaultLine == null || value == null || !_defaultLine.Equals(value))
                {
                    _defaultLine = value;
                    OnPropertyChanged(nameof(DefaultLine));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeviceInstanceRef_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceInstanceRef_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _refId;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RefId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RefId
        {
            get
            {
                return _refId;
            }
            set
            {
                if (_refId == value)
                    return;
                if (_refId == null || value == null || !_refId.Equals(value))
                {
                    _refId = value;
                    OnPropertyChanged(nameof(RefId));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupRange_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupRange_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<GroupRange_T> _groupRange;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("GroupRange", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<GroupRange_T> GroupRange
        {
            get
            {
                return _groupRange;
            }
            private set
            {
                if (_groupRange == value)
                    return;
                if (_groupRange == null || value == null || !_groupRange.SequenceEqual(value))
                {
                    _groupRange = value;
                    OnPropertyChanged(nameof(GroupRange));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GroupRange-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GroupRange collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupRangeSpecified
        {
            get
            {
                return (this.GroupRange.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="GroupRange_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupRange_T" /> class.</para>
        /// </summary>
        public GroupRange_T()
        {
            this._groupRange = new System.Collections.ObjectModel.ObservableCollection<GroupRange_T>();
            this._groupAddress = new System.Collections.ObjectModel.ObservableCollection<GroupAddress_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<GroupAddress_T> _groupAddress;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("GroupAddress", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<GroupAddress_T> GroupAddress
        {
            get
            {
                return _groupAddress;
            }
            private set
            {
                if (_groupAddress == value)
                    return;
                if (_groupAddress == null || value == null || !_groupAddress.SequenceEqual(value))
                {
                    _groupAddress = value;
                    OnPropertyChanged(nameof(GroupAddress));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GroupAddress-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GroupAddress collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupAddressSpecified
        {
            get
            {
                return (this.GroupAddress.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _rangeStart;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RangeStart", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort RangeStart
        {
            get
            {
                return _rangeStart;
            }
            set
            {
                if (!_rangeStart.Equals(value))
                {
                    _rangeStart = value;
                    OnPropertyChanged(nameof(RangeStart));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ushort _rangeEnd;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("RangeEnd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ushort RangeEnd
        {
            get
            {
                return _rangeEnd;
            }
            set
            {
                if (!_rangeEnd.Equals(value))
                {
                    _rangeEnd = value;
                    OnPropertyChanged(nameof(RangeEnd));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _unfiltered = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Unfiltered", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Unfiltered
        {
            get
            {
                return _unfiltered;
            }
            set
            {
                if (!_unfiltered.Equals(value))
                {
                    _unfiltered = value;
                    OnPropertyChanged(nameof(Unfiltered));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupAddress_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupAddress_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private uint _address;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 65535.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "1", "65535")]
        [System.Xml.Serialization.XmlAttributeAttribute("Address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint Address
        {
            get
            {
                return _address;
            }
            set
            {
                if (!_address.Equals(value))
                {
                    _address = value;
                    OnPropertyChanged(nameof(Address));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _unfiltered = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Unfiltered", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Unfiltered
        {
            get
            {
                return _unfiltered;
            }
            set
            {
                if (!_unfiltered.Equals(value))
                {
                    _unfiltered = value;
                    OnPropertyChanged(nameof(Unfiltered));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _central = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Central", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Central
        {
            get
            {
                return _central;
            }
            set
            {
                if (!_central.Equals(value))
                {
                    _central = value;
                    OnPropertyChanged(nameof(Central));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _global = false;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlAttributeAttribute("Global", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Global
        {
            get
            {
                return _global;
            }
            set
            {
                if (!_global.Equals(value))
                {
                    _global = value;
                    OnPropertyChanged(nameof(Global));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> _datapointType;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("DatapointType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.ObservableCollection<string> DatapointType
        {
            get
            {
                return _datapointType;
            }
            private set
            {
                if (_datapointType == value)
                    return;
                if (_datapointType == null || value == null || !_datapointType.Equals(value))
                {
                    _datapointType = value;
                    OnPropertyChanged(nameof(DatapointType));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DatapointType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DatapointType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatapointTypeSpecified
        {
            get
            {
                return (this.DatapointType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="GroupAddress_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupAddress_T" /> class.</para>
        /// </summary>
        public GroupAddress_T()
        {
            this._datapointType = new System.Collections.ObjectModel.ObservableCollection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Trade_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Trade_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<Trade_T> _trade;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Trade", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<Trade_T> Trade
        {
            get
            {
                return _trade;
            }
            private set
            {
                if (_trade == value)
                    return;
                if (_trade == null || value == null || !_trade.SequenceEqual(value))
                {
                    _trade = value;
                    OnPropertyChanged(nameof(Trade));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Trade-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Trade collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TradeSpecified
        {
            get
            {
                return (this.Trade.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Trade_T" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Trade_T" /> class.</para>
        /// </summary>
        public Trade_T()
        {
            this._trade = new System.Collections.ObjectModel.ObservableCollection<Trade_T>();
            this._deviceInstanceRef = new System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T> _deviceInstanceRef;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DeviceInstanceRef", Namespace="http://knx.org/xml/project/11")]
        public System.Collections.ObjectModel.ObservableCollection<DeviceInstanceRef_T> DeviceInstanceRef
        {
            get
            {
                return _deviceInstanceRef;
            }
            private set
            {
                if (_deviceInstanceRef == value)
                    return;
                if (_deviceInstanceRef == null || value == null || !_deviceInstanceRef.SequenceEqual(value))
                {
                    _deviceInstanceRef = value;
                    OnPropertyChanged(nameof(DeviceInstanceRef));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceInstanceRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceInstanceRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeviceInstanceRefSpecified
        {
            get
            {
                return (this.DeviceInstanceRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _id;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id == value)
                    return;
                if (_id == null || value == null || !_id.Equals(value))
                {
                    _id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Number", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (_number == value)
                    return;
                if (_number == null || value == null || !_number.Equals(value))
                {
                    _number = value;
                    OnPropertyChanged(nameof(Number));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompletionStatus_T _completionStatus = CompletionStatus_T.Undefined;
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(CompletionStatus_T.Undefined)]
        [System.Xml.Serialization.XmlAttributeAttribute("CompletionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompletionStatus_T CompletionStatus
        {
            get
            {
                return _completionStatus;
            }
            set
            {
                if (!_completionStatus.Equals(value))
                {
                    _completionStatus = value;
                    OnPropertyChanged(nameof(CompletionStatus));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _description;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description == value)
                    return;
                if (_description == null || value == null || !_description.Equals(value))
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SplitInfo_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SplitInfo_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _objectPath;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ObjectPath", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ObjectPath
        {
            get
            {
                return _objectPath;
            }
            set
            {
                if (_objectPath == value)
                    return;
                if (_objectPath == null || value == null || !_objectPath.Equals(value))
                {
                    _objectPath = value;
                    OnPropertyChanged(nameof(ObjectPath));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _cookie;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")]
        [System.Xml.Serialization.XmlAttributeAttribute("Cookie", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Cookie
        {
            get
            {
                return _cookie;
            }
            set
            {
                if (_cookie == value)
                    return;
                if (_cookie == null || value == null || !_cookie.Equals(value))
                {
                    _cookie = value;
                    OnPropertyChanged(nameof(Cookie));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Project_TInstallationsInstallationSplitType", Namespace="http://knx.org/xml/project/11")]
    public enum Project_TInstallationsInstallationSplitType
    {
        
        /// <summary>
        /// </summary>
        None,
        
        /// <summary>
        /// </summary>
        Master,
        
        /// <summary>
        /// </summary>
        Split,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UserFile_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserFile_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _filename;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 255.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(255)]
        [System.Xml.Serialization.XmlAttributeAttribute("Filename", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Filename
        {
            get
            {
                return _filename;
            }
            set
            {
                if (_filename == value)
                    return;
                if (_filename == null || value == null || !_filename.Equals(value))
                {
                    _filename = value;
                    OnPropertyChanged(nameof(Filename));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _comment;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                if (_comment == value)
                    return;
                if (_comment == null || value == null || !_comment.Equals(value))
                {
                    _comment = value;
                    OnPropertyChanged(nameof(Comment));
                }
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AddInData_t", Namespace="http://knx.org/xml/project/11")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInData_T : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _addInId;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: \{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [System.Xml.Serialization.XmlAttributeAttribute("AddInId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AddInId
        {
            get
            {
                return _addInId;
            }
            set
            {
                if (_addInId == value)
                    return;
                if (_addInId == null || value == null || !_addInId.Equals(value))
                {
                    _addInId = value;
                    OnPropertyChanged(nameof(AddInId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _name;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlAttributeAttribute("Name", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name == value)
                    return;
                if (_name == null || value == null || !_name.Equals(value))
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }
    }
}
